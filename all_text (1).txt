





Building Dynamic Expressions - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationUsing Page SlugsUsing Reusable ElementsHandling ConditionalityBuilding Dynamic ExpressionsBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookBuilding Dynamic ExpressionsMost information that you will use in your Bubble application will be dynamic, and coming from the database, or from other sources of data, such as external APIs (plugins). In these cases, you will use the Expression Composer to define an expression that will be displayed as an expression in Edit-mode and evaluated in Run-mode. For instance you will see in the Editor 'Current user's email', which may become in Run-mode, depending on who is logged in, '[email protected]'.The Expression ComposerThe Expression Composer is a key element of the Bubble Application Editor that lets you build these expressions without typing anything, but instead by picking some options in some dropdown menus. The system will automatically prompt you in the next menu with options that are available given what you have selected so far. For instance, if the first main entry in the expression is 'Current User', the next menu will offer options such as 'is logged in', 'is not logged in', 'email', etc. In Bubble vocabulary, the main entry (i.e. the first choice in a dynamic expression) is known as a "data source" and all the chunks after it are known as "operators" (e.g. "email" in this case, or expressions like ":first", "contains", etc.).The composer lets you build complex expressions by combining different sources of data. It is important to note that the evaluation happens from the left to the right, without parentheses priorities. It is worth reiterating that if the dynamic expression is performing arithmetic / calculations, it is strictly evaluated left-to-right, not following traditional order of operations ("PEMDAS").Expressions' types are evaluated in Edit-mode to validate the type consistency. For instance, if you are trying to display the Current User's email in a text element, 'Current User' won't be valid, as it is not a text, while 'Current user's email' will be valid. When an expression isn't valid, it will be reported as an issue in the Issue Checker and the whole expression will be displayed in red. The Run-mode debugger is very useful to understand how an expression is evaluated.Data sourcesData sources are where you get your data from when designing a dynamic expression. It is going to be the first section of the expression. Sources of data can be a search from the database, the current user, data from an external API, some page and browser information, etc. Here are the key sources of data.Do a search forThis data source lets you fetch entries of a given type from the database and returns a list of things. This can be used in repeating groups to display a list, to check the existence of some entries (by checking the length of the list), etc. A search is defined by a type of data to look for (for instance 'user', or 'car'), and optionally some constraints and sorts options.ConstraintsYou can define some constraints to narrow the search and only fetch items that meet these constraints. For instance, you may want to find 'cars' where the price is between two values. Defining a constraint works by picking the field you want the constraint to apply to, defining a comparison operator (such as =, <, >, contains), and then defining the value to be compared with, either a static value or a dynamic expression. A search without constraints will return all the entries in the database of that type.You can either search by field, or do an all-field search. In such a case, the Search Engine will retrieve all entries that contain the text define as the value for the constraint.When an expression is evaluated to an empty value, the constraint can be ignored, by design. To do so, check the box for 'Ignore empty constraints'. This is helpful when building filters into your design for your users. For instance, let's say we are performing a search on a page for cars, and you let users type a maximum price in an input. If you are using the value of this input in a search constraint on the price field, and if the user has not typed anything, all cars will be retrieved (instead of returning no cars).Data from external APIsThe 'Get Data from API' data source lets you fetch data from an external service or server and returns a list of objects of that type. If you add some plugins to your app that offer some data sources, you will see some options in the dropdown for the API provider.Each API has different parameters, and the User Interface will prompt you to enter the relevant values. For instance, the Google Places API will need you to enter a value for what you're looking for ('cafe', 'restaurant', etc.) and an address. Here again, as you would do in a search, you can use dynamic expressions to make these API parameters dynamic.The Current UserThe current user represents the currently logged in user. This gives you access to the different fields that are defined on the user type, in addition to the few built-in fields.Result of previous actionIn workflows, when an action returns some data, you will often want to access the result of the previous operation in the subsequent actions. For instance, an action may create a thing of type 'order', and you need to get the ID of this thing to send it in an email. The 'Result from Previous action' data source lets you do this.Parent element's thing and current cell's thingThis is one of the most common data sources. In Bubble, container elements can have a thing attached to them, so that all elements inside can access this thing. You can control which thing a group has in its context by modifying the data source field or by using a 'Display data in group' action. A repeating group functions in a similar way. Each cell will have a thing in its context that can be accessed as a data source.Operations on listsBubble has a few operations that can be applied to lists. In particular, you can apply sorting and filtering to a list of things. These are different from search constraints as they are evaluated after the list is retrieved from the database, and therefore can lead to slower performance.Editing dynamic expressionsEditing dynamic expressions happens through the subsequent dropdown menus. You can use your mouse to pick the right option, and can also use the keyboard. Pressing the arrow keys lets you navigate the options, while pressing 'delete' will go back up in the expression and delete the subsequent entries.Bubble also has a few tools that help manipulating long expressions. You can find them with the contextual menu, but right clicking on an expression. In particular, you will be able to copy/ paste expressions, insert some dynamic expressions if you are working on a text expression with some dynamic entries, and reveal the element or the action an expression is referring to (if any).In rare situations, the "[click"] button to start typing a dynamic expression in an input may disappear; in that case, try right-clicking and clicking "Clear expression" to see if that fixes it for you.PreviousHandling ConditionalityNext - User manualBuilding WorkflowsLast modified 1yr agoCopy linkOn this pageThe Expression ComposerData sourcesDo a search forConstraintsData from external APIsThe Current UserResult of previous actionParent element's thing and current cell's thingOperations on listsEditing dynamic expressions









Building Workflows - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsThe BasicsHandling ConditionalityUsing Custom EventsTips When ProgrammingUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookBuilding WorkflowsIn this guide, you will cover the creation and the editing of workflows. Workflows are the medium you can use to express what your application does. Here are the sections in this guide.The BasicsHandling ConditionalityUsing Custom EventsTips When Programming​PreviousBuilding Dynamic ExpressionsNextThe BasicsLast modified 2yr agoCopy link









Font variables - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingColor variablesFont variablesStylesCustom FontsResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookFont variablesThis section covers Font variables, used to manage a collection of fonts that can be applied to elements and Styles throughout your appFont variables allow you to centralize font settings and make changes to the font across multiple elements and Styles. Instead of having to manually adjust font families in each instance they are used, you can simply modify the font variable in one place and watch the change propagate throughout your app.Font variables can be connected with styles. In the image below, the two top options in the font list are Font variables. Whenever a variable changes, that change will propagate to all Styles and elements.For newly created apps, the default styles will be set to the "App Font" by default.For apps built before the launch of the Font variables feature, you have the option to switch to the "App Font" either in the individual element appearance settings or in the Element Styles section of the Styles tabDo Font variables apply to Styles?Yes, Font variables apply to Styles, meaning that if you update a Font variable it will automatically be updated on all Styles that use that variable. By combining the two you can set up a flexible styling system that lets you make future changes with ease.PreviousColor variablesNextStylesLast modified 28d agoCopy link









The Application Editor - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereThe BasicsThe Application EditorThe Application Editor (Legacy)Building Your First AppStrategies to Learn BubbleApplication & Data OwnershipChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookThe Application EditorYou design, build, maintain, and scale your app using the Application Editor. The editor is structured around seven main tabs, which are outlined here. It also has a number of key tools and features that you will use as you build on Bubble. A few of those tools are highlighted here, as well.Our Academy course to introduce you to Bubble and its interface.Main tabsDesign tabThis is where you design the visual appearance of the app. Draw elements on the page, drag and resize them, and adjust their properties and appearance. For new users, we recommend starting here.To add a new element, click an element type in the Palette on the left, then click and drag on the page to insert it. Double-clicking on an element reveals the Property Editor, where you can customize the element's appearance and behavior. Right-clicking on an element displays a drop-down menu with additional editing options.Workflow tabThe Workflow Tab is where you define the workflows that program your page. The different workflows are displayed as boxes, which represent the event. Clicking on an event or an action will reveal a panel similar to the Property Editor. That's where you can define the different fields that need to be set for the action. For instance, a 'Send email' action will open a panel with a field named 'To', where you will define the address to which the email should be sent. If this information is dynamic, you can add it using the Composer, which lets you build dynamic expressions without code.Data tabThe Data Tab is where you can view your data structure and modify it. You can see the different data types that are used in your application, as well as the fields for each of them. The 'App Data' section shows you actual data. An Excel-type view will show the entries that have been created, and you can query, export, modify and delete entries. The Privacy section is where you define privacy rules to ensure that your application's data is seen by the right users. This is an advanced feature, but something you will have to set up as soon as you are using your application in production.Styles tabThe Styles Tab is where you define the different styles that elements can have in your interface. A Style is a shared set of properties (e.g. background colors, font size, etc.) that can be applied to elements of a similar type (e.g. Text elements). Using styles will help you have a more consistent interface, and it will enable you to quickly change your theme. It is highly recommended to use Styles whenever you can.Plugins tabPlugins are a way to extend Bubble's core functionality. For instance, you will have to install plugins in your application if you want to use an element that has been built by the Community, charge a credit card with Stripe, or offer your users the ability to sign up with Facebook. You can install plugins in the Plugins Tab. Once a plugin is installed, you will be able to enter parameters for each plugin if needed. For instance, if you want to use the Stripe plugin, you will need to enter API keys that you get from Stripe. The Plugins Tab is also where you can review plugins and rate them. Since most plugins are built by the Community, ratings and reviews are very important to keep the Bubble ecosystem healthy and help plugin builders refine their plugins.Settings tabThis tab lets you control your application subscription and paid add-ons. In the Settings tab, you will also find some application-wide settings that you will have to define before launching your application. Those settings range from defining a color palette and adding custom fonts to setting a password policy, making your app private, etc.Logs tabThis tab is useful once your app is live, or when you are testing it in Run-mode. You can use the server logs to help diagnose past events and workflow issues, as well as to check scheduled actions and your app usage in terms of workflow runs and upload storage.Watch out! Simultaneous use of many open browser tabs for the Bubble Application Editor on the same app can lead to unexpected behavior!Key toolsProperty EditorThe Property Editor is the main panel that you use to design each page's different elements, and customize events and actions. It is a draggable popup that will show the different fields that can/should be filled for an element, action, or event. It appears when you double-click on an element, or click once on an event or action. The top bar lets you rename the element/action/event you're editing, and the icons on the right let you show the Element Inspector, the Comment Panel, or some contextual videos. AppearanceControls related to the overall appearance of an element. This includes the data type, data source, styles, and transitions settings.LayoutControls related to the overall layout of an element on the page. This includes the width, height, container layout type, page visibility, and margins.ConditionalsConditionals allow you to control how page elements behave and appear under certain circumstances. This tab remains unchanged from before.App Search ToolAs soon as you have several pages and elements, you will be in a situation where you want to find all the elements that use the Current User's email, for instance, or all the ones that have a given style. Clicking on the magnifier icon in the top bar of the editor will reveal the search tool. You can search for elements, actions, etc. Clicking on an entry will take you to the right page/tab in the Editor.The 'Contains text' option simply matches any element where the underlying metadata, not the display name, contains part of the text that is searched. For example, when you rename a field, we don't rename all the occurrences of such a field's metadata, because that would be very slow, instead we only tell the Bubble editor to display the new display name where it needs to display it.Issue CheckerSince Bubble is very open-ended, you can (and probably will) make some mistakes as you design. A mistake can be a missing field or an issue with inconsistent type, such as using a text field type in a 'Charge a current user' action, when it should be a number for the price. The Issue Checker will check your app in real-time and list issues to fix. You will notice a red warning icon in the top bar as soon as you have an issue, and clicking on this warning icon will reveal the list. Similar to the search tool, clicking on each entry will take you to the right place and highlight the corresponding issue.It is important to keep the issue list as short as possible at all times (preferably to 0 items), as issues can make your app non-functional in run mode. You won't be able to deploy to the live, user-facing version of your app if you have issues.PreviewAs soon as you create a new app on Bubble, your app is ready to run. You can click on Preview at any time, and that will run your application on the page you are currently editing.Version ControlYou can revert your app to any point in time, depending on what your plan allows. If something goes wrong, like if you delete a page that shouldn't be deleted and can't undo the change, then you can restore your app to a time before the deletion occurred.Key featuresReal-time savingBubble saves your app automatically, in real time. As soon as you modify an element, action, setting, etc., the change will be saved. You will see a 'saving' notification in the top bar for a brief instant, which will change to 'saved' as soon as the saving process is finished.Note that sometimes the notification can turn red, usually because the internet connection hasn't been stable for some time. When this happens, you should stop working on your app for a bit and see if the connection returns to normal. If it doesn't, refreshing the Editor is the best way to get back to a normal state. You may lose the last changes you made when you refresh. Do not keep working on your app if the notification turns red, as you may lose any changes made to the app after the color change.Undo and redoAll modifications to your app, within one browser session, are undoable/redoable. You can click on both icons in the top bar to revert changes or apply them again. Note that the changes can happen in some parts of the Editor that aren't visible on the page you're on in that moment, so use these buttons with caution if you don't see what they are doing.Multi-user editingMore than one user can modify an app at the same time (note that you need to be on a paid plan to invite users). When someone else is modifying the app you are in, you will see the other user's mouse moving. This is useful to prevent two people from modifying the same element at the same time.ShortcutsSome shortcuts have been added to the Editor to make building faster. In addition to copy-pasting, you can add a workflow to a button and navigate the Composer (among other actions) using shortcuts. You can see a list of currently available shortcuts in the Shortcuts panel in the Help menu.Tutorial videosThe Help menu gives you the option to watch some videos from the Academy. There are also contextual videos that appear the first time you draw an element. You can also watch these by clicking on the '?' icon in the Property Editor. While these videos sometimes show an older Bubble User Interface theme, their content is still up-to-date and will help you get started with a new element/action.Access to the Core ReferenceYou can access our docs from the Editor through the 'See reference' tool-tip. When you hover over an icon or a field for a few seconds, the tool-tip will appear. Clicking on the tool-tip will open a new tab and take you to the right place within the docs. If you already have the docs open, then you'll instantly redirect to the right place.PreviousThe BasicsNextThe Application Editor (Legacy)Last modified 8mo agoCopy linkOn this pageMain tabsDesign tabWorkflow tabData tabStyles tabPlugins tabSettings tabLogs tabKey toolsProperty EditorAppearanceLayoutConditionalsApp Search ToolIssue CheckerPreviewVersion ControlKey featuresReal-time savingUndo and redoMulti-user editingShortcutsTutorial videosAccess to the Core Reference









Applicant Tracking System (ATS) Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookApplicant Tracking System (ATS) AppsBy TinksoVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!You’ll build an app that helps recruiters manage candidates & track the various steps in the hiring process in a scalable way. An Applicant Tracking System (ATS) includes job postings that can also be publicly available and shareable with potential candidates. Depending on your type of ATS, we will build a foundation that will allow you to create more complex features on top of it. Most ATSs have a built-in notification and communication system that allows recruiters and whole teams to manage large numbers of candidates.Popular ATS examples are: Jobvite, SmartRecruiters or Workable.While we’ll focus on data architecture, this type of app is usually made of these elements:Forms allowing you to create a new job posting and candidate profilesDisplay and filter a list of applications as well as candidatesApplication detail page containing job details and funnel around current candidates that applied to that positionData types recommendedUsers - who we can think of as recruiters - will be creating Talents (a person who is a candidate for a job) and Job postings. We will automatically create an Application when Users associate a Talent to a Job. Users are grouped into Companies. Each Company can have one or more users and many Talents and Job postings. Note that a Talent can only belong to one Company - if the same real-life person applies to two separate companies, each Company would have its own Talent record for that candidate.The Application data type allows us to track multiple Talents throughout all the stages of the hiring process. This structure enables you to assign a Talent to multiple Job postings without the need to copy unnecessary data.CompanyThe Company data type keeps all Talents, Users and Applications neatly organized in a way that Users from one Company cannot see other Companies and all the data they create. All Talent, Applications and Jobs will be grouped per Company. This will allow us to create an application that can be used by multiple unrelated companies.Suggested fields on this typename - textlogo - imagephone - textPrivacy rules for this data typeCurrent User’s Company is this Company: this user can see all information connected to that Company. This allows a user to see the information about their own Company, but no other Company (the default rule should not show anything).TalentA Talent is a profile of a given candidate for a given company. It contains all the necessary details about the applicant.Suggested fields on this typefirstName - textlastName - textfullName - textcontactEmail - emailphoneNumber - textaboutMe - textCV - fileTags - list of textsNotes - text: additional information from the recruiter about the candidate.TalentStatus - option set: when first creating talent we can default to Available. If this talent will be hired, we can update it to Hired status. This field will allow us to manage Talents which have applied to multiple Job positions, and filter that data appropriately.  Company - data type: Company to which the Talent belongs. In our system, one Talent cannot apply to more than one Company; if the same real-life person applies to more than one Company, they would need separate Talent records for the sake of keeping the data between Companies separatePrivacy rules for this data typeCompany data type on the Talent will allow us to create a Privacy Rule: When this Talent’s Company is Current User Company. All of the Talent information should only be accessible to Users to which this privacy rule applies.JobJob is a job position to which a candidate applies. It contains all necessary information for the recruiter and candidate if the Job position information is made public.Suggested fields on this typePosition - textDescription - numberNotes - text: information that should stay confidential, for recruiters only.JobStatus - option set: job status will allow us to filter data and manage all the Jobs within the ATS.Hired - Application: only one candidate can be hired per position, and when that happens we will update this field with the right Application.Company - data type: Company to which the Job posting belongs.Optional: Hired Talent - talent data type: you can also store hired talent on the Job to enable database searches like Display list of Jobs connected to this Talent.Privacy rules for this data typeIf your ATS creates job postings which are publicly accessible, you might not want to disclose some information e.g. the Hired field, to non-logged in Users or Users from a different company. You can set the privacy rules as follows:When this Job JobStaus is Open: following information is visible on the Job postings page:Position  DescriptionWhen Job’s Company is Current User Company: this user can see all information connected to that Job.ApplicationApplication combines some information about a Job and a Talent into one data type. It will allow us to track multiple candidates through a recruiting funnel.Suggested fields on this typeJob - data type: an application can only exist if it's linked to a Job. Job details page will display all the applications connected to that Job.ApplicationStatus - option set: this will allow us to create a candidate pipeline and track all the applications through the recruitment stages. It can also be used to trigger different logic such as ‘Notify the candidate’ or ‘Change the Status of the Application’s Job to Hired.Talent - data type: talent that should be considered in this Job’s pipeline.Company - data type: for privacy reasons, we need to store to which Company this applications belongs.interviewDate - data: can be used to send notifications to a User and Talent.Notes - text: additional information from the recruiter about the candidate.Rating - number: multiple categories for rating can be created. A simple field that will allow the User to rate the candidate from 1-5 and later filter the applicants for that position to better match possible hires.Privacy rules for this data typeWhen Job’s Company is Current User Company: this user can see all information connected to that Job.UserBuilt-in Bubble app field. Application user. It’s the recruiter that manages job applications within the app.Suggested fields on this typefirstName - textlastName - textfullName - textEmail - textuserType - option set: you can manage permissions within the app based on the userType (e.g. admin recruiter vs basic recruiter)Company - data type: company to which this User belongsPrivacy rules for this data typeWhen this User is Current User - see all fields.When this User type is Admin Recruiter and This User’s Company is Current User Company - see all fields.Option sets recommendedAll of the option sets listed below create flexibility in managing the Talent, Job and Applications within the app. You can easily add new options to create an even better experience for the end-user and allow them to manage the process more granularly.Job StatusOpenMatchingHiredClosedJob status will allow us to manage a large number of jobs and filter results in searches.Application StatusAppliedInterviewRejectedHiredApplication status will help us track the current state of recruitment for specific positions.Talent StatusAvailableHiredNot-availableTalent status will help us manage available talent within our application.Example uses in your appThe main search of the app is based on the Application data type which has information from other data types.You can set up it up the following way:Remember to set the ‘Ignore empty constraints’ on the search.You can sort either by InterviewDate or Creation Date field.The layout of the repeating group will depend on your app’s design. We recommend going either with extended vertical scrolling or introducing pagination for a better User Experience.​​About TinksoTinkso (tinkso.com) is a pioneer and leader in professional no-code and low-code product development. Our unique approach allows our clients to run successful businesses, raise millions in funding and scale professionally. Our suite of tools consists of openBuild Framework, openBuild UI Builder and a range of other tools, turns makers, freelancers and businesses in professional Bubble app builders.PreviousDocumentation/ CMS AppsNextPortfolio AppsLast modified 10mo agoCopy linkOn this pageData types recommendedCompanyTalentJobApplicationUserOption sets recommendedJob StatusApplication StatusTalent StatusExample uses in your appAbout Tinkso









Plugins that connect to APIs - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookPlugins that connect to APIsThis section covers plugins that offer API-related servicesTo connect to an external API, you will in many cases use the API Connector to set up the authentication and the different calls.There are many plugins however, that already have the authentication method and calls set up, that can save you some time. Before deciding to use the API Connector you may want to explore the plugin store to see if there's already a plugin that handles the calls you need.Finding API pluginsThere are two simple ways to search for plugins that connect to an API:Searching for the API provider:To search for relevant plugins:1.Navigate to the Plugins section of the Bubble editor and click Add plugin.2.Search for the API you want to connect to (i.e. Stripe)3.Click the Install buttonFilter by plugin typePlugins in the plugin store are categorized into types, and you can use these to filter out the plugins by whether they are related to an API or not:By selecting the API plugin type you can filter the search results for plugins that are related to different API services.Navigate to the Plugins section of the Bubble editor and click Add plugin.Under Types on the left-hand side menu, click deselect allSelect the API typeYou can further filter results by checking relevant boxes under Category or use the search functionPreviousHow to setup Google API keysNextAPI GlossaryLast modified 1mo agoCopy linkOn this pageFinding API pluginsSearching for the API provider:Filter by plugin type









Custom states - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseFilesStatic dataTemporary dataCustom statesURL parametersUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookCustom statesThis section covers Custom states, that are used to store temporary variables of different kindsCustom states are variables that you can save on any element on the page, including the page itself. They let you store data temporarily that is reset when the page is reloaded. This is useful when you need your app to remember some information that you don't need to store permanently in the database.While custom states are not visible to the users of your app directly, they are still not a secure way to store sensitive data. Keep in mind that any information you place in a custom state, including its default value, can be read by the user of that device.Custom states have the following properties:They only hold data until the page is reloaded and its reset to its default value (empty by default)They are hidden from the user, but can be referenced in any dynamic expression where you need themThey are stored client-side, and as such as faster than reading and writing to the databaseThey can hold any kind of data, both elemental types (text, numbers, dates, etc), Option set options and custom data types. They can also hold lists of valuesEach custom state is connected to an element, and you can create as many as you need on each element, including the page itselfYou can store any kind of Bubble data in a custom state, ranging from simple text values to a data type like a specific user, a shopping cart or anything else that you'd like your app to "remember". Using lists of values, you can also set up custom states to keep track of multiple pieces of data. For example, you can keep track of when a user selects things in a repeating group by adding those things to the custom state's list.Creating custom statesAny element can have a custom state attached to it, and it's up to you to decide which element is the most appropriate to store it on. You can create as many custom states as you need on each element. There are two ways to define a custom state.The Set state of an element actionYou can create it when you use the Set custom state action:1.Add the Set state of an element action to a workflow2.Pick the element (the index page in the example) and then pick Create a new custom state.If you have any existing custom states on that element, they will show up above the option to create a new one.The element inspectorYou can also create one or more new custom states by using the Element Inspector:You can use the Element inspector both to create new custom states and to see the ones you've already created. In the example above we already have a custom state called My state of type text.Click Add a new custom state in the right-hand window to create a new one.Similarly to fields, a custom state needs to have a defined data type. This will enable the Bubble Editor to display the relevant options when using an element's state's value. You can set the data type to any of Bubble's built in data types, Option sets and custom data types.Setting a data type instructs Bubble to treat the custom state in a way relevant for that typeLocating, editing and deleting a custom stateYou can also use the Element Inspector to find, edit and delete existing custom states on an element. Click the information icon as shown in the animation above.The name of a custom state is automatically updated all over your app and can safely be changed. You can also change the type of data in a custom state or delete it altogether, but both of these can generate errors in the issue tracker if it leads to workflows or expressions no longer working.Assigning a value to a custom stateThere are two different ways of assigning a value to a custom state:1.You can set its default value in the Element Inspector
This only works for static values that you can type into the Default value field, such as text and numbers2.You can assign a value to a custom state using the Set state of an element action.You can use the Set state of an element action to assign a value to a state. In the example above the type of state is textAny time you assign a value to a state, its last value is permanently overwritten.Custom states are not automatically updated when database records are deleted. This means that if you are storing a list of things in a custom state, and one or more of those things are deleted from the database, the list will still show the same item count. The fields on the deleted data types will show up empty.

You can get around this by applying a filter in any expression that counts the items in a list, such as My element's custom state list:filtered [Creation Date is not empty]:count.PreviousTemporary dataNextURL parametersLast modified 5d agoCopy linkOn this pageCreating custom statesThe Set state of an element actionThe element inspectorLocating, editing and deleting a custom stateAssigning a value to a custom state









Input forms - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersInput formsText and numbersDates and timeFile uploadsSelection controlsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookInput formsThis section covers Input forms. These are element that accept data input from a user such as text, numbers, dates, uploads and dynamic content.Input forms are the elements that you use to collect information from your users. They can be used for a simple checkbox or combined into complex forms.The articles  in this section cover Bubble's built-in input elements. There are also a wide range of plugins in the plugin store that offer new ways of accepting user input.Different kinds of inputUser input can mean many things, and most applications accept a wide range of different categories of input from their users. Even single forms are usually made up of different types of inputs that makes it easy for your users to understand what kind of data they're asked to provide.​A simple signup form like the one above combines several different categories of input forms to make the UX easy for your users to understand and to prepare the data for processing – such as saving it in the database.​Text and numbersText and number inputs allow users to provide text ranging from short, structured data like an email address, an order number or a name to long, unstructured data like a blog post or product description. Text can be formatted (rich text) or unformatted (plain text).Text and numbersDates and timeDate and time inputs allow users to provide date and time values. Some inputs let users type the information in, others are set up to let users pick a date from a calendar and a time from a timepicker.Dates and timeFile uploadsFile uploads are a third category of input that allows users to upload any kind of file to your application. File uploadsSelection controlsSelection controls are input elements that let you set up pre-defined options for your users to select from. This allows you to restrict the available choices, ranging from simple yes/no answers to selecting preset text/numerical values and dynamic content from your app's database.This includes:CheckboxesRadio buttonsDropdown listsSelection controls​​PreviousGroup focusNextText and numbersLast modified 1mo agoCopy linkOn this pageDifferent kinds of inputText and numbersDates and timeFile uploadsSelection controls









API Glossary - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookAPI GlossaryThis section covers widely used API terminology.Help us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​​Authentication and authorizationAuthentication is the process of verifying the identity of a client sending an API request (who the client is). For example, the Bubble API can be set up to require a bearer token to prove the identity of the client trying to connect. This process of providing the credentials and the server verifies them is the authentication process.

Authorization is the process of determining what a client has access to after they have authenticated themselves. It is the mechanism by which an API can determine what a user or system is allowed to do once they have been authenticated. For example, after a client has authenticated themselves with the Bubble API, the API will check your app's Privacy API settings, Privacy Rules and other details to determine whether they have access to specific resources.In short: Authentication is the process of verifying who you are, while authorization is the process of verifying what you have access to.​Further reading:Article: Authenticating with the Bubble API
Article: Setting up Authentication in the API Connector
Article: The Data API and Privacy Rules
Article: The Workflow API and Privacy Rules​APIAPI stands for "Application Programming Interface" and it is a set of protocols, routines, and tools for allowing different software systems to communicate with each other.

Further reading:
Article: Introduction to APIs
Article: What is a RESTful API?​Client/ServerIn the context of an API call, the Client is the one that initiates the call and the server is the one to respond.

In the case of an incoming API request (The Data API or Workflow API) the system sending the request is the client and the Bubble server that hosts your app is the server.

In the case of outgoing API request (The API Connector) your Bubble app is the client and the system you are connecting with is the server.

Further reading:
Article: The Client/Server relationship​EndpointAn endpoint is a specific URL that an application can send requests to, to retrieve or manipulate data.

In the Bubble API, the endpoint is the URL that identifies a data type or a specific API Workflow. In outgoing requests made via the API Connector, the endpoint is the HTTP action and URL that you are pointing the call towards.

Further reading:Article: Data API endpoints
Article: Workflow API endpoints​HTTP MethodThe HTTP method is the instruction for the server to indicate the desired action to be performed on the specified resource (e.g. GET, POST, PUT, DELETE).

Further reading:Article: What is the HTTP method?
Article: Introduction to APIs​JSONJSON is a lightweight data interchange format typically used in Javascript. It uses human-readable text to transmit data objects that consist of attribute–value pairs and array data types.

It is commonly used both in incoming API Connections (the Data API and Workflow API) and outgoing API Connections (The API Connector).

Further reading:
Article section: What is the JSON format?​Oauth2OAuth2 is a protocol used by a server to determine a client's authorization. It lets a User grant an app (like your Bubble app) access to the resources stored in an external app without having to share their login credentials with the first app.

Instead, the server that hosts the external app will issue a token that your app can use to access the User's resources. That way, subsequent requests can be made without the User having to authorize each one or share their credentials.

Examples:A User wants to connect their social media account (such as Facebook or Twitter) to your Bubble-built social media management app in order to share posts automatically. The User grants your app access to their social media account using OAuth2, and your app is issued a token that it can use to post photos on behalf of the User.A User wants to be able to automatically add appoints to Google Calendar when a meeting is booked in your Bubble-built CRM. The User grants your app access to their Google account your app is issued a token that lets your app make changes to the User's calendar as needed.An enterprise clients wants to allow your app to access resources from their server without giving them actual login credentials. They use OAuth2 to issue a token to your app that you can use for subsequent calls.PayloadThe payload is the data or information sent in an API request or response.ResourceA resource is a specific data object or service that is made available by an API and can be accessed via a unique endpoint using methods such as GET, POST, PUT, and DELETE.

For example, if you are trying to access data about a specific User in your Bubble app from an external application, the User endpoint can be considered a resource. The same can be said about a specific API Workflow.

In other words, a resource represents a specific piece of information or functionality that an API can provide.

Further reading:
Article: What is a RESTful API?​Request/ResponseIn an API call, the request is the data sent from the client to initiate the connection. It contains all the data needed to authenticate and instruct the server what the request is about.

The response is the data sent back from the server to the client in response to the request.

Further reading:Article: Introduction to APIs​RESTfulAPIs that are RESTful mean that they are built on a set of architectural principles for building web services known as Representational State Transfer (REST). Most commercial and public API services adhere to these principles.

In short, this is a way to ensure that APIs that communicate with each other are compatible, or "speak the same language" if you will. Bubble's API and the API Connector is built around RESTful principles, which means it can connect to almost any web API.

Further reading:Article: What is a RESTful API?​TokenA token is a string that identifies the client sending an API request.

In the case of incoming requests (The Data API or Workflow API) the token is issued by Bubble.

In the case of outgoing requests (The API Connector) the token is issued by the server you are connecting to.

Further reading:
Article section: What is a bearer token?
​PreviousPlugins that connect to APIsNext - User manualTesting an ApplicationLast modified 1mo agoCopy link









Online Store / Ecommerce Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookOnline Store / Ecommerce AppsBy Petter Amlie, Amlie SolutionsVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!In this guide we’re building an online store, similar to something like Amazon or Shopify: a place where Users can add Products or Services to a Shopping Cart and go through a checkout process where they pay for the items.For an eCommerce store, no matter what you are selling, there will be a mix of public and private data. For example, Products need to be public, because Users must be able to search for them and add them to their Cart. But a User’s shopping history must only be visible to that User, and to the employees who are fulfilling the order. For this, we’ll use Privacy Rules, and you’ll see that you have full control over who can see what in your application.We’ll also take into account that you need to retain some historical records at the time of purchase. This is to make sure that Products that may change over time (such as the price being adjusted) does not affect past purchases.Data types recommendedThere will be four major Data Types involved in our online store. The User is of course built into Bubble already, but we’re making some key changes to them to make sure we can separate different types of Users from each other. The second is the Product. This one is a public data type that people can search for and review its details before adding it to our third data type: the cart. The cart is the container that holds Products while the User is shopping, and it allows the User to pay for all items at the same time, as well as maintaining the Users purchase history by showing each Cart as a separate order.Finally, we’re setting up a Cart item Data Type. We use this item to store information after the purchase has been made to make sure we know what each item cost and how it was described at the time of purchase.Let’s have a look at the details.UserYour app will of course consist of Users. In our case, there will be two types of Users that we need to think about:Regular Users (users who have registered an account in your application)Admins Users (users who have access to your application's back-end to fulfill orders)Suggested fields on this typeName - textPhone number - text (if relevant to your app)Shopping cart - Shopping cart: This field will be used to store the currently active Shopping cart that the User can add Products toAdmin - yes/no: This field will be used to determine whether the User is an administrator or not. You can set this field’s default value to “no”Privacy rules for this data typeIn most online stores, we do not want Users to be able to see each other’s cart and we also want to keep it hidden that a User is registered at all, except to the User themselves and Administrators.Our first rule will let Users see and edit their own information:If this User is Current User, this User can:View all fields: yesFind this in searches: yesView attached files: yesAllow auto-binding:Name: YesPhone number: YesCart: NoAdmin: NoAs you can see, Users can now edit all their own information except for a few key fields: The Admin field (since otherwise that would make any User able to set themselves up as an administrator) and the Cart field (since the platform needs to be programmatically in control of that field as the User navigates the shopping process).Ok, so the User is all set up to handle their own info. As we discussed, we also need a kind of Administrator User that maintains the platform and fulfills orders. We set up the admin field to handle separate those Users, so let’s set up the Privacy Rule as following:If Current User’s admin is yes, this User can:View all fields: yesFind this in searches: yesView attached files: yesAllow auto-binding: yesWith this rule, we’ve made sure that admin Users can find, see and edit all information on all Users, and even assign the Admin role.Finally, the most important rule is the one that dictates what every User not covered by the previous rules can see and do. In our case, we want to restrict their access.Everyone else:View all fields: noFind this in searches: noView attached files: noAllow auto-binding: noProductAs your Users navigate your Online Store, they’ll need to be able to find and view Products. You can of course add as many details to this Data Type as you need. For this example, we’ll set up just a simple product with a name, image, price and a short description.To illustrate how you can use Privacy Rules to hide only specific fields on a database Thing, we’ll also add a field called Profit margin. This is a field that should be available to Administrators, but it should be invisible to everyone else. You may not need this in your app, but we’ll set it up just to learn how it’s done.Suggested fields on this typeName - text: the name of the Product, such as “Coffee mug”Image - imagePrice - numberDescription - textProfit margin - numberPrivacy rules for this data typeFirst, we need to make sure that Users can see all the Products - if not, it wouldn’t be much of a shopping experience! But keep in mind what we discussed earlier: we don’t want the Users to be able to see the Profit margin unless they are an admin. Also, regular Users should not be able to edit the Products in any way.We don’t actually need to set up a specific field for Users that are not admins, since in this case, we’ll cover that with the everyone else rule. First, we’ll set up the admin, and then everyone else. Admins should be able to find and edit all Products, and they also have access to the Profit margin field:If this User’s admin is yes, this User can:View all fields: noName: YesImage: YesPrice: YesDescription: YesProfit margin: YesFind this in searches: yesView attached files: yesAllow auto-binding: YesName: YesImage: YesPrice: YesDescription: YesProfit margin: YesEveryone else:View all fields: noName: YesImage: YesPrice: YesDescription: YesProfit margin: noFind this in searches: yesView attached files: yesAllow auto-binding: NoShopping cartThis is the container that we’ll use to store every Product that the User adds to it both before the purchase is made and after.Suggested fields on this typeProducts - list of Products: Make sure to check the “This field is a list” on this field to make sure it can contain more than one ProductTotal cost - Number: This is where we’ll store the total amount for all Products in the cartCart items - list of Cart items: Make sure to check the “This field is a list” on this field to make sure it can contain more than one Cart itemFulfillment status - Fulfillment status (option set): This field is used internally to determine how the order is moving in the system. You can set the default value for this to “Received” (see notes on the Option Set further down)Privacy rules for this data typeLike the User itself, the Cart is a very private field: no one except for the customer and the staff managing your app should be able to see it. First, we’ll set it up so that the User can see their own Cart. We’ll use the built-in Created by field for this. There are no fields that are auto-bound on the Shopping cart, since we’ll be relying on Workflows to add and remove items.If this Shopping Cart’s Created by is Current User, this User can:View all fields: YesFind this in searches: yesView attached files: yesAllow auto-binding: NoNow for the admins that fulfill the order:If Current User’s admin is yes, this User can:View all fields: YesFind this in searches: yesView attached files: yesAllow auto-binding: yesFulfillment status: yesTotal cost: NoProducts: NoCart items: YesAs you can see, not all fields are editable, even by an admin. As the total cost is calculated based on the Products inside, we don’t want anyone to be able to edit it directly.Now again, for the most important rule: what everyone else can see:Everyone else:View all fields: noFind this in searches: noView attached files: noAllow auto-binding: noCart itemThe Cart Item is basically a clone of the Product at the time of purchase. This lets us store a permanent record of what the item cost and how it was described when it was bought, so that we can make changes to a Product without it affecting already completed carts.Suggested fields on this typeShopping cart - Shopping cart: The Shopping cart to which the cart item belongs.Product - Product: First, we’ll link to the original ProductPrice - number: This number we’ll copy from the original Product when the User checks outName - textDescription - textPrivacy rules for this data typeThe Cart items should behave just like the Cart its in: visible to Users and Admins, and invisible to everyone else.If this Cart Item’s Created by is Current User, this User can:View all fields: YesFind this in searches: yesView attached files: yesAllow auto-binding: NoNow for the admins that fulfill the order:If Current User’s admin is yes, this User can:View all fields: YesFind this in searches: yesView attached files: yesAllow auto-binding: noKeep in mind that we may allow Admins to delete items in the Cart, but for that we’ll rely on workflows - not auto-binding. That’s why we keep auto-bind disabled for now.Option sets recommendedFulfillment statusReceivedProcessingSentThis Option Set is used to determine where in the system the order currently is, so that you can see which orders have been fulfilled or not. You can of course rename or add as many options as you see fit for your business.Additional notesKeep in mind for this guide that it takes a very general approach to Shopping Carts: you may have entirely different needs depending on whether you are selling t-shirts, takeaway food or hotel stays: but the principle remains the same. You need a cart for the User to organize whatever they are buying, and you need to maintain some historical data for what exactly they bought. You are of course free to use the guide as a basis for your own system and add whichever fields you think makes sense. But keep in mind that privacy is key, and that Privacy Rules are the only way to truly keep data secure.About Amlie SolutionsThis guide is written by Petter Amlie. Petter is the founder of Amlie Solutions, a no-code expert, public speaker and author of two books on Bubble: The Ultimate Guide to Bubble Performance and The Ultimate Guide to Bubble Security. You can find a growing number of free guides, video courses and in-depth articles on his website.PreviousGallery AppsNextBlog AppsLast modified 11mo agoCopy linkOn this pageData types recommendedUserProductShopping cartCart itemOption sets recommendedFulfillment statusAdditional notesAbout Amlie Solutions









On-demand Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookOn-demand AppsBy Zeroqode TeamVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!The on-demand type app can be easily associated with startups like Uber, Instacart, BloomThat, etc. Overall, on-demand apps generally contain capabilities for ordering, delivery, and tracking functionality via a map. Customers can order something from the platform and wait for a courier to deliver the items from a restaurant, for instance. Think UberEats, as one example.The following guide will give some recommendations for data types and option sets when setting up the database of your on-demand app. The target Bubble app will allow users to have a platform where it is possible for restaurants to list their menu with different meals, and for customers to add menu items to a shipping cart and place orders. The drivers will pick the order and deliver it to the customer.Data types recommendedThe main data type is User, of course. Users are picking different Menu Items from a menu to add to their shopping cart in the form of Cart Items, then placing an Order in order to confirm the payment. Meals come from a specific Restaurant. After completing the payment and receiving the Order, the customers are able to leave a Review for the Restaurant they ordered food from.RestaurantThis data type contains all the details about a restaurant registered on the platform, ranging from its name to its location. It contains all the list of Menu Items the restaurant offers. As the platform begins running, this data type will also track the Orders that users make from this restaurant.Suggested fields on this typename (text): the name of the restaurant, as displayed in the appdescription (text): to store the restaurant description for customersapproved (yes / no): to store whether or not the restaurant has been approved by the platform, in case you want to hide the un-approved oneslocation (geographic address): to store the geographic location of the restaurant so that it can be displayed on a mapmenu items (list of Menu Items): to store the list of all menu items that are available to buy from this restaurantorders (list of Orders): to store the list of orders related to this restaurantowner (User): to store the restaurant owner’s information; note this assumes that every restaurant owner is also a user on your platform, but we can show owners of restaurants different pages or information relative to users who are purely shoppers on the platformreviews (list of Reviews): to store the list of reviews related to this restaurant, so customers can see the feedbackPrivacy rules for this data typeYou can create privacy rules to allow only the restaurant’s owner to see certain fields on their restaurant. If the owner has a page to edit their restaurant’s information, you can also enable auto-binding for the fields they’re allowed to edit.Menu ItemThis data type stores information about the individual item from a Restaurant’s menu, which can be added by a user to their cart. A Menu Item comes from a specific Restaurant, and for simplicity’s sake, we can implement logic at the workflow level (i.e. not shown in this guide) to make it so that all the Cart Items in a given cart must come from the same Restaurant.Suggested fields on this type:restaurant (Restaurant): to store the Restaurant that offers this menu itemname (text): to store the name of this menu item, so it is possible to display itdescription (text): to store a description of this meal (optional, but may be handy)picture (image): to store a picture of this menu itemprice (number): to store the price of this mealPrivacy rules for this data typeAll these fields are ones that aren’t particularly sensitive, so they would likely be visible to all users. However, one nice feature for Restaurant owners might be to enable autobinding for any fields on a Menu Item that is associated with their Restaurant.Cart ItemThis data type is used to add meals to the shopping cart. It stores the information such as the Menu Item (related to a Restaurant) being added to the cart, the total price, quantity, etc. All the Cart Items in a user’s cart will be added to an Order prior to payment. You can also think of a Cart Item like one line item in the user’s ultimate receipt for an order.Suggested fields on this typemenu item (Menu Item): this is the item that the user adds to the cart; the user chooses which Menu Item, then the other fields below dictate the quantity they want of that item and the price that comes out toquantity (number): to store the quantity of the menu item added to the shopping carttotal price (number): to store the total price of the chosen quantity of the Menu Item; storing this is useful in case the restaurant changes the price of the item in the future; if it’s stored here, the app will remember how much the item(s) cost at the time of purchasePrivacy rules for this data typeSince users’ shopping carts will be private to themselves, we would create privacy rules to only make any Cart Item findable in searches and all of its fields visible to the creator of the Cart Item.OrderThis data type stores information about orders created on the platform. It contains information about the Cart Items that the user added to their cart, and we can assume that an Order is created during the (successful) checkout process. This data type also will store various information about how the payment works, including the fee the app will take and the amounts that will be paid out to the different parties of the transaction (the restaurant’s cut, driver’s cut, etc.).Suggested fields on this typecart items (list of Cart Items): to store the list of the cart items that are being purchased as part of this orderrestaurant (Restaurant): to save the Restaurant that the meal was ordered fromdelivery address (geographic location): to store the address this order should be delivered tocourier (User): to store who will deliver this order; note that this means we assume all couriers on our platform will also be Users in the apporder total price (number): to store the total price for this orderapp revenue (number): to store the platform's cut for each order transactioncourier fee (number): to store the payment amount taken by the courier as their cutrestaurant payout (number): to store the total payment amount received by the restaurant for the ordercurrent status (Status): to store the status of this order; this will be an option set of pre-determined options (see below)payment ID (text): if you’re using a platform like Stripe to manage payments, this field can store the unique ID of this paymentorder ID (text): to help all parties manage a particular order, it can be helpful for your app to generate a unique order ID for this order, which would be stored herePrivacy rules for this data typeOrders should only be visible (i.e. findable in searches) to the parties of the transaction - the Users who are either the ones placing the order, who are the couriers delivering the order, or who are the restaurant owners fulfilling the order. Moreover, sensitive fields like payment IDs and the various prices and payouts should have privacy rules set such that only the relevant party can see them.ReviewAfter the order is completed, users who placed the order can leave a Review. We’ll assume that Reviews are about a particular Restaurant.Suggested fields on this typereviewer (User): to store the User who is writing the reviewrestaurant (Restaurant): clarifies which restaurant this review is aboutrating (number): we can use a 0 to 5 scale for ratingstext (text): any free-form content the user wants to leave as part of the reviewPrivacy rules for this data typeReviews for a Restaurant can generally be left public, i.e. they can be found by any User. For the privacy of those writing the reviews, you may want to specifically hide the reviewer field from the public.UserThis data type contains information about the users on the platform. As we have seen above, there are different kinds of Users on our platform - customers, Restaurant owners and couriers. So for now, our User data type will have fields that relate to any of those three types of users; this means that more Users in the database are unlikely to have all the fields filled out, since they are unlikely to be a customer, Restaurant owner and a courier all at the same time.Suggested fields on this typefirst name (text): self-explanatory; it’s useful to save the user’s first name as its own field so you can easily do things like incorporate their first name into a confirmation email’s greetinglast name (text): self-explanatoryis admin (yes / no): it’s often useful to create a field on User to determine whether that user has special privileges with the platform; for example, this can be used to control whether the user can see an admin panel to help manage all orders (useful for your customer support team)address (geographic address): to store the address of the user so it can be pre-filled for future ordersfavorite restaurants (list of Restaurants): to store the list of restaurants a customer likes, if you want to build this feature into your platformcart (list of Cart Items): this is how we build a ‘shopping cart’ feature - this field stores the list of items added to the shopping cart by the customer, which can then be referenced when the user goes to checkout; after a successful checkout, you can clear this field on User so that they start from an empty cart on their next visitdriver license number (text): to store the number of the driver’s license for courier usersdriver license picture (image): to store the photo of the driver’s license for courier usersorders (list of Orders): to store the list of orders the customer made, as an order historyowned restaurant (Restaurant): to store the Restaurant object in case the current user is a restaurant ownerPrivacy rules for this data typeAs with many apps, our User data type contains sensitive information that generally should not be available to the public, e.g. last name, address, driver license information, etc. Any such sensitive field should be hidden from view for anybody except the user themselves and perhaps any admin users on the platform.Option sets recommendedStatusNewAcceptedFound a courierPicked upDeliveredCanceledThis option set is used to define the available statuses of an Order. As the order goes through different stages of its life-cycle, various workflows would advance the status of the Order as various updates happen.Example uses in your appLet’s assume that our app, now called Eaty, has an admin page where a member of the platform’s team can see all orders:​​The main repeating group on the page shows a query of all Orders by default, but note how the other horizontal tabs on the page would show a list of Orders with filters for different Statuses. For each Order on the page, we see various fields about the Order.Additional notesAfter building the basic functionality of an on-demand app, you may want to consider more advanced features. For example, on-demand apps often benefit from a chat feature with the other parties in the order, push notifications to alert users about order status changes, and a live map to track the delivery. Moreover, you may want to create some mobile-optimized pages for those using the app on the go, such as your couriers. Luckily, all these features and more are possible with Bubble.About the author: ZeroqodeA good example of a ready-made on-demand Bubble app is the Eaty template from Zeroqode.They have also built a great range of 🔌  Plugins to boost the development of your Bubble app, as well as 🎓 Lab courses to improve your Bubble skills.PreviousProfessional Services AppsNextDocumentation/ CMS AppsLast modified 11mo agoCopy linkOn this pageData types recommendedRestaurantMenu ItemCart ItemOrderReviewUserOption sets recommendedStatusExample uses in your appAdditional notesAbout the author: Zeroqode









Blog Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookBlog AppsBy Jason K (Founder of ​www.NoCodeMinute.com)Various members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!Many websites use a blog to promote their product, keep their users engaged and display updates about their business. If you are new to Bubble, and web developing in general, you might be struggling to put together the database for it. In this article, we will discuss a few different options to match your skill level and scale requirements. Building a blog with complexity might be more difficult than you might think. Let’s check out some options to help you on your no-code journey!We will go over two options for your data structures for two different levels of how complex your blog will be - we will call them Basic and Scalable. You can choose which data structure you will want to follow according to your needs. There is always more than one way to do something. Here are just a few ideas.Data types recommended - Basic exampleThis example is for a basic blog that doesn’t go into much detail. This is not recommended at scale for large blogs but will be fine for a small blog if you are just starting out. Simple design and easy to set up. Great for beginners if you are trying to just set up your first blog.As a site owner you will add your blog information into this main data type allowing for it to be displayed on a blog page.blogPostThis will be your main data type. This will hold the majority of your data and will normally be displayed in a repeating group on your page. Notice how we don’t pluralize the name here since each one (each “thing”) will be a singular blog post.Suggested fields on this typetitle (text): This will be the title of your blog post.summary (text): This will be the summary of your article that will be displayed underneath the titlebyLine (text): The name of the person who wrote the articlecontent (text): The content of your blog post; here we can use the Rich Text Editor plugin to add images and formatting, but even the resulting rich text can be stored as a “text” by Bubblevisible (yes/no): This will allow you to turn posts on or off from being visible on your blogPrivacy rules for this data typeWe will assume that you want the Blog to be public, so we will keep the data type and all its fields public. When creating the data type, make sure not to check the box to make it private. Similarly, after creating it, there will be no need to create privacy rules for it.Data types recommended - Scalable exampleThis example is for an intermediate blog where posts can have more detail and flexibility. As an example, this allows for each blog post to have a different structure to it instead of one standard structure. This should allow for better scaling. This is great for more experienced users if you are trying to just set up a more professional blog.This data type allows you to break out the blog post and blog post content separately. The site owner will create a blog post and then add the blog content as a repeating group within that blog post. This allows for different blog structures as your users view the different blog posts.blogPostThis will be your main data type. This will hold the majority of your data and will normally be displayed in a repeating group on your home page. Notice how we don’t pluralize the name here since each one will be a singular blog post.Suggested fields on this typetitle (text): This will be the title of your blog post.summary (text): This will be the summary of your article that will be displayed underneath the titlebyLine (text): The name of the person who wrote the articleblogContentList (list of blogContents): This is a list of your blogContent data type (see below)visible (yes/no): This will allow you to turn posts on and off from being visible on your pagePrivacy rules for this data typeWe will assume that you want the Blog to be fully public so we will keep the data type public, similarly to the Basic example.blogContentThis is your content for the blog post. It will hold the body and images of each post’s content. This allows for the flexibility of different structures in the blog content: this data type enables you to store each section of the post’s content as an individual blogContent, which then lets you display the different sections with different formatting. For example, perhaps you want one paragraph (which would be its own blogContent) to be formatted left-aligned, whereas you want the following paragraph (which would be another blogContent) to be formatted right-aligned for emphasis.If you wanted to make your blog even more flexible, you could build on top of this data type to store additional fields like “order” to set the order in which different chunks of content appear on the page, or “expiration” to set a time before/after which that particular chunk of content should appear.Suggested fields on this typeparentBlogPost (blogPost): this is how each blogContent knows which blogPost it belongs toblogContentType (blogContentType): this is the option set that will help you distinguish which type of content this will be, an image, text of a certain styling, or something else (see below). Having this field allows you to customize how this chunk of blogContent shows up on the page - the page can display this thing differently depending on its blogContentType.text (text): this is where your body paragraphs will go. Each will be in its own blogContentimage (image): this is where an image in your post can be storedPrivacy rules for this data typeWe will assume that you want the Blog to be fully public so we will keep the data type public, similarly to the Basic example.blogLikesThis data type is if you want to have users ‘like’ a post. We could save the list of ‘like’ing users as a list on each blogPost, but this list might be very large eventually and would slow down your app at scale. Hence, we’re creating it as a different data type. (Here is a lot more background on this choice.)Suggested fields on this typeparentBlogPost (blogPost): this stores which blogPost actually got the ‘like’creator (User): this is who liked the post (built in already)Privacy rules for this data typeThis could have privacy rules on it to not share exactly which user(s) liked a post publicly. In this case, we may want to rely on privacy rules on the User data type - we always recommend having privacy rules on User, given it likely stores sensitive information like email addresses. At minimum, one such privacy rule could be when ‘This user is current user’, they can see their own data but their own data should not be public to anyone else. You only need to be publicly allowed to search this data type to get the count.Option sets recommendedblogContentTypetextimageSmallimageLargetextAlignLefttextAlignRighttextAlignCenteredThis option set, used in our Scalable example, gives you the ability to describe what a particular section of blogContent is. In this example, this flexibility then allows you to align different section of a blogPost differently, or display an image in a large vs small format. You could add other options in this set if you want even more different ways for a chunk of content to appear.Example uses in your appDo a Search for BlogPosts - This would help you display your main blogPosts on your home page when this query powers a repeating group. For a result in this list - each of which would be one cell of a repeating group - the user would likely be able to click on a link to be taken to that particular blogPost with all of its blogContent.Do a Search for BlogContent where parentBlogPost = Current Page’s blogPost - On a page that’s showing a particular blogPost, this query will pull up all the blogContents for that blogPost, which can then be displayed in a repeating group on the page. Since we are also saving the blogContent as a list on the blogPost, you can access it by saying Current page blogPost’s blogContentList as well.About the author: Jason KThese are just two options for building a blog on Bubble. Setting up an app’s database structure can be very tricky for new developers, so we hope this helps.Need more help? Check us out at ​www.NoCodeMinute.com for one-on-one coaching and the eLearning Hub where you can find more video tutorials, lots of free content, and a blog like the example above. 😊​​PreviousOnline Store / Ecommerce AppsNextMessaging AppLast modified 11mo agoCopy linkOn this pageData types recommended - Basic exampleblogPostData types recommended - Scalable exampleblogPostblogContentblogLikesOption sets recommendedblogContentTypeExample uses in your appAbout the author: Jason K









Database structure by app type - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookDatabase structure by app typeIn this section you can browse different guides on how to set up your database structure and Privacy Rules, based on what kind of app you are building.These guides are written by highly experienced member of the Bubble community who have worked on a variety of projects and have been kind enough to share their experience. Use the navigation bar on the left to navigate the different categoriesPreviousUsing AlgoliaNextMarketplace AppsLast modified 6d agoCopy link









Repeating groups - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersGroupsRepeating groupsPopupsFloating groupsGroup focusInput formsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookRepeating groupsThis section covers the container type Repeating Group, used to display lists of things such as records from the databaseVideo lessonsWe have multiple video lessons that cover different uses of Repeating Groups:​Creating your first Repeating Group​​How to create a full list Repeating Group​​Using Repeating Group layout styles​Horizontal and vertical scrolling Repeating Groups​Vertical scrolling ↑↓​Horizontal scrolling ←→​How to create a fixed Repeating Group​How to create a masonry grid layout using Repeating Groups​Youtube video​​Interactive demo​Searching for data​How to set the type of data to search for​​How to use search constraints​The Repeating Group is a container type used to show a list of things such as records from the database by repeating the content of the group one time for each entry.We explored in the earlier general section about groups that you can load data into a group and allow its child elements to reference that data. Repeating Groups work much in the same way, except that they are set up to work with a list of data rather than a single record.For example, let's say you want to display a list of users in your app and include information like their name and email address. By adding text elements to a Repeating Group showing that information, the content of the group will be duplicated for as many users are in the list. If the list contains five users, every element that you add to the Repeating Group will be repeated five times.Let's explore a few different ways in which you can use Repeating Groups to set up flexible lists of data in creative ways:List designIn the example below there are some key things to note about how Repeating Groups work:1.We have set the Type of content to User, meaning the Repeating Group will accept a list of users as its data source2.In the Data Source we are using the Do a search for command to load a list of users3.In the Repeating Group you can see that the text element inside is repeated once for each row. Each row is called a cell.4.We can reference the user in each cell by including Current Cell's X in the expression. In the example below that makes it the Current Cell's User since our Type of content is set to user. From referencing the current user, we can fetch their first name.Let's see how that would look in the live app:By referencing the Current cell's User's Name we can display information about the relevant user loaded into each cell.Card designAs we saw in the previous example, Repeating Groups can be used to set up simple lists such as a list of contacts in a CRM or products in a product inventory system.But they can also be used in powerful ways to set up lists that are designed in other ways such as product cards:In this example we're showing a Repeating Group of two cells. Inside of those cells we're combining Regular Groups and other elements to create a design that's very different from the list we created earlier.In the illustration above, the white card with the shadow is a Regular Group placed within the cell of the Repeating Group. We've styled it with a white background, rounded corners and a shadow and placed an image, a few text elements and a button to complete the design.Looking at the elements in the Bubble Design Editor we can see that each element references the parent Group's data – the Product. The parent Group (the one with the shadow) in turn references the current cell of the Repeating Group.From a database perspective, the products we are looking at would include fields for Name (text), Price (number), Image (image) and Description (text) that we can then load and display for each cell of the Repeating Group.In this example we've set up a Data Type called Product and assigned a few fields that we can then show in the Repeating Group.Masonry designWith Bubble's responsive engine, you can use Repeating Groups to set up a fully responsive masonry design.Using the Display items as a masonry grid you can show the items in the Repeating Group in a dynamic size that automatically adjusts to every screen size.Try our interactive tutorial below or scroll down for the text version.To use the masonry design, you need to complete a few steps:The masonry layout requires that you use the responsive engine.In the Property Editor for the Repeating Group, make sure you have both Set fixed number of rows and Stretch rows to fill vertical space unchecked:

Set Scroll Direction of the Repeating Group to Vertical.Check Display items as masonry gridWhen the masonry grid settings have been set you can adjust the gap between each cell in pixels by changing the Row cell gap and Column cell gap settings.​PreviousGroupsNextPopupsLast modified 21d agoCopy linkOn this pageList designCard designMasonry design









Bubble API terminology - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationThe Data APIThe Workflow APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookBubble API terminologyThis section covers the specific Bubble-related terminology concerning APIsAs we've seen in the articles so far in our Introduction to APIs series, working with APIs you come across a comprehensive terminology that was not invented by Bubble but has been around for years or decades. You can find a list of some these in our API Glossary.Bubble also introduces its own terminology to describe different parts of its API. To new users they may seem confusing and sometimes overlapping at first and this article will go in-depth in the different terms we use.Quick referenceBubble APIUmbrella term for the Data API and Workflow APIData APIThe part of the Bubble API that deals with direct requests to the databaseWorkflow APIThe part of the Bubble API that deals with requests to trigger API workflowsAPI WorkflowThe workflow itself that you create and manage in the backend editorBackend workflowUmbrella term for the different workflows available in the backend editor (API Workflow, Database Trigger, Recurring event and Custom event)What is the Bubble API?The term Bubble API describes the full suite of API capabilities that Bubble can offer to other applications. In other words, any incoming connection to your application is connecting to the Bubble API.Whenever a call reaches the Bubble API it is routed to the Workflow API or the Data API depending on the instructions in the requestYou can see the Bubble API as an umbrella term for the Data API and Workflow API. Why is the API Connector not considered a part of the Bubble API?The API Connector, which is used to establish outgoing connections to other applications is as such not a part of the Bubble API. We can illustrate the reason for this with an example moving outside of Bubble:Let's say you are initiating a connection with a Weather API to get updated weather information. That Weather API service may also use one or more APIs in order to function: for example, it could be using the Google Maps API to convert an address into map coordinates. That information, while it helps them deliver a better service, is completely irrelevant to you. As such, it's not a part of their API – it would not be presented in their API documentation and you would never know that it was involved in responding to your request.The same is true for Bubble whenever there's an incoming request: whether your app uses the API Connector to connect to other parties in order to complete a request is irrelevant to the third-party making the request. They simply want to connect to the Bubble API to get a response and what goes on behind the scene is hidden from them.What is the Data API?The Data API is the part of the Bubble API that deals with direct access to the database. This allows a third party to send commands directly to your app's database and get a response it can recognize in return.If you open up for it, this lets an external application:Search for and read records in your database Create new recordsMake changes to recordsDelete recordsOf course this all doesn't happen unrestricted: as we'll see in later sections you have full control over what information and commands they have access to.How are these database operations different from workflows?In Bubble's terminology, a workflow is the combination of an event and a set of actions that should be run as a result of that event. That techie-sounding description is what happens whenever you design something in the workflow editor:A workflow can perform any set of Bubble actions. In the example above we're making changes to a User, creating a new database Thing and then sending an email. If the Workflow API can make changes in the database, why do I need the Data API?There are several reasons for why direct access to the database makes sense to use in most cases where you are working with data:It's already set upThe Data API is set up to respond to different queries in a format that other APIs will recognize. It has built-in:Search for single records and get its dataSearch for records by criteria and get their data in a paginated formatCreate new ThingsBulk create new ThingsDelete ThingsChange ThingsAll of this is possible without spending any time setting up a single workflow. It's secureThe Data API gives you granular control over the security of your database:By requiring authentication you can determine which client is making the query, to...​authorize that client to perform certain actionsFind ThingsHide and show specific fieldsCreate ThingsModify ThingsDelete ThingsSince this is all controlled in one central place – your app's Privacy Rules – you can apply restrictions to a wide set of clients and circumstances in one central dashboard.Using Privacy Rules you have a high level of control over the actions that a client accessing your database can make.When should I use the Data API?Whenever you want to give a specific app flexible access to your database. Let's go over a few examples to say when the Data API would be the more practical and secure API method:Case 1: Customer signup to leadLet's say you have built a CRM for your company in Bubble, but your website is in a different framework such as Wordpress. Each time a potential client signs up using the contact form on your website, you would like to create a lead in your CRM.By setting up Wordpress to send an API request to the Bubble Data API, you can create a new lead in the Bubble database using the Create a Thing Data API request.Case 2: Project hours info to invoiceThis time, let's imagine you have built a project management in Bubble, but the invoices are handled by a separate accounting app. By opening up your database to that accounting app they can get an up-to-date list of work hour logs whenever they need to generate an invoice.​In short, whenever you need to read or update information in the database and all the parameters needed are available when the request is sent, the Data API is usually the better choice.What is the Workflow API?​As we explored in our last definition, the Workflow API allows external applications to trigger an API  workflow in your app by sending a request. A workflow can perform any set of actions that you need to perform.Let's re-visit our example from earlier:Anything built in the workflow editor is known simply as a workflow - hence the name Workflow APIIn contrast to the Data API, the Workflow API can perform all sorts of actions with or without involving the database. Just like with workflows on your pages, you can set up a sequence of steps, each with unique conditions to determine whether to execute or not.You can see the Workflow API in the same way as a user visiting a page in your app: they can click a button (make a request) that instructs your app to perform one or more actions that are run in sequence.If the Data API can make changes in the database, why do I need the Workflow API?While workflows can perform database operations, a database operation is not necessarily performed by a workflow. There are many reasons for choosing the Workflow API over the Data API:It can perform actions not related to the databaseAPI Workflows can run any kind of server-side actions that Bubble (including plugins) can offer, such as sending emails, resetting passwords, submitting API calls and lots more.It can perform a sequence of actionsWorkflows often consist of more than one action that can be run in sequence, and each step can if needed rely on a previous step. The Data API will simply perform the requested action and respond with a preset response whereas the Workflow API gives full flexibility as to what kind of unlimited number actions you want to take.A Workflow can also trigger other workflows in your app.It can return a customized responseThe Data API sends a response back in a format that's recognized by many other systems, but if you need to customize what the response to a call looks like, you can use the Workflow API to set it up.​When should I use the Workflow API?In short, whenever you need more flexibility in how data is manipulated, or when you need the API call to lead to executing actions that are not related to the database.Case 1: Follow-up stepsEven when making changes in the database is what you're looking for, the Workflow API can be the right choice. For instance, an app may need to:Create a new ThingCount all Things of the same typeSend an email to an address specified in the request with the total countIn this case we are working with the database, but since we also want to perform a few specific actions that rely on the first step it would make sense to set this one up in the Workflow API.It might look something like this:While you could use the Data API to Create the Thing, any subsequent action would need to be set up in an API Workflow.Case 2: Using complex conditionsIn scenarios where you rely on conditions in order to determine whether an action should be performed the Workflow API also comes in handy. Let's say your app needs to:Create a new ThingBut only if today is a Friday and a maximum of 3 Things have been created todayA condition like that would involve checking the current day of the week and count the number of Things created today – this complex condition wouldn't be possible to set up in Privacy Rules and would need an API Workflow where you could place the condition in the Only when field.If creating this new Thing relies on a condition like the above, you can move from the Data API to the Workflow API to get the desired result.We could provide a lot of different examples, but the important point is that the Data API is used only to read/manipulate data and send a preformatted response, and the Workflow API is used to trigger a workflow that can be set up to run any actions you want.Why is it sometimes called Workflow API and other times API Workflow?While these two terms are indeed closely related, they mean different things.The Workflow API is the part of the Bubble API that handles workflows.The Workflow API is the umbrella term for the part of the Bubble API that handles API Workflows.An API Workflow is the workflow itself that you set up in the backend workflow editor.As such the Workflow API consists of API Workflows, and API Workflows are part of Bubble's Workflow API.The backend workflow editorBubble's backend workflow editor is the section of the Bubble editor where you create and manage backend workflows.What's the difference between backend workflows and API workflows?Backend workflows is the umbrella term for any type of workflow you can create in the backend editor.Backend workflows offer four different kinds of events. API Workflows belong to the Workflow API while the rest are internal tools that serve other purposes. What they all have in common is that they run server-side.These are server-side workflows, meaning that they can run on the Bubble server without anyone visiting one of your app's pages. This includes, but is not limited to, API Workflows.Backend workflows is the umbrella term for the workflows you add in Bubble's backend editor. API Workflows is one of them.​ PreviousThe Bubble APINextAuthenticationLast modified 1mo agoCopy linkOn this pageQuick referenceWhat is the Bubble API?Why is the API Connector not considered a part of the Bubble API?What is the Data API?How are these database operations different from workflows?If the Workflow API can make changes in the database, why do I need the Data API?When should I use the Data API?What is the Workflow API?If the Data API can make changes in the database, why do I need the Workflow API?When should I use the Workflow API?Why is it sometimes called Workflow API and other times API Workflow?The backend workflow editorWhat's the difference between backend workflows and API workflows?









Cookies set by Bubble - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseFilesStatic dataTemporary dataUser accountsCookies set by BubbleStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookCookies set by BubbleBy default, Bubble sets a couple of cookies on end-users and visitors of your Bubble app. These are for authentication purposes and enable key functionality of the Bubble platform, such as keeping an end-user logged in, being able to tie a visitor to an app user through sign-up, etc.To be specific, here are the cookies Bubble sets by default:One to mark the user’s session IDOne with the session signature to prevent tamperingOne that tells the browser who the current user isIn addition, you may see a cookie (__cfduid) from Cloudflare (a feature which is provided by Bubble for all apps), which is described here but is being deprecated by Cloudflare starting May 2021.Note that there is a setting for your app that stops Bubble from setting cookies on new visitors; this is off by default.Also, various plugins that you choose to install in your app may also set cookies on the app's visitors or end-users. If a plugin does this, Bubble has no way to offer finer-grained control over those cookies. If this is a concern to you, we recommend you try installing the plugin and seeing what cookies are set in run-mode to determine if it's appropriate for your use case. PreviousUser accountsNext - User manualStructuring an ApplicationLast modified 1yr agoCopy link









What is a RESTful API? - Bubble Docs










Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsWhat is a RESTful API?The Bubble APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookWhat is a RESTful API?This section covers what it means that an API is RESTful and how a RESTful API call is structuredHelp us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​This section covers a fairly technical topic on how the RESTful API architecture works. You may find it useful to learn more about the underlying mechanics, but if you want to skip directly to how API calls work in Bubble, follow the links below:

Accepting incoming API Connections with the Data API and Workflow API
Setting up outgoing API requests with the API Connector and plugins.

While reading about APIs you may also find our API Glossary useful.RESTful APIs use the HTTP protocol to initiate a connection with a server and get a response.What is the HTTP protocol?Most internet users are familiar with the HTTP protocol. You see it as part of the URL of every website you visit.But what is it exactly?HTTP, or Hypertext Transfer Protocol, is a protocol: a set of rules that governs how data is shared between two systems to make sure both parties understand it. It would be difficult for two systems to communicate if they had no idea how to format the data: the HTTP protocol makes sure that they do. Whenever you open up a website, your browser is actually making an API call to the web server that hosts the page, and the server responds by sending back the needed files (such as HTML and CSS).Here's how the HTTP protocol works and the call is made:1.A client (such as your web browser) sends a request to a server. The request contains information about what kind of action the client wants to take (such as requesting a webpage or sending data to be stored in a database) and it may also contain relevant information (such as the actual data you want to store).2.The server receives the request and checks what kind of action the client wants to take and proceeds to process it. This might involve sending back a html file, looking for something in a database or running a workflow.3.The server sends a response back to the client. The response usually includes a status code that indicates whether the request was successful or not, and it may also include additional data (such as the webpage the client requested).

So HTTP ensures that a client and a server are able to communicate with each other in a standardized way. While the protocol in itself is pretty simple, it makes up the foundation of the entire web.What is a RESTful API?REST, or Representational State Transfer, is not actually a protocol, but more of a set of guidelines that define how a client and server should interact with each other. In other words, a developer can technically build an API to follow any kind of structure they want, but REST is a widely adopted style of architecting APIs that’s flexible, scalable and easy to understand.This makes it easy for different systems to talk to each other as their developers prepare it to follow the same method of communicating. The RESTful style follows a few key principles:The client-servers are completely independent of each other and only communicate using the REST API.It’s stateless: this means that the server does not store any information about the client between requests. As such, each request is completely isolated and contains all the information needed for the request to be processed.It’s often cacheable, meaning that the client uses a cached response if the user requests the same data multiple times. This speeds up the client application and lightens the load on the server. Bubble automatically caches data instead of repeating a request, unless it needs to.RESTful API’s are often described as layered since the client doesn’t necessarily have direct access to the server, but can be separated by intermediaries such as a proxy to ensure the stability and security of the serverThis may all sound very technical, but don’t worry: most of this is automatically taken care of and simply works.Bubble automatically generates an interface in your app that adheres to the RESTful principles, making sure that both incoming and outgoing connections are compatible with thousands of external systems.What a RESTful API call looks likeAs we’ve seen, an API request based on REST principles allows two software systems to communicate with each other in a way that both systems understand. Each request/response is made in complete isolation from each other, and the server receives all the information it needs to process the request in that request.But what does the call actually look like? What kind of information is being transmitted?A good thing about the RESTful architecture is that the data being transmitted in both directions is designed to be readable both by computers and humans. Each call consists of recognizable parts that each serve a specific purpose. The call is made using the HTTP protocol.The URLYou have probably heard the abbreviation URL, but you may not have thought much about what it means. In the context of APIs the abbreviation makes sense: Universal Resource Locator. In the earlier section, we talked about how a resource is a specific piece of data or functionality that can be accessed through the API. It follows that the URL is the way to find that resource. In other words, the URL points the client’s request towards the right resource on the server.In Bubble’s Data API, endpoint URLs are automatically generated for each Data Type and API workflow you choose to expose. 

https://myapp.bubbleapps.io/version-test/api/1.1/obj/datatypename
https://myapp.bubbleapps.io/version-test/api/1.1/wf/workflowname​This is the first part of a RESTful API request. This too makes sense: in order for the server to authenticate a client and check the client’s authorization to reach a specific resource, we need to know which resource they are trying to access.HTTP methodNow that we know which resource the client wants to access, we need to know what kind of action they want to perform. Remember that we discussed HTTP being a protocol: that means we have a set list of possible actions that we can ask of a server that is prepared to receive HTTP requests. The list of possible HTTP methods is longer than this, but the most common actions you’ll see are:ActionDescriptionGETRetrieve dataPOSTCreate dataPUTUpdate dataPATCHReplace dataDELETEDelete data
When your browser contacts a server such as www.bubble.io in order to load the webpage, it’s sending a GET request to the root URL of the domain. The bubble.io server has been set up to respond to such a request by responding with the necessary data to render the page in the browser, such as a HTML and CSS file.In GET requests, the URL can sometimes contain parameters, such as the constraints for a search whereas in POST/PUT/PATCH/DELETE requests parameters are usually contained within the body.The GET HTTP Method is used to retrieve some data. Here illustrated as the HTTP method would be specified in Bubble's API Connector.As you may have guessed by now, the same thing happens with the other actions: your browser sends POST, PUT and DELETE actions to the Bubble server to tell it to create, modify and delete things in your database.Now it’s starting to make sense why HTTP requests make up the foundation of the web: since every web browser and server speaks the language of HTTP actions to view, create, edit and delete data.The headerEvery API request and response contains a header. This is where you’ll find what’s called metadata or information about the data being exchanged between the API and its clients. A lot of different data points can be included in the header, but the most common ones you’ll come across working with Bubble are content–type and authorization.The Content-type is used to specify the media type of the data being transmitted so that it can be properly interpreted and processed.For example, if a client is sending data to a server in the form of a JSON object, it might include a Content-Type header with a value of ‘application/json’ to indicate that the data is in JSON format. In our earlier example of fetching the bubble.io web page, the Content-type would have a value of ‘text/html’ to indicate that the client is expecting an HTML document in response to the request.The authorization contains the information needed to authenticate the client sending the request. In the case of Bubble’s API, Bubble accepts what’s called a Bearer token. In an HTTP header, that line would look like this:

Authorization: Bearer <access-token>
Bearer simply means that the client is a bearer of the given token. The token is a kind of password that the client has to authenticate themselves, often referred to as an API key. An API call doesn’t have to include authorization: it’s only needed when the API is not public.The bodyThe body can contain additional data, such as the data being sent in a POST, PATCH or PUT request (GET requests also sometimes contain parameters in the body). After all, if you want to create or modify something in the database, you need to include the information that you want to store, such as a user’s email and name. The body is better suited than the URL to hold complex or larger volumes of data.Here's an example of what the body of a POST call might look like. In this example we're creating a rentalunit with three parameters: a name, a number and an isRented boolean:{ "unitname": "Unit A", "unitnumber": 3, "isRented": true}The information you see in this example is formatted in the JSON format.What is the JSON format?Bubble is built around the JSON format. This is a text-based format that is both easy for humans to read and write, and easy for machines to parse and generate. For example, let’s say we want to create a new user, we could include the following JSON-formatted text in the body:{ "name": "John Doe", "age": 30, "isAdmin": true,}​As you can see, JSON is easy to understand, but even so, Bubble will mostly generate it for you. But working with APIs you may find it useful to look at the body of the request and response to learn more about what is being transmitted.What other formats can be used in the body?The format of the body is not always in JSON. Remember that in our header we can specify what the format of the body should be, so it follows that it can be other formats as well. What kind of format a server expects depends on how the server is set up.In the list below are some common formats. The most widely used format is JSON and you usually don’t need to specify any other format unless the external API documentation specifically instructs you to:

Form data: is often used when submitting HTML forms. Form data is usually sent as key-value pairs, with the keys being the names of the form fields and the values being the data entered into the fields. XML (Extensible Markup Language) is a markup language that is often used to transmit structured data.Multipart form data is a format that is used to send large amounts of binary data, such as file uploads. Plain text: The body of an HTTP request can also be plain text, which is useful for transmitting simple data or messages.The full requestLet’s imagine we’re building a system for keeping track of rental units, and we need to send an API call to the app to create a new rental unit. Putting together all the parts we’ve gone over the request may look something like this:POST https://appname.bubbleapps.io/api/1.1/obj/rentalunit​Content-Type: application/jsonAuthorization: Bearer <access-token>​{  "unitname": "Unit A",  "unitnumber": 3,  "isRented": true}In this example, the URL contains the resource we want to access (rentalunit), the HTTP method is POST, the headers include Content-Type and Authorization, and the body contains the data being sent to create a new rentalunit.In the next sections we'll cover how you can set up incoming and outgoing requests with Bubble's different API tools.The Bubble APIThe API Connector
PreviousIntroduction to APIsNextThe Bubble APILast modified 1mo agoCopy linkOn this pageWhat is a RESTful API?What a RESTful API call looks likeThe URLHTTP methodThe headerThe bodyThe full request









Portfolio Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookPortfolio AppsBy TinksoVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!You’ll build an app that allows people to showcase their work and self-promote their projects. Portfolio apps consist mostly of showcasing your work but many similar apps also serve as a networking site for professionals. Most of the users use it for inspiration so almost all of the data will be publicly available.Popular examples of portfolio apps are: Dribbble, Unsplash or Behance.While we’ll focus on data architecture, this type of app is usually made of these elements:Form to create a new projectSearch and display a list of projectsProject detail pagePersonal dashboard listing the projects you have created, liked or bookmarkedData types recommendedA Project, which is the main data type, is created by a User. A user is able to create as many projects as she/he wants, each of them linked to that creator. 
The challenge of this kind of app is to show visitors the projects that match their search, so the filter fields related to the projects are crucial. To keep consistency you might want to prohibit adding Categories, while you allow the creator of a project to create as many Tags as she/he wishes. These Tags will become new filters available to everyone, also available when creating future projects. A logged in user will be able to like a project, which will create a new Like record.Likewise, it will be possible to build a library of projects using the Bookmark data type.UserBuilt-in Bubble app data type. The user can create a Project, bookmark a Project, and like Projects.Suggested fields on this typeFirst name - textLast name - textEmail - textProfile picture - imageCompany name - textCompany logo - imageLocation - geographical addressWebsite - textBio - textSlug - text: using Bubble’s built-in feature. This helps create some clean shareable profile page links.Privacy rules for this data typeSince the purpose of the app is to show a user’s work and allow them be contacted, all users' fields are public and without privacy rules. Note that this also means your users’ emails are public too - you may want to make it known to users that this is the case, or later tweak your app to make emails private but still allow the outreach functionality.ProjectProject is where all the information for a project is stored. You can add as many fields as you want to further filter the projects on the “search for inspirations” page.Suggested fields on this typeOwner - User: is the creator of this project. We don’t use in-built Bubble’s “creator” field as you may want to transfer the project to another user - Built-in Bubble fields don't allow you to edit them.Title - textImages - list of imagesTags - list of Tags: this example assumes you want to allow your users to create and grow the number of tags and so we use a custom data type for these, as highlighted below.Made with - option set: on the contrary, use option sets if you do not want to let users modify the list in order to keep the choices ordered. Option sets can be faster when loading pages.Download with - option setCategory - option setMain color - textDescription - textNumber of views - number: this field allows you to display how many times this page has been seen. Run a workflow each time the page is opened that increments this field: Current page Project’s Number of views + 1.Slug - text: using Bubble’s inbuilt feature. This helps create some clean shareable profile page links.Privacy rules for this data typeFor the same reasons as for the previous data type, Project has no privacy rules.TagAfter being created, users shouldn’t be able to delete this data as long as at least 1 project contains this record.Suggested fields on this typeName - textPrivacy rules for this data typePublic data type.LikeThis data type allows users to like projects. By creating a specific data type for it, it allows you to display the list or the count easily from either a project’s or a user’s point of view, e.g. how many users like a project or how many projects a user has liked.Suggested fields on this typeCreator - User - Bubble built-in field that automatically captures the Creator of a data type. You don’t have to do anything in order to set this field when creating it. It’s fine to use the built-in field here because we aren’t planning to let users ‘transfer’ their like to another user.Project - Project - The project being liked. Use this field as a constraint to count the number of likes associated with a specific project.Privacy rules for this data typePublic data type.BookmarkSimilar to a Like, users can have their own list of bookmarked projects.Suggested fields on this typeOwner - User - Bubble built-in field that automatically captures the Creator of a data type. You don’t have to do anything in order to set this field when creating it. Use that field as a constraint when wanting to display to this user his own bookmarked projects.Project - ProjectPrivacy rules for this data typeYou can choose either to make it public so that you can display users' collections, or to make it private so that only the user who this list belongs to can see it.(Apply the following privacy rules if you want to make it private)
        - This Bookmark’s Owner is Current User:☑View all fields☑Find this in searches☑View attached filesOption sets recommendedAll these options have only one purpose: to be able to filter the projects on the search for inspirations page. Create as many set options as you want then add a field with this set option in the PROJECT data type.For instance, these are inspired by Dribbble’s list of options in its search capabilities.Made withFigmaSketchUnsplashAdobe XDDownload withFigmaSketchUnspashAdobe XDCategoryAnimationIllustrationBrandingWeb DesignMobileExample uses in your appShow and filter projects: Do a search for Projects and add as many constraints as you need. Make sure to tick the box “Ignore empty constraints” in order to display items even when inputs are empty otherwise the list will be empty. Sort the list by descending Created date (Bubble in-built field) to show newest projects on top.​​Display each project’s number of likes.​​Display Current user’s bookmarked projects. If you choose to make bookmarks private with privacy rules, you don't even need to add a constraint.​​About TinksoTinkso (tinkso.com) is a pioneer and leader in professional no-code and low-code product development. Our unique approach allows our clients to run successful businesses, raise millions in funding and scale professionally. Our suite of tools consists of openBuild Framework, openBuild UI Builder and a range of other tools, turns makers, freelancers and businesses in professional Bubble app builders.PreviousApplicant Tracking System (ATS) AppsNextGallery AppsLast modified 10mo agoCopy linkOn this pageData types recommendedUserProjectTagLikeBookmarkOption sets recommendedMade withDownload withCategoryExample uses in your appAbout Tinkso









User accounts - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseFilesStatic dataTemporary dataUser accountsCookies set by BubbleStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookUser accountsThis article covers how you create and manage Users in your appIn this article, we're going to explore how Bubble's handles the process of setting up and managing user accounts.Technically, users are just another data type stored in your app's database, but there are several reasons why Bubble treats the user type a bit differently:The built-in user authentication system provides robust security features to safeguard user data, such as password hashing, salting and encryptionProcesses like signing up, logging in and remembering a user between sessions are automatedFeatures such as confirming email addresses, securely resetting passwords, 2-factor authentication, magic login links and generating/assigning temporary passwords are all securely handledBubble sets up temporary users whenever non-logged in users visit your site. Data stored on that user is automatically transferred when the user completes their sign-up (this is useful to store a a new users shopping cart for example)Privacy Rules treat users differently than other data types, allowing you to control access to data based on fields stored on each individual user. This lets you manage user permissions and control access to sensitive data in a granular wayIn short, managing user accounts demands strict security to ensure the protection of users' sensitive information, and the functionality of user accounts remains fairly uniform across different platforms. This is why Bubble takes care of this aspect of your application's development, saving you development time while ensuring that your app is up-to-date with the latest security standards.What is a user account?Most of us have dozens or even hundreds of user accounts in our lives: we're logged into our phones, our email accounts, social media, forums and even newspapers. Of course, we all know what they are, so let's change perspective a bit: why does an app need user accounts?The first answer to that question is that not all apps do: it's perfectly possible to create a highly useful app where the user never creates an account at all, even if you allow users to add and change things in the database. So let's first note that down: your app can have, users or registered users or both. This article focuses on registered users – that is, users that have signed up with their email and a password or a through a single sign-on service.Registering users serves many purposes:Keeping data private: in many contexts a user should only have access to the data they themselves own or that of a select group of other usersSaving settings: many apps allow users to save preferences and profile details that are still there the next time they use the appControlling Access: many apps allow only registered users to access its pagesAssigning roles and permissions: having registered users allows you to identify each one and assign them roles that control what they have permission to accessPersonalization: some applications, such as social media and eCommerce stores, offer a stream of personalized content for each userTeaming up: some apps will need to team people together so that they can share data and collaborate. To control who has access to what you'll need to know who they arePayment processing: to process payments and maintain an order and payment history you will usually want to attach it to a permanent userCommunication: by knowing who your users are, you can communicate with them through the app or external channels like emailAs you can see, there are many reasons for why you would want a user to sign up, and it's not only related to security and privacy. Just like any other data type, you can add as many different fields as you need, but the user type also comes with a few extra fields to handle the account.These fields can't be changed or deleted and are the same across all Bubble applications.Built-in fieldsIn addition to the four built-in fields on all data types, the user also comes with three additional fields:EmailPassword (invisible)Email confirmed (invisible)These fields have the following properties:EmailThe email field can never be empty on a registered user and needs to be formatted as a valid email address. Every user in your app needs to have a unique email address.Password (invisible)The password field is different from all other fields in that it is invisible even to you as the app developer. The password is kept secure in accordance with industry-standard practices.How passwords are kept safeBubble ensures the safety of user passwords through the use of one-way hashing and salting. With this method, passwords are converted into a hash that cannot be reversed back to its original form, even if someone gains access to the Bubble database.The password is checked by taking the password input provided by the user upon login, hashing it, and comparing it to the hashed password stored in the database.It's important to note that Bubble only focuses on the match between the two hashes, without actually knowing what the original password is. As such, even we do not have access to the user's original password.This method of one-way hashing and salting is widely regarded as the best practice for password storageEmail confirmed (invisible)The email confirmed is another invisible field. It holds a yes/no value that reflects whether the relevant user has confirmed their email using the Send confirmation email action. You cannot make changes to this field directly – the user must perform the action described above to update it.The email confirmed field is invisible in the database editor but you can access its value in an expression as exemplified above.User actionsThis article explores common actions related to user accounts, but doesn't provide details on every available user action. To learn more about what actions and operators are available on users, you can check out the resources below:

Reference: List of user account actions
Reference: List of user operators​Signing upWhile the technical process of signing up is handled by Bubble, the design and user experience is entirely up to you. Bubble handles the security and the communication with the database, but the user experience is up to you.The sign up actionWhen you want to sign a user up, you need that user to provide two strings of text: a valid email address that's unique in your app and a password.In this example we are signing the user up and then sending them to a page called dashboard.The email and password will usually be provided through input elements. In the example above we have two input elements where the new user types in their password: one to set the password and the second to confirm that they didn't misspell it. Users in your app must have a unique email address.The information is sent to Bubble's server in an encrypted state, and the password is hashed and salted – a security best practice that means that no one can read it – not even the Bubble team.Keep in mind that input elements can be set up to format their input in a certain way (such as replacing the characters in a password input field with asterisks) and to expect a certain format (such as a valid email address). We recommend using both of these features when setting up both signup and login forms.

Article section: Input elements​As soon as this action has been triggered the account will be created and the user is logged in from that point on. A logged-in session lasts for 12 months or until the user logs out or deletes the cookies from their browser.Logging inThe log in action is very similar to the sign up action in that it requires two pieces of input: the email and the password. Bubble then sends this data in an encrypted state to the server to check the credentials. If they are both correct the user is logged in.Signing up and logging in with an SSA providerAn SSA provider is a third-party service that you can use to let users log in. For example, OAuth - signing up and logging in with a third-party serviceThe most common way to authenticate users is to prompt them to enter a password or an email. However, sometimes, you will be using some external such as Facebook, LinkedIn or Gmail to authenticate users using their credentials from that service.This has a few advantages to consider:It lets users authenticate faster, and they don't need to remember another password. The signup process is usually done with a few quick clicks (depending on the external service and whether the user is already logged in)This will sometimes let you fetch some data on behalf of the users, such as their email, profile pictures and social media postsWe'll use Facebook as an example below (in other words, your app offers a button 'Login with Facebook'.).Signing up with FacebookThe guide below describes how Facebook login works overall. To read more about the different settings on the Facebook login plugin, check out the resources below.

Reference: Facebook​When you set up such a flow in Bubble, you will need to define the level of authorization you want from your users for your app to function. By default, most services only expose the public profile and the email when users sign up on a third party application using their credentials, but you can ask for more permissions (for instance, post on their wall).It's best practice both from a user and security perspective to only ask for permissions if you need them, and it's worth keeping in mind that asking for a long list of permissions can lead to fewer users signing up.When a user signs up with a social network (Facebook) in Bubble, a new user is created in the database, similarly to a traditional sign up flow with email and password.The main difference is that the way to login for the user, once logged out, will not be by entering their password (since they didn't define one), but by logging in with Facebook. If a user is logged in with Facebook and your app uses Facebook login in the same browser, the user is automatically logged in as that Facebook user.​Temporary usersThe moment you sign a user up is when you assign them an email address and permanent storage in the database. In many cases (but not always) this is also when a user provides a password to use to access the account later.From a data perspective, Bubble actually keeps track of who the user is at an earlier point (with one exception): whenever a new user visits your application, Bubble saves a cookie in their browser and creates a temporary user.This Bubble feature means that as long as your app allows for cookies, the current user data source will never return an empty value. If you want to check whether a user is actually signed in, you can use the current user is logged in operator.This allows you to "remember" who the user is during the session, and lets you set up application logic that rely on accessing data stored on the current user.This is useful in different scenarios:Saving preferences and settingsStoring temporary data like a shopping cartPersonalizing the user experienceWhen the sign-up process is completed, Bubble transfers the temporary data over to the newly created user automatically.Data stored on a temporary user is transferred automatically when the user signs up, but not when they log in.​User account FAQHow can I help my users log in if I can't see their password?It's widely regarded as a basic security best practice that no one, not even the developer of an app, should have access to a user's password. The best way to help a user log in if they have lost their password is to help them reset the password or to generate a temporary one.Can I log users out from sessions across multiple devices?Yes, you can use the Log out other user's sessions action for that. Note that this action logs the user out from all devices except the one they are running the action from. If you want that session to log out as well you'll need to use the Log the user out action.How long does the user stay logged in?It depends on the settings you set in the Log the user in action:​Temporary users (those who haven't signed up but have a cookie) will remain active on the same device for 72 hoursIf the Keep the user logged in checkbox is unchecked, the user will be logged out after 24 hoursIf the box is checked, the user will be logged out after 12 monthsThere are other instances where the user will be logged out:If the Log the user out action is triggeredIf the Log out other user's sessions is triggered on another deviceIf the user clears their browser's cookiesIs there a difference between using the Make changes to action and setting the data source to current user and using the Make changes to current user action?No, there's no difference between the two: they will both let you change any custom field on the user.Why can't I select the user's email field in a Make changes to the current user action?The password field is special in that it's considered a part of the user's credentials. That's why we have a dedicated action for updating it called Update the user's credentials. For security reasons, this action requires that the user re-enter their password (meaning that you need to set up an input element for it).PreviousURL parametersNextCookies set by BubbleLast modified 4d agoCopy linkOn this pageWhat is a user account?Built-in fieldsUser actionsSigning upLogging inSigning up and logging in with an SSA providerOAuth - signing up and logging in with a third-party serviceSigning up with FacebookTemporary usersUser account FAQ









How to authenticate - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationHow to authenticateNo authenticationAs a UserAs an adminThe Data APIThe Workflow APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookHow to authenticateThis section covers what kind of authentication method the Bubble API accepts.Help us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​This section covers what kind of authentication method you can use when you are making an incoming request to to your Bubble application from an external app.
If you are looking for how to authenticate outgoing requests sent via the API Connector, check out this article.Bubble's authentication methodThere are many different ways to authenticate an API request. Bubble uses the method known as  bearer token.What is a bearer token?The bearer token is a string that identifies who the client is. It serves as both username and password and is included in the header of the API request. Tokens are generated by Bubble by creating an admin API key or by signing a User in through an API call. Since every RESTful API request is made independently of any previous or later requests, the token needs to be included with every API request coming into your app that requires authentication.Authenticate with a bearer token in PostmanThe bearer token needs to be included in the Authorization header of an HTTP request, in the following format:Authorization: Bearer <token>In the example above, <token> represents the actual token string. Do not include "<" and ">" in the final string.In an application like Postman, the authorization should look like this:The top row in the request header carries the bearer token. It is greyed out because it has been added in the Authorization tab (left of the Headers tab) and Postman automatically adds it to the header.When included like in the above illustration, Bubble will recognize the token and respond to the call according to the privileges (if any) of the User that the token represents.How secure are API bearer tokens?Bearer tokens are considered more secure than sending a username and password in each request because they can be easily revoked, have a limited lifetime and can be connected to one of your app's Users which allows you to limit the scope of their database and workflow access by use of Privacy Rules and Conditions.Additionally, bearer tokens can be easily revoked if the user's device is lost or stolen, whereas revoking a password would require the user to reset it on all devices. Additionally, tokens are sent in the headers, which are less prone to being intercepted than cookies or URL parameters.

Tokens generated by Bubble are considered cryptographically secure, meaning they cannot be easily reconstructed and have a length of 32 bytes.

Article: Revoking a User token
Article: Revoking an admin token​PreviousAuthenticationNextNo authenticationLast modified 1mo agoCopy linkOn this pageBubble's authentication methodWhat is a bearer token?Authenticate with a bearer token in Postman









Finding data - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookFinding dataThis section covers how to search for data using constraintsThis section takes a long-form look at how searches in Bubble work.

To see the the more concise and technical complete list of settings, constraints and operators, you can check out our core reference entry on searches.Having added and updated data in our database, we'll also need a way search for that data and display it around our app. Finding dataWhenever you need to find some data in the database, you can perform a search using the Do a search for data source. This lets you set up a dynamic query to the database with specific constraints, and Bubble returns all things of that data type that match the constraints. You can only search for one data type at a time, such as Users.Let's say you want to search for all users who have the name John. We can set up the Do a search for function like the example below.First, we set the Type of content to User and in the Data source dropdown we pick Do a search for:Then we set up a constraint which instructs Bubble to only return users that have the name John. The result will always be a list, even if it contains just one thing. In this example we are searching for users named John.This is the basic way that database queries work: we tell Bubble what kind of data to search for, and then provide one or more constraints that each thing in the returned list needs to match. We can use this logic to find data in all sorts of scenarios:To display the results on a screenAs part of a workflow (for example if we want to make changes to one or more things)As part of a conditional expression​In the example above, we used a static value as a constraint: the name John. We can also set this up as a dynamic value. For example, we could change the condition to ask for the value of an input field instead. This would let your users type in a name and search the database for users that match:In this example we are searching for a dynamic value from an input field called Input search by name. By referring to that value as a search, we can let our users specify what to search for. Searches performed with the Do a search for data source are synchronised with the database in real-time. This means that any changes happening in the database, even if made by another user, will be immediately visible in your app.Sorting the resultsSometimes you'll want to sort the result in a specific way, such as showing users in alphabetical order or tasks by their priority or deadline. This can be used to display the records in a list, or it can be used to find a specific record. For example, if you want to load the last user that was created in your database, you can sort the list by creation date and isolate the newest user with the first item or last item operator (depending on the sorting order).You can set the sort order when you perform a search.In this screenshot we are sorting users by their name.In some cases you will be referring to a list that's not loaded from a search, or where for some reason you need to apply the sorting after another operator in the expression. In that case you can use the sorted operator.In this example we are using another repeating group as the data source and then applying sorting on that list.The difference between a list and a single thingBubble has two ways of handling database records: as single items or as a list. It's important to understand this distinction, because the two are treated differently. For example, when you load data into container elements, a group element will expect a single thing, while a repeating group will expect a list of things.Whenever you perform a search, the result will be a list – even if it only returns one thing (meaning it's a list with a count of one, but still a list). Loading a single record from a listWhenever you set up a data source that returns a list, such as Do a search for, Bubble elements and expression operators that expect a single item will return an error in the issue tracker. In cases like this, you will need to instruct Bubble to load one of the records in the list. You do this by adding another operator in the data source expression:First item will return the first item in the list. What item that will be depends on how the list is sorted. The default sorting is by creation date.Last item will return the last item in the list. What item that will be depends on how the list is sorted. The default sorting is by creation date.Random item will return a pseudorandom item from the list.Item #: will return a single item as specified by its index number in the list. This operator requires you to also define a number, such as Item 5.By combining search constraints with the first item operator you can often reach the exact thing you were looking for. For example, you could search for users and use the Email field as a constraint. Since emails are unique, you can be sure to find the right record by providing the email address of an existing user. If you then apply the first item to the list of results, you will have turned the list into a single thing.Turning a single record into a listSometimes you'll need to go the other way and turn a single item into a list, even if that list still only contains the one record. To do this, use the Converted to list operator.In this example we are taking the User loaded into a group called Group User and turning it into a list. The list will still contain just one record, but Bubble will treat it as a last. In the example this makes it a valid data source for a repeating group.Other data sourcesSearching for data in the database with Do a search for is one way of finding data.Data sourceDescriptionReturnsDo a search forSearches the database using constraints.A list of thingsCurrent userThe user currently using the appOne thingCurrent page thingThe database record currently loaded onto the page using the Go to page action.One thingGet data from page URLGetting a thing from a URL parameter that contains a unique ID.One thingThings's XGetting a thing from a field saved on another thing, such as Current User's CompanyA list or a single item, depending on the field​PreviousCreating, saving and deleting dataNextDisplaying dataLast modified 4d agoCopy linkOn this pageFinding dataSorting the resultsThe difference between a list and a single thingLoading a single record from a listTurning a single record into a listOther data sources









Special Plugins - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsWhat Plugins Can DoInstalling & Using PluginsSpecial PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookSpecial PluginsA few plugins have been developed by the Bubble Development Team to let you add connections with external services (or private backends).The API ConnectorIf you want to learn more about the API Connector you can check out our dedicated section on it here.The API Connector is a special plugin built by Bubble's development team that lets you connect to any service that exposes a JSON-based, RESTful web API. You can use this to add API calls to fetch data from an external service, or post data to trigger some actions on the service's end.Note that as soon as a connection is added to your app through the API connector, it can be converted into a plugin by right clicking on the API connector and creating a plugin. Please convert public APIs into plugins as much as you can as it's a way to share functionality with other Bubblers.Note: If an API call takes longer than 30 seconds to complete, Bubble will automatically retry this call. This is relevant if you're handling actions like sending emails where it may take more than 30 seconds to receive confirmation back from the service that the action has been completed. This may result in additional emails being sent if confirmation has not been processed.The Bubble App ConnectorThe App Connector lets you connect two Bubble apps and access the API and the data of one app in another. Doing so, you can sign up with OAuth with another app, run workflows as the user of the second app, etc.To use the App Connector, you'll need to set up an API with the first app A, before using it in app B. If you want to enable your users to sign up with app A in app B, you'll need to define some OAuth credentials in app A in the Settings tab. Once this is done, you can install the Bubble App Connector in app B and add the app A.Once you've added an app, Bubble will automatically fetch the different public calls and public workflows that app A exposes. You can install the different calls and you'll be able to use them either as a data source in 'Get data from API' or as actions in your workflows.You have a few options for authentication for running the calls. Authentication is important because the identity of the user that makes the call will have consequences on the data that can be seen given the privacy roles in app A. By default, you can either pick an API key, or provide no authentication (and the calls will execute as defined in app A). If you enter a client ID and a Client secret, you'll also be able to let your users authenticate with OAuth with app A in app B, and OAuth will be a third option for authentication.1.No authentication: the calls will be run without an API key, and the calls will be run as a logged out user2.API Key: the calls are made as an admin user of app A, with all data visibility rights3.OAuth: the calls will be made on behalf of the user that logged in with app A in app B, and the privacy roles will apply to him/her as the current user.Note that once you've set up the App Connector in B to A correctly, in B you'll be able to offer end-users the ability to log in with their account in A. This utilizes the "Signup/login with a social network" workflow action (similar to a "Login with Google" feature).The SQL Database ConnectorThe Database Connector allows you to connect to databases and run SQL queries from within Bubble. These queries can be triggered as actions, datasources (they show up as External APIs) or both. Bubble supports connecting to PostGres, MySQL and Microsoft SQL.To use this plugin, you first should define the connection string that represents the database you want to connect to. A connection should look like:mssql://username:[email protected]:PORT/db_nameIf you need the connection to be encrypted (for instance with Microsoft Azure), you should add ?encrypt=true to the connection.Once you create a connection string and validate it, you can create queries that use it. Any SQL statement is allowed, but for SELECT statements you need to add LIMIT N at the end, where N <= 100. Once you tested and saved your query, you can now use it as an action, datasource or both, depending on how you configured it. Please note that a SELECT query returns a list of things.PreviousInstalling & Using PluginsNext - User manualAPIs: Connect to other appsLast modified 1mo agoCopy linkOn this pageThe API ConnectorThe Bubble App ConnectorThe SQL Database Connector









Using Algolia - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookUsing AlgoliaThis section covers how to use the third-party search provider Algolia with BubbleBubble has an integration with Algolia, a third-party search-as-a-service provider. Bubble apps using this integration have their data sent to Algolia for indexing, and use Algolia as a data source to power elements like repeating groups and searchboxes. Benefits of AlgoliaWhat are the benefits of using Algolia? A noticeable one for your users is speed - Algolia searches are fast, and noticeably faster than Bubble native searches at scale. A second one is customizability - Algolia allows you to tweak the search algorithm, among other parameters as well. Note that unlike a plugin which must be installed, this integration is built natively into the editor, much like Bubble’s integrations with Google Maps and Google Geocode.Who should consider thisBubble does have native search capabilities, but Algolia provides a more performant and customizable search experience at scale. Users of this integration will also need their own Algolia plan (though Algolia also offers a free tier). In other words, Algolia is more suitable for Bubble apps at a large scale that rely on search as an important part of their user experience; thus, this feature is only available for Bubble apps on the Professional plan and above.SetupTo start off, you must have your own Algolia account and copy your Algolia keys into your app’s Settings. When creating an Algolia account, you do not have to create indices yourself. Instead, right after signing up, you should visit the "API Keys" section of the dashboard. You will see a screen like this:In your Bubble app, in Settings > General in the "General services API Keys" section, there is a checkbox for "Enable searching with Algolia" (if you do not see this checkbox, your app does not have this feature, chances are because it is not in the right tier). Once you check the box, you will see input fields for the application ID and two keys from the Algolia dashboard. Once you've copied and pasted those values in, the Bubble app will confirm that it thinks the keys are of the correct format (note the green text below):The other parts of the Algolia feature mentioned below will not appear until valid keys and an application ID have been supplied in Settings.IndexingAfter keys have been added, in the Privacy tab for every data type, you’ll see the option to index that type with Algolia.If a data type is indexed to Algolia, Bubble will send all public fields to Algolia, i.e. the fields that are visible via search in the “Everyone else (default permissions)” Privacy rule. Bubble will automatically create the necessary indexes in Algolia for you - you should not rename those indexes.In addition, make sure that the data type being indexed has "Find this in searches" under the "Everyone else" permission checked.After you toggle a data type to be indexed by Algolia (checkbox on the right), you will probably want to trigger an indexing of all the things of that type. You can do so in the modal accessed at the top of the Privacy page for any indexed type.You can choose to trigger a full indexing of all indexed types or just one type, and you can choose to do this for your Development database ("test"), Live database, or both. Note that doing a full indexing could take noticeable capacity over a period of time (depending on how many things there are), so the recommendation is to trigger a full indexing once after adjusting all your data types’ settings, and to do it at non-peak hours. Behind-the-scenes, the full indexing runs the same process as a large CSV data export, so you can actually see the status of these tasks in App Data > Export.When things of an indexed data type are changed, added, or deleted, Bubble will automatically try to update the corresponding Algolia index for you. This should be generally reliable, but in the event that you find Algolia “out of sync” with your Bubble database, you can always trigger a full re-indexing in the same way as above.During set-up, after you run the first indexing, we recommend you check the Algolia portal to make sure that you're seeing the records you expect in the newly created indices.SearchingOnce you’ve activated Algolia for your app, you will see a new data source, “Search with Algolia”. For example, this can be the data source for a repeating group, or the “Choices style” for a searchbox. The Algolia data source also lets you choose to query over a specific field, or all fields of a data type.You cannot change the sort order of an Algolia result in Bubble because that is controlled in Algolia. After all, we are relying on their search expertise, manifested in their algorithm! You are able to customize the Algolia search algorithm for a particular index via the Algolia dashboard. For example, you can change the weights of different fields in the search algorithm. Note: one limitation of the current integration is that you should not set two fields as “equal weight” in the Algolia interface.Note that the default setting in Algolia is to return 20 entries in the first 'page' of the search. At this time there's no way for your Bubble app to access other pages of results, but you can change the number of results in the first page by going to the Algolia portal > the appropriate index > Configuration > Pagination.Known limitationsThis is the v1 of the Algolia feature. It has these known limitations:This only supports text and number fields. For all other field types (including fields which are other custom data types), Bubble will make a "best effort" attempt to send those fields to Algolia, but it will likely not be sensible. To restate explicitly, the Algolia integration is not meant for other fields like dates, geographic addresses, ranges, Users, or fields that are other custom data types.This only supports public data fields, so it is not good in situations where data privacy is very important, e.g. when you want to prevent one user from seeing another user's data. For example, it is good if you have a short-term rental marketplace app where all users can see any rental on the app. It is not good for an e-commerce experience where you have many vendors and you want to build a search for only one vendor's products.Algolia has limits on the size of certain fields. If Bubble detects that a given Thing has a field that is too long (text fields are the most likely culprit), it will automatically clip them for you so that it can be sent to Algolia. This can be disabled in Settings, but should only be done so by advanced users who are accounting for this in Algolia's settings.In Algolia's settings, you may see an option to rank two fields as "equal weight" - please do not do this, as it will break the Bubble integration.Bubble will automatically create the indices in Algolia - please do not change the names of these indices, though you are free to adjust other settings as desired.​
​PreviousWorking with Location DataNextDatabase structure by app typeLast modified 4d agoCopy linkOn this pageBenefits of AlgoliaWho should consider thisSetupIndexingSearchingKnown limitations









As a User - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationHow to authenticateNo authenticationAs a UserAs an adminThe Data APIThe Workflow APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookAs a UserThis section covers how to authenticate an API client as a user logged in to your application, allowing you to protect your data with Privacy RulesHelp us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​What is User authentication?User authentication means that the client making the request is authenticating as a User, which means that we can determine what they are authorized to access using Privacy Rules, just like our regular app Users.This is the method that offers the highest level of security and flexibility since it allows you to provide different Privacy Rules based on who the client is.How to set up User authenticationIn principle, logging a client in as a User happens in the same way that you log in a regular User in your app, except that the action needs to happens in an API Workflow. When you log in a User, Bubble can return a token that can be used to authenticate in subsequent calls.1.Create an API Workflow with a fitting name such as generate-api-token2.Use the Log the User in action or Sign the user up action to log in or create a new User. For the Log the User in action you will need to provide an email and a password.3.If successful, Bubble will automatically respond with a token that can be used as a Bearer token in subsequent call.If you log a user in with an action in an API Workflow, Bubble will respond with a token that can be used to authenticate the client in subsequent requests. In the example above we are accepting the email and password as parameters in the API Workflow.How long is the token valid?The token has to different validities depending on your settings.Without 2-factor authenticationIf you set Keep the user logged in to "yes", the token has a validity of 12 monthsIf you set Keep the user logged in to "no", the token has a validity of 24 hoursWith 2-factor authenticationIf you set Keep the user logged in to "yes", the token has a validity of 1 monthIf you set Keep the user logged in to "no", the token has a validity of 24 hoursRevoking a tokenThere are two ways to revoke a token after it has been generated:You can call a Log the User out action from the client that uses the relevant tokenYou can use the Log out other user's sessions to sign a User out from every session except for the one they are running the workflow fromRestricting a client's privilegesThere are two ways to restrict the access level and privileges of a client that's using a user token:Privacy Rules: your main level of protection is setting up privacy rules that match the User that is signed in and control their access to find, read, create, edit and delete data through the API. Read our full article on that here.Conditions: on API Workflows you can set up Conditions that restrict the triggering of the workflow based on fields saved on the User. This will apply to clients who are sending a request with a user authentication token.​PreviousNo authenticationNextAs an adminLast modified 1mo agoCopy linkOn this pageWhat is User authentication?How to set up User authenticationHow long is the token valid?Without 2-factor authenticationWith 2-factor authenticationRevoking a tokenRestricting a client's privileges









Styles - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingColor variablesFont variablesStylesCustom FontsResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookStylesThis section covers Styles, which is Bubble's tool for managing centralized stylesheets that can be applied to elements across your appBubble lets you set up overarching Styles for elements within your app to streamline the design process and promote consistency. By modifying a single style, you can effortlessly restyle all related elements, making it easy to set up and manage a cohesive look and feel in your app.Each Style is connected to a specific element type and includes the following information (that may vary depending on the element type):Background color or imageBorderShadowFontTransitionsApart from making the design process more efficient, Styles also improves your app's  performance by storing styling settings in one central place as opposed to saving it on each separate element.Styles can be combined with Color variables and Font variables to set up a design system that's highly efficient and flexible.Defining StylesThe Styles tab is where you edit the different styles that your app has. Editing styles is very similar to editing elements, you use the Property Editor to change the styling properties.You can build some conditions on styles, but only for basic states, that is to say conditions that are about built-in, simple interactions with the element (hovered, focused, etc.) For instance, conditions using data, or properties on the user, will not qualify as basic. You can define as many styles as you want. Styles are applied to one type of element, for instance Buttons, but you can have more than one style for Button. Try to name them in a way is easy to read, as you'll have to pick the style that you need for each button. You can also specify which style should be used by default when you insert a new element in this tab.You can create a from the Style tab by clicking on 'New Style', or from an element itself. When you do so from an element, the current properties of the element will be used as a base for the newly created style. This is particularly useful when you find yourself using the same design for a few elements, but haven't thought about creating a style yet. Please note that when creating your own Styles, specialized labels such as H1 for headers cannot be used.

Applying & detaching stylesWhen you apply a style to an element, its current properties that are included in the style will be deleted. On the other hand, when you detach a style from an element, the original properties of the style will be copied to the element. So effectively, when you detach a style from a button, the button's appearance won't change at first, so that you can modify the appearance. You can always undo such changes.Detaching a style does not change or deleted the style, it only detaches it from that specific element.To detach a style from an element, click the Detach style link in the Property Editor.Conflicts between conditionsYou can overwrite a condition that is included in a style at the element level; between a style's condition and an element's condition, if the same property is modified, the condition at the element level will win.Using ThemesBubble offers some themes to help you find a visual identity for your app. As a new apps comes with a set of predefined styles, applying a theme to your app will overwrite these styles with different colors, angles, etc. Bubble already has themes inspired by various popular design libraries such as Bootstrap and Material Design. Note that when you apply a theme, the styles you have added to your app will not be modified.Using Style VariablesStyle variables are used to store specific colors and fonts that can then be applied to elements and styles throughout your app. This ensures that your use of fonts and colors remains consistent and is easy to switch out later if needed: for example, replacing a color variable will update all styles that use this variable instantly.You can read more about color variables and font variables in our dedicated articles.PreviousFont variablesNextCustom FontsLast modified 1h agoCopy linkOn this pageDefining StylesApplying & detaching stylesConflicts between conditionsUsing ThemesUsing Style Variables









Migrating Legacy Pages - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingResponsive designBuilding responsive pagesLegacy articlesThe Basics (Legacy)Building Responsive Pages (Legacy)Migrating Legacy PagesTips When Designing (Legacy)TemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookMigrating Legacy PagesOverviewBubble's Responsive Engine, the framework for how responsive web pages are built and rendered, has been re-designed from the ground up to provide a faster and more powerful way to build responsive layouts in Bubble. For those who may be more technical, the new engine is based on CSS and CSS flexbox properties. Regardless of your understanding of the underlying technologies though, the new responsive engine will run your app pages faster and give you more control over the behavior of your page as the screen or content re-sizes.Because Bubble's Responsive Engine has been completely re-built, there are a number of new controls that your existing pages do not yet have access to. We'll walk through how to migrate any of your existing pages over to the new responsive engine so you can take advantage of this new, more powerful way to build.Your page is on the Legacy rendering engine if it has a blue upgrade icon next to it. If it doesn't, feel free to skip this section!​​Upgrading your PageUpgrading to the new Responsive Engine happens at the page level. To upgrade a particular, navigate to the desired page (new or existing) and click the “Upgrade responsive engine” button in the Responsive sub tab in the Design Tab. You now have access to the new responsive controls on this page!​​Pages and reusable elements not yet upgraded will carry a blue upgrade icon in the page menu.​​Converting an existing pageIf you are upgrading an existing page, your old settings will be converted to the new system automatically. Depending on the migration option you choose, there will likely be some follow up work to make sure your page behaves as expected. You might even choose to re-build certain sections as the new controls allow for more powerful and cleaner ways to build your pages. In addition, the undo history will be reset when the page is upgraded.We strongly recommend reviewing your upgraded page before deploying to Live to ensure the behavior matches your expectations. Some new controls are incompatible with the old rendering engine so not everything on your page will map 1:1 once it has been upgraded.Warning: There is no way to downgrade a page once on the new Responsive Engine. There is, however, the option to create a copy of the old page in case you would like to return to that version at a later time. Selecting this option will create a copy of the page before the upgrade that can be found in your page menu. Keep in mind that this copy will not contain any changes you made to the UI after upgrading the page. Confirmation modal when converting an existing pageConverted page layoutThe migration algorithm tries its best to match the behavior of your page to the new responsive engine settings. Converted pages will generally have the following layout: Page is set to a column container layout type and will contain many groups set to a row container layout type. In turn, these row container layout types will contain the page content. This is because a column container organizes its content vertically and will expand or shrink based on its content. The row containers organize their content horizontally and allow the content to wrap or collapse as the screen resizes. In concert, a "column of rows" layout best matches the responsive behavior of legacy pages while now giving you more explicit control.You may also choose to migrate your page "as-is." This setting copies your page over exactly as it appears in your editor, but everything will be absolutely positioned. You'll likely want to adjust the new layout settings on all of your elements to get your desired responsive behavior.Note: Because most converted pages will now have a responsive container layout type, you will not be able to drag to resize elements like you're used to. With responsive containers, child elements need to follow rules as the screen or content resizes (stay aligned to the left? Stretch to fit the width?), and these rules are set in the Property Editor's Layout tab. Changing a container to a Fixed type will allow you to drag to resize, but the element will no longer behave responsively.Reusable ElementsReusable elements must be updated separately to the new Responsive Engine as well. Legacy reusable elements won’t break upgraded pages, but will also not have access to the latest controls and might not work as expected. Similarly, upgrade reusable elements will not break un-upgraded pages, but will not take advantage of the new responsive controls and may not work as expected.Property EditorThe Property Editor has been updated to accommodate the new responsive controls. Most notably, a layout tab has been added to house the new responsive controls. The Property Editor is now the same across the UI Builder tab and Responsive tab, making it easier to continue building regardless of the tab you are in.AppearanceControls related to the overall appearance of an element. This includes the data type, data source, styles, and transitions settings.LayoutControls related to the overall layout of an element on the page. This includes the width, height, container layout type, page visibility, and margins.ConditionalsConditionals allow you to control how page elements behave and appear under certain circumstances. This tab remains unchanged from before.PreviousBuilding Responsive Pages (Legacy)NextTips When Designing (Legacy)Last modified 8mo agoCopy linkOn this pageOverviewUpgrading your PageConverting an existing pageConverted page layoutReusable ElementsProperty EditorAppearanceLayoutConditionals









Building Your First App - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereThe BasicsThe Application EditorThe Application Editor (Legacy)Building Your First AppStrategies to Learn BubbleApplication & Data OwnershipChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookBuilding Your First AppLearn basic principles for building on Bubble and get ready to put things into practice with this step-by-step tutorial for building your first application.Our Academy course on how to build your first applicationBuilding your appEstablish the visual structureWhile each user will have their own habits when building on Bubble, the general approach is to start by establishing the application's visual structure, and then define the workflows that program it. The visual structure is going to be the set of pages and core elements you need your users to interact with, such as inputs, buttons, etc, while workflows are events that trigger a series of actions. For instance, a click on a button is an event. It's easier to think about these events and their actions once you already know which buttons and inputs are needed on the page. Draft the visual structure on paperIt is usually a good idea to start drafting what your application will look like and what it will do on paper. Our experience shows it is worth the time to draw the few key screens on paper, with the necessary elements on each of them, and then draft the workflows, action by action. Once you have this, designing the actual application will be much faster and more natural. Define a basic data structureThe next dimension of building on Bubble is the data structure. In order for your app to run, you and your users will rely on a data structure that lets them create, read, update, and delete data. If you were building a basic version of Instagram, you would have Users and Posts. Your users might have a name, a description, and a location, while your posts might have a title, a description, and a photo. Think about what else you needLastly, it is very likely your app will rely on external services to function, such as payment solutions, data providers, etc. This is done through plugins or your app's API. You should worry about these after your initial visual and data structure is clear. With that being said, here is a list of things you should ask yourself as you're building:How many pages your app needs. For instance, Facebook has a home-feed page, a home page when logged out, a profile page, a settings page (at least in an earlier version of Facebook...).How users navigate between pages, and under which circumstances.What kind of data your app will store. If it's a rental market place, you'll have, in addition to users, apartments, reviews, etc. An apartment will have an address, some pictures, etc.Iterate as you goNote that building an application is an iterative process. Most users start by designing a wireframe of the page with the first elements and a simple layout, move to the workflow part to set basic behavior, and then move back to the design part as they have a better sense of the elements they need. As your app grows and you refine the product, add features, etc., you will also be modifying the design, the workflows and the data structure.Because Bubble is very open-ended, you will very likely make some mistakes as you are building your application, as you would sometimes make mistakes in an Excel formula. This is part of the programming process. Bubble offers a few tools to help you debug and fix your application.Running your appBuilding is only one facet of Bubble's power. Once you have built the first version, you will run it with real users and real data. When your app is in production, i.e. used by actual users, you will be able to monitor it to make sure everything is working as expected. Again, Bubble has a few monitoring tools and logs to help you with that. When an app is running, we call that Run-mode.Using paid featuresSome features may only be accessible on paid plans. You can review the plans differences here. All features are accessible in the Editor, but will not work in Run-mode if your plan does not allow the feature. A warning is usually displayed next to the feature if your current subscription does not cover it.PreviousThe Application Editor (Legacy)NextStrategies to Learn BubbleLast modified 1yr agoCopy linkOn this pageBuilding your appEstablish the visual structureDraft the visual structure on paperDefine a basic data structureThink about what else you needIterate as you goRunning your appUsing paid features









Using Custom Events - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsThe BasicsHandling ConditionalityUsing Custom EventsTips When ProgrammingUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookUsing Custom EventsCustom events are a way to define a workflow in your page that can be reused multiple times ("functions" in a code-driven language).When to use custom eventsAs a general rule in programming, whether it's on Bubble or in a traditional, code-driven language, you want to limit as much as you can redundant instructions, workflows, or lines of code. This helps having a leaner application and makes debugging, modifications, and maintenance much easier. If you find yourself repeating the same logic, in other words the same sequence of actions, in more than one workflow, you can optimize your design by using a "custom event" that you will trigger in more than one workflow. For instance, if a user has two ways to sign up to a service, and the sign up flow does more than simply signing the user up, but also sends an email, some analytics, etc., this would be great candidate for a custom event. You would move the repeated sequence of actions into a custom event and use a Trigger custom event action in both workflows that sign the user up.Defining a custom eventDefining a custom event is similar to defining a regular workflow. You pick an event and then add some actions. The event type here is 'Custom event', which is similar to other events, and can have a condition applied to it. One particular field is the ability to define at least one parameter for this workflow. For people familiar with traditional programming languages, the custom event is the function and accepts the parameters in its definition. The type of parameter for the custom event can be a database type you have defined in your app, or a simple type like text, number, etc. Moreover, you can specify whether the parameter is a list/array or optional.As soon as you have defined at least one parameter for the custom event, you will be able to access the parameter in the Expression Composer in the following actions. For instance, if a custom event takes a user, you will be able to send an email to 'This Workflow User's email'. This expression will be evaluated with the user that was actually sent with the triggering action. If you want to reuse the same custom event in more than one page, you can add the custom event in a reusable element. Doing so, any page that has this reusable element will have access to the custom event.Triggering a custom eventOnce a custom event has been defined, you can add some actions to your workflows to use this workflow. Just pick the 'Trigger custom event action' (or the 'Trigger custom event action from a reusable element' action if you added the event in a reusable element).If at least one parameter has been defined, you will have to pick a thing to send for each action. The type of the thing needs to match the type of the parameter that was defined as the workflow level, and type inconsistencies will be flagged as issues. Scheduling a custom eventYou can also schedule a custom event to occur at a later time.Triggering vs scheduling custom eventsYou may wonder whether there's a difference between triggering a custom event and scheduling a custom event to occur with 0 delay. Yes, there is.Let's say you have a parent workflow that has some actions, then a "Trigger a custom event" action, then some more actions. When the parent runs that Trigger action, the parent will pause and wait for the custom event to complete before running the actions that come after it. This is convenient in part because the custom event will be able to see the context of what happened in the actions before it in the parent workflow.In contrast, if you schedule the custom event to occur with delay 0, that custom event could end up running in parallel to the rest of the parent workflow.Execution of a custom eventWhen a workflow is triggered in Run-mode and hits a trigger a custom event action, the first workflow will pause, the custom event will be run till completion, and the first workflow will resume. Using the debugger can be very helpful to understand the flow of actions if you are hitting some difficulties setting things up. For more detail about our execution rules, please refer to here.PreviousHandling ConditionalityNextTips When ProgrammingLast modified 3mo agoCopy linkOn this pageWhen to use custom eventsDefining a custom eventTriggering a custom eventScheduling a custom eventTriggering vs scheduling custom eventsExecution of a custom event









Social Network Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookSocial Network AppsBy Daniel Abebe, co-founder of HuggyStudioVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!Social Networks serve the main purpose of connecting people or businesses together. Most of the time, they are built to scale and have a business model focused on ad revenues. Their form and target audience can vary greatly. Famous examples include Facebook, Instagram, TikTok, Linkedin.In this guide, we take you through the creation of the data structure for a social network like LinkedIn called “NoCodeLinkedin”. Good to know: NoCodeLinkedin is a real use case built on Bubble.io that you can check out here: https://nocodelinkedin.com/.If you are not familiar with LinkedIn, here is a quick introduction into our use case with an overview of the basic functionality:LinkedIn is the world’s largest professional network. LinkedIn helps professionals find talent, job opportunities, stay in touch with their contacts and extend their network.Basic functionality includes:Sign up / Log inEdit profile (Name, Bio, Headline, Experience)Connection requests (Send, accept, ignore)Create a new postReact to a post (Like, Celebrate, Support, …)Comment on a postPrivate chatsNotificationsData types recommendedAfter signing up, users will edit their profile and start sending connection requests. Later on, users will create posts and will scroll through the latest activity of his/her network. Last but not least, the user will also react and comment on other users’ posts. The data structure we are creating needs to take all of these actions into account.User (default)The Data Type “User” is by default already available on any Bubble app. It helps you handle user authentication. As a rule of thumb, if someone needs to signup/login to your platform, this person is considered to be a User. In our case, all NoCodeLinkedin profiles are actual Users.Suggested fields on this typeemail (text) - this is a built-in field, i.e. it’s already there for youModified date (date) - also a built-in fieldCreated date (date) - also a built-in fieldSlug (text) - also a built-in field; see this article on using Page SlugsFirst name (text)Last name (text)Profile picture (image)Headline (text)Bio (text)Experiences (list of experiences): Working experience of the user; see this article on linking data typesInvitations (list of invitations): Connection requests receivedChats (list of chats): Actual chats that this specific user has with other usersNotifications (list of notifications): Notifications received about relevant activitiesPrivacy rules for this data typeThis User is Current UserView all fields (checked)Find this in search (checked)View attached files (checked)Allow auto-binding (unchecked)Everyone elseView all fields (unchecked)First name (checked)Last name (checked)Profile picture (checked)Headline (checked)Bio (checked)Experiences (checked)Find this in search (checked)Allow auto-binding (unchecked)ExperienceThe Data Type “Experience” is used to store working experience on a user profile; each record is a separate past work experience for a given user.Suggested fields on this typeCreator (User, built-in)Modified date (date, built-in)Created date (date, built-in)Slug (text, built-in)Company (text): In the real LinkedIn, this would be another Data Type that holds all information about the companyCompany Logo (image)Current position? (yes/no): When this is true, the job experience will need no end dateJob title (text)Description (text)Location (geographic address)Start date (date)End date (date)Privacy rules for this data typeNo privacy rules → All Working Experiences are visible to all users when looking at a profile. If you want to be restrictive, you could add a Privacy Rules to make it only visible to Logged in Users.PostThe data type Post holds all the information about a user post. Note, a user can add an image to a post.Suggested fields on this typeCreator (User, built-in)Modified date (date, built-in)Created date (date, built-in)Slug (text, built-in)Text (text)Image (image)Comments (list of Comments): Comments made under this specific postReactions (list of Reactions): Reactions on this specific postActivities (list of Activities): This is a combined list of all comments and reactions made on this specific postTagged users (list of User): Users that are tagged on this postPrivacy rules for this data typeNo privacy rules → All Posts are visible to all users. They don’t necessarily show on the user's feed but they should be accessible to all.CommentThe data type “Comment” holds all the information about a user comment.Suggested fields on this typeCreator (User, built-in)Modified date (date, built-in)Created date (date, built-in)Slug (text, built-in)Text (text)Post (post): We link this Comment back to the Post to avoid orphaned comments (a comment saved in the database with no link to a post).Likes (list of Users): We can show the number of Likes by simply showing the count of Users in this list.Privacy rules for this data typeNo privacy rules → All Comments are visible to all users when looking at a Post (likes, comments, …)ActivityThe data type “Activity” holds all the information about a post reaction (incl. comment).Suggested fields on this typeCreator (User, built-in)Modified date (date, built-in)Created date (date, built-in)Slug (text, built-in)Activity Type (Activity Option Set): There are different types of “Activity Type” that we can pick from in our Option Sets.Post (post): We link this Activity back to the Post to avoid orphaned Activities (an Activity saved in the database with no link to a post).Reaction Type (Reaction Option Set): There are different types of “Reaction Type” that we can pick from in our Option Sets.Comment (Comment): If this activity was a comment, we will link back to the comment. If not, this field will be empty.Privacy rules for this data typeNo privacy rules → All Activities are visible to all users when looking at a Post (likes, comments, …)NotificationThe data type “Notification” is necessary to better organize notifications and offer a better User Experience on the platform.Suggested fields on this typeCreator (User, built-in)Modified date (date, built-in)Created date (date, built-in)Slug (text, built-in)Receiver (User)Activity (Activity): We link back to the activity to enrich the Notification message and give more context to the receiver. With that link back to an Activity, we can also go back to the Post on which that activity took place. Linking back to this activity creates several possible call-to-actions.Read? (yes/no): We store this value to know if the Receiver has unread notifications or whether he/she is up to date.Privacy rules for this data typeThis Notification’s Receiver is Current UserView all fields (checked)Find this in search (checked)View attached files (unchecked)Allow auto-binding (unchecked)This Notification’s Creator is Current User → The sender should see if an invitation is already pendingView all fields (checked)Find this in search (checked)View attached files (unchecked)Allow auto-binding (unchecked)Everyone elseNo permissionChatThe Data Type “Chat” is used to store messages between users so that we can easily display a relevant discussion as a thread of messages.Suggested fields on this typeCreator (User, built-in)Modified date (date, built-in)Created date (date, built-in)Slug (text, built-in)Users (list of Users)Messages (list of Messages)Privacy rules for this data typeThis Chat’s Users contains Current UserView all fields (checked)Find this in search (checked)View attached files (checked)Allow auto-binding (unchecked)Everyone elseNo permissionMessageThe Data Type “Message” is used to store text messages sent between users. A message doesn’t need to hold information about the message receiver as it is saved in a chat that holds that information already.Suggested fields on this typeCreator (User, built-in)Modified date (date, built-in)Created date (date, built-in)Slug (text, built-in)Text (text)Chat (chat): We link this Message back to the Chat to avoid orphaned Messages (a Message saved in the database with no link to a Chat).Viewed? (yes/no): We store this value to know if the receiver has unread messages or whether he/she is up to date.Privacy rules for this data typeThis Message’s Chat’s Users contains Current UserView all fields (checked)Find this in search (checked)View attached files (checked)Allow auto-binding (unchecked)Everyone elseNo permissionInvitationThe Data Type “Invitation” is used to store connection requests. This data type makes it possible to confirm a connection request before connecting two users together.Suggested fields on this typeCreator (User, built-in)Modified date (date, built-in)Created date (date, built-in)Slug (text, built-in)Receiver (User)Note (text): A user can send a note with the connection request.Status (Invite Status Option Set): This status is “pending” by default as all connection requests need to be approved. The user can then accept or ignore the request, which will change this status.Privacy rules for this data typeThis Invitation’s creator is Current User OR This Invitation’s Receiver is Current UserView all fields (checked)Find this in search (checked)View attached files (unchecked)Allow auto-binding (unchecked)Everyone elseNo permissionOption sets recommendedActivity TypePostedCommentedReactedReaction TypeLikeCelebrateSupportLoveInsightfulCuriousInvite StatusPendingAcceptedIgnoredAdditional notesWhen naming your options sets, data types and fields, we recommend using simple terms you will remember over time. Also, avoid repetition in your names as it will make it difficult to work efficiently when building your workflows. Finally, keep in mind that working with data is an ongoing process. Start small, adjust when necessary and improve as your product grows in terms of users and/or complexity.About HuggyStudioWe believe entrepreneurship is about positive change, not code. HuggyStudio helps entrepreneurs and intrapreneurs validate their ideas. We specialize in building new product ideas into functional MVP through our no-code education platform and our no-code agency.


PreviousDirectory & Listings AppsNextSaaS AppsLast modified 9mo agoCopy linkOn this pageData types recommendedUser (default)ExperiencePostCommentActivityNotificationChatMessageInvitationOption sets recommendedAdditional notesAbout HuggyStudio









Popups - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersGroupsRepeating groupsPopupsFloating groupsGroup focusInput formsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookPopupsThis section covers the container type Popup, which is a group that hovers above all other elements on the screenThe Popup group type is a a group that is displayed above all other elements and is centered on the screen regardless of the scrolling position of the page. They can be set up to hide or blur the page below. As such, they are a useful way to bring an important message or forms to the user's attention immediately.Typical use cases for popups include:Error messages and alertsRegistration formsContact/Feedback formsNewsletter Signup formsPromotional offers and discountsPopups can be used to bring attention to your users immediately. In this example we're encouraging users to complete their profile.Showing and hiding popupsPopups are never visible by default and cannot be displayed using conditions. In this way they are a bit different from other groups.Popups are displayed using one of two actions:You can use the Show an element action to show the popup. Bubble automatically applies a slight fade animation to the group when it's displayed and hiddenYour second option is to use the Animate an element action to pick what kind of animation you want to use to display the popupUsing the Show an element action the popup will automatically fade in.Custom events for popupsA workflow consists of an even and a set of actions. The event is used to determine when the collection of actions should run. Adding a popup to a page gives you two more events that you can use to trigger a workflow:Popups give you access to two new events that trigger whenever the popup is opened or closed.A popup is closed will trigger every time a specific popup is closed using the Hide an element or Animate an element actionsA popup is opened will trigger every time a specific popup is closed using the Show an element or Animate an element actionsThe events will trigger every time the popups is opened or closed (as opposed to just the first time). A typical scenario where an event like this is useful is to reset the content of the popup after it's closed.Popups and securityWhile popups can be set up to cover the content of the page with a specific color or a blur filter, it should not be considered a secure way to hide sensitive information. A popup can be hidden by a tech-savvy user, revealing the content below. ​PreviousRepeating groupsNextFloating groupsLast modified 22d agoCopy linkOn this pageShowing and hiding popupsCustom events for popupsPopups and security









Importing from Figma - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookImporting from FigmaThis feature will import your Figma design into your Bubble app. Due to the differences in the two platforms, the import will not be at 100% fidelity, but can give you a head start on the app design process.How to import a Figma fileGo to Settings > General and scroll down to the “Design Import” sectionYou can find your Figma API key by going to your Figma account settingsOn your Figma dashboard page, click your name in the upper left, and then “Create a new personal access token” if you don’t have one already - this is your API keyYou can find the Figma File ID by looking at the URL when you have the file open in FigmaThe URL should have the format figma.com/file/{random letters and characters}, or figma.com/file/{random letters and characters}/[slightly more readable name]; the file ID is the {random letters and characters}Clicking “Import” will begin the import, which can take a few minutes for large Figma filesHow the import worksEvery top-level frame in every page of your Figma file will be imported as a new page in your Bubble appInvisible items in Figma (made invisible in the layers sidebar) will not be importedBubble tries to import as much from Figma as possible, mapping Figma elements to the closest kind of Bubble elementBubble will create groups out of elements that are grouped in FigmaNames of elements in Figma will carry over to Bubble as well (note that there is a character limit on imported names and Bubble will avoid duplicate names)Bubble tries to create Styles to match styling from Figma, but in more complex situations (e.g. multiple styles in one piece of text), Bubble may make assumptions about the style to apply or use rich text markup (bbcode) for textAny kind of vector in Figma will be imported as an image in the appAny group in Figma that contains only vectors is imported as a whole image (having sub-groups, even if they only have vectors themselves, will not trigger this rule)Images will source the image uploaded to Figma’s servers, i.e. images will not be automatically uploaded to your Bubble appBubble will not make any assumptions about what’s a repeating groupIf a shape or frame has invisible fill, it carries as transparent fillsTip: During the import, Bubble will treat every image as a separate image, even if two images are technically copies of one another. Also, in the event the Figma file has a large image (e.g. an SVG containing large embedded PNGs), Bubble will still faithfully try to import those (very large) images! Known limitationsThis is a one-way, one-time import and we do not maintain a link between a Bubble page and the Figma frame; if you trigger the import again, it will simply create a new Bubble page for each top-level Figma frame againIf you experience a “Network error” upon trying to import:First, check your ad-blocking / anti-tracking software, as that can sometimes block our call to Figma’s APIPlease try again a little bit later; if you consistently experience this, please file it as a bugBecause Figma allows tighter constraints around text boxes, Bubble will add to the height and width of text elements to get it closer to the Figma designAny styling that’s possible in Figma but not currently possible in Bubble will not be imported - though workarounds usually exist for implementing complex styling; these include:No bottom vertical alignment for text Can only have one shadow per elementCan do a max of 3 colors for gradientsDoes not support multiple fills at the same time — Bubble only takes the first fill in an object0px rounded borders are overriddenThere are some other styling properties that we do not carry over yet, but which might come in a future release; examples include:Having different border styling on different sides of an elementElements that go off the frame towards the top or leftNote also that if you try importing a significantly large and complex Figma file, the import may timeout (this also depends on your computer's resources). If you're bumping into this limitation, try breaking up your Figma file into smaller files and importing those individually instead.Tips for setting up your Figma fileSince this feature imports every frame in your Figma file, if you have a very large Figma file with many variants of a given page, you may want to copy a subset of frames to a new file to use in your importRemember that every top-level frame gets imported as a new page, and that the import is a one-time import. You may want to consider designing a Bubble page in chunks in Figma, and doing periodic imports to bring in new chunks into BubbleGreat way to make mobile pages and add them directly to your application.Experiment with importing components from your Figma file all bundled into a frame so that you can easily copy / paste them while building your Bubble applicationYou can outline elements as strokes with no issue; these will transfer over normally.If you want to import masked elements, create a group (not a frame) with the masked elements only. We look at a group to see if any of the elements in the group are masked - if a masked element is found, the whole group is imported as an image.If you’re experiencing trouble importing an image: Make sure you’re using the image object and not an image fill on a frame. Currently, we only support image objects (i.e. when you click “place an image” on Figma) and you can mask it with other objects as needed.If you’re experiencing problems with importing background fills: when frames are imported as pages, we don’t currently support fills for those pages. If the fill isn’t showing up for objects, inner frames, etc. please check and make sure there aren’t multiple fills. Bubble only supports a single fill for any element so we only choose one.TroubleshootingIf you're encountering a "Network Error" or if Bubble does not consider your API Key and File ID to be valid, first try regenerating a new API Key in your Figma account......if that also does not work, try turning off any ad / tracking blockers you may have active.PreviousThe Component LibraryNext - User manualDataLast modified 21d agoCopy linkOn this pageHow to import a Figma fileHow the import worksKnown limitationsTips for setting up your Figma fileTroubleshooting









Documentation/ CMS Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookDocumentation/ CMS AppsBy Rico Trevisan from Refactoring NoCodeVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!Documentation: that thing we should all be making more of, we are always lacking from others, and we never read enough of it.The challenge of creating a system for documentation is how complex a "simple" thing can be. Luckily, Bubble allows you to grow your system as your needs grow because it's easy to refactor in Bubble.In this guide we will create a simple blogging system that is beautiful in its minimalism, yet powerful and easy to upgrade.Data types recommendedHere are the data types I recommend:Page (or you could call it Post or Article or Document)BlockBlock Type (option set)Published Status (option set)A Page is an individual blog post (or a piece of documentation) which is composed of multiple Blocks. Each of these Blocks have different types which are determined by Block Type. Each Page has a certain Published Status to allow you to have multiple drafts and only publish the ones that are ready.PagePage is the anchor of our system. Everything will be built around it. It needs to be "light" enough to make searching through all posts quick. This means the Page has no body; instead, the body is made up of a repeating group of Blocks instead, as we’ll see below.Suggested fields on this typeTitle (text): This is the title of the post. It will be used in the landing page with the list of posts, on the page of the post itself, and it will be what search engines will see.Slug (text, built-in field): slug is the title transformed into a URL-friendly text field.Description (text): The 2 to 3 sentences that give the reader a sneak peak of what's in the post.Published Date (date): A date of when the post has been published or of when it is scheduled to be published.Status (Published Status, an option set): What controls the visibility of the Page.Author (list of Users): Making this a list allows you to have co-authors​​Privacy RulesA rule for when “This Page's Status is published” should allow anyone to view all fields and find this in searches.​​Otherwise (the default rule), it should not be visible.​​BlockThis is the body of each Page.If we were to create a single gigantic Page with one field called body that houses the entire blog post, each Page would be too heavy to be able to quickly search through them and we would not have a lot of flexibility in how to display the content.Instead, we think of each Page as a listing of all the Blocks that make up the Page’s contents. We do that by using a Repeating Group that searches for all Blocks that relate to that Page, sorted by the Index.​​Each row of that repeating group contains all the different ways that Blocks can look, depending on the field called ‘Type’. All these different looks are invisible and collapsed by default, and then only the one that matches that Block’s Type will show up as visible.​​Each block is marked as invisible and collapsed by default.​​The Block only becomes visible if the current Block Type matches it.​​​This way we have the flexibility of styling each block differently while maintaining visual consistency for all Pages.Suggested fields on this typePage (Page): This links this Block to its respective Page.Index (number): Since in this method you will create a bunch of blocks to create a Page, you need a way to order them.Content (text): This is the text that this Block will display.Image (image): If the block is of a type Image, this is where it will get the image.Image Description (text): Most blogs will have a text under an image either clarifying it or giving credit to the original owner. This field is for that.Type (_block_type, an option set): This is the field that sets how this block should look on the page​​Privacy rulesWe can keep it simple and have this type without many restrictions. The only restriction that might be useful to apply is one that allows an admin to allow auto-binding. In a simple case, we can consider a logged in user as an Admin.​​Option sets recommended_block_typeh2h3bodyimageThis is a small set that can get you started putting together content. You could add more visual flare by creating new ways to visualize blocks. Ideas that could help you expand your types of blocks: quote, a note block, an image + text, code block, YouTube video… the possibilities are endless.Why no H1? Well, the title of the Page should be your h1 and everything else will be children of it._published_statusdraftscheduledpublishedSimple set of status to manage each blog post.About the author: Refactoring NoCodeRefactoring NoCode is an educational and development agency. We create educational content to help experienced Bubblers improve their apps. We also work with solopreneurs by doing unlimited development & design on their apps.​https://refactoringnocode.com For example, we’ve created a documentation app based on these principles. Try it out yourself: https://docengine.io​PreviousOn-demand AppsNextApplicant Tracking System (ATS) AppsLast modified 11mo agoCopy linkOn this pageData types recommendedPageBlockOption sets recommended_block_type_published_statusAbout the author: Refactoring NoCode









What Plugins Can Do - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsWhat Plugins Can DoInstalling & Using PluginsSpecial PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookWhat Plugins Can DoPlugins are elements, actions, events or data sources that are not part of the Bubble core, but that you can use in your application. A plugin can add different things to your app, or a combination of these things.Background servicesA plugin can add some code in the headers of your page and enable some background services in your app. Analytics services, for instance, are a very common background service that can be added to an app (Google Analytics, etc.).API data sourcesPlugins can add API connections that can be used in the 'Get data from API' datasource. Getting songs from iTunes, fetching animated GIFs from Giphy are examples of API Data sources.Authentication servicesA plugin can add an authentication method to your app, through OAuth. OAuth (Open Authorization) is an open standard for token-based authentication and authorization on the Internet. It allows an end user's account information to be used by third-party services, such as Facebook, without exposing the user's password. Practically, you'll be able to add a button to your app 'Login with Facebook', and users, instead of typing a password in your app, will authorize Facebook to grant access to your app.ElementsMany elements in Bubble are coming from plugins. Bubble's core elements only offer most common elements, as soon as you want to add something specific to your app, like a slideshow, an Excel-like table, etc. plugins will be the way to find these elements. Practically, these elements will function and behave similarly to Bubble's core elements in run-mode. Note that in edit mode, Community-built elements are not rendered, and will be displayed with a placeholder image.ActionsPlugins can add actions that connect with external services to your app. For instance, post something on the user's Facebook wall, send an email with a different provider, charge a credit card, etc. These actions behave in a similar manner as core Bubble actions.Private pluginsPlugins can be used to extend Bubble with your custom functionality as well. If you need some specific code to run, connect to a company's backend, you can write your own plugins and add them to your app.User manual - PreviousUsing PluginsNextInstalling & Using PluginsLast modified 1yr agoCopy linkOn this pageBackground servicesAPI data sourcesAuthentication servicesElementsActionsPrivate plugins









Creating API Workflows - Bubble Docs










Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationThe Data APIThe Workflow APIWorkflow API Privacy RulesWorkflow API endpointsAPI WorkflowsCreating API WorkflowsScheduling API WorkflowsRecursive API WorkflowsCase: Stripe notificationsThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookCreating API WorkflowsThis section covers how to create and setup an API Workflow.Help us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​Our webinar gives an introduction to how API workflows workCreating an API Workflow works in the same way as creating regular workflows in on a page. After activating the Workflow API and accessing the backend editor you click Click here to add a backend workflow and choose New API workflow.Click New API Workflow to create.The endpointFor each API workflow that you create and expose a unique endpoint is created, consisting of your app's Worfklow API root URL and the name that you give the workflow.The root URL is made visible in the Bubble editor as soon as you activate the Workflow API as illustrated below:Activating the Workflow API in Bubble's API Settings. exposes the root URL of your API workflows.Naming your workflowsThe complete API Workflow endpoint is constructed by combining the root URL with the name. As a consequence, the name of the API needs to be in a URL-friendly format:each API Workflow needs to have a unique nameuse lowercase lettersremove spaces and special characters (replacing them with dashes or underscores)remove any trailing or leading white spacedon't make the name too longFor example, instead of naming a workflow Create New User, you would name it create-new-user. Constructing the endpointHaving activated the Workflow API and given our workflow a name, we can now construct the complete endpoint:https://my-bubble-application.bubbleapps.io/version-test/api/1.1/wf/create-new-userLabelling your workflowsWhile the name of the workflow needs to be URL friendly, you are still free to provide a more humanly readable label for it. The API Workflow will automatically inherit its label from the name, but you can change this label as you see fit to make it easier to read and search for.Giving your API Workflow a different label makes it easier to work with and search for.Exposing the workflow externallyHaving created and named our Workflow, we need to make sure that it is exposed outside of your application, or the endpoint will simply return an error.To be reachable from outside of your own app, this box needs to be checked.Check the Expose as public API workflow box to give external applications access to the endpoint.Only expose API Workflows that you intend to trigger from an external system. If you will only use the workflow as part of your own app's internal processes, keep the box unchecked.Overriding authenticationJust like the Data API, API Workflows require that the client authenticates themselves before the workflow will trigger.To set up an API Workflow to be accessible by anyone, check the This workflow can be run without authentication checkbox. Keep in mind that Privacy Rules can still limit the functionality of the API Workflow.Be cautious when opening up API Workflows to be accessible without authentication as this will allow anyone to trigger the workflow at any time.Defining the HTTP methodThe HTTP method determines what kind of action the client instructs the server to perform. By default, API Workflows use the POST HTTP method, but some external systems require the ability to use the GET method for webhooks. To switch between the two, click the Trigger workflow with dropdown.If you select to trigger the API Workflow with a GET request, the parameter definition will default to Manual Definition, and the field will be hidden. You can still define key-value pairs as normal.If you are using API workflows via the App Connector, these workflows will automatically be triggered by the proper HTTP request defined in “Trigger workflow with” dropdown.When you switch between GET and POST, the definitions and parameters you’ve defined will be preserved. The contents for Detect request data will be saved if you decide to switch between the different options of Parameter Definition. The Bubble issue checker will ensure the data is correctly formattedDefining parametersIn many cases an API Workflow will need some parameters to run. Let's say for example that you the workflow is set up to create a new User in your app, you will need to include key information like email and perhaps a first and last name. Using parameters you can send this information to the workflow from outside of Bubble.You have two ways to define parameters:define the structure yourselfautomatically detect the structure of the received dataThe first option is better for an API workflow you define and when you control how the request is made (for instance when you use scheduled workflows, or build a custom client), while the second option is useful when using the API workflow's endpoint as a response to a webhook.Manual definitionAdding a parameter goes through three steps:1.Give the parameter a name2.Pick the type of data you will receive3.Specify whether the parameter is optional or notBoth the type of data and optionality are important settings: Bubble will validate the data when a request is made and if a parameter is sent with the wrong formatting or a non-optional parameter is missing, Bubble will return an error.In the example above we have include three parameters of type text to create a User:1.Email (required)2.First name (required)3.Last name (required)4.Nickname (optional)Automatic detectionBubble can also automatically detect the parameters that are sent by an external service (webhook). It does this by "listening" for the incoming request and checking the parameters that are sent in the call – that way it can identify each one and attempt to determine what kind of data type it is.To do this, you need to make a small amendment in the endpoint URL to let Bubble know that this is an initialization call.Bubble can automatically detect the parameters in your call by using the Detect data feature.To automatically detect data, do the following:1.In the API Workflow inspector window, set Parameter definition to Detect request data2.Click Detect data3.Bubble will reveal the initialization URL4.Send the request from the external systemInitialization URLBubble will show you the URL you need to send the request to, but you can also construct this by yourself:https://appname.bubbleapps.io/version-test/api/1.1/wf/endpoint/initializeorhttps://yourdomain.com/version-test/api/1.1/wf/endpoint/initializeThe request should be made to the test version of your app, as it's the version you're modifying. You never need to send an initialization to the live version, as any changes you make to the parameters need to be deployed.Returning data from the API WorkflowSometimes you'll want your app to return data after a workflow has been triggered. In most cases, to respond with data from your database you will want to use the Data API, but sometimes you need  more control over what data you send back, such as:verifying that a workflow completed successfullyreturning data that depends on the workflowcombining data/fields from multiple data typesTo return data you can use the Return data from API action:In the example above, we have a database Thing where we save a score. Let's imagine that we want to return the average score of all Things in the database. We can use the Return data from API feature to perform a search and return the updated average that depends on Step 1.PreviousAPI WorkflowsNextScheduling API WorkflowsLast modified 1mo agoCopy linkOn this pageThe endpointNaming your workflowsConstructing the endpointLabelling your workflowsExposing the workflow externallyOverriding authenticationDefining the HTTP methodDefining parametersManual definitionAutomatic detectionReturning data from the API Workflow









Tips When Designing (Legacy) - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingResponsive designBuilding responsive pagesLegacy articlesThe Basics (Legacy)Building Responsive Pages (Legacy)Migrating Legacy PagesTips When Designing (Legacy)TemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookTips When Designing (Legacy)There are a few things that you should get used to using or doing as you design your app.Finding elementsIf your page has many elements, you may find it difficult to find elements to edit them. Here are a few ways you can find them easily.Use the Element Picker in the Top Bar. All the page elements are listed alphabetically; you can start typing a name and you'll see the different elements. When you hover an entry in the dropdown you will see a thumbnail to confirm this is the right element, and clicking on it will show it and select it. To make the best use of this, you should take the habit of naming your elements carefully.When two elements overlap, clicking on them by pressing CMD will select each element one-by-one, even if one is completely under another. Using this, you can select the element under all the others, without modifying your page layout.Clicking on the 'X-Ray' icon will make elements semi-transparent, which is handy combined with the CMD+click operation above.Use the Element Tree to have a clear view of the structure of your page.The App Search Tool is useful to find elements in the current page by type, or that contain a specific text, etc.If you find yourself moving some elements that should never be moved, you can add some protection in the Editor by checking the box 'Lock this element (not draggable in editor)'. This is purely for editing purposes, and can be handy when working on complex pages.Using the InspectorWhen you start building a complex page, an element can be used in many different places, such as events, actions, or even in other elements. To help you have a centralized view of how an element is used in the interface, Bubble has an Element Inspector that will show these connections. In particular, it will show:The custom states the current element has, and lets you modify them, delete them, or add a new stateThe different events that are using the current elementThe different actions that are using the current elementThe other page elements that refer to the current elementTo reveal the Element Inspector, click on the information icon in the Title Bar of the Property Editor.Choosing alignmentsHaving elements aligned is key in having a good, clean design. Bubble has a few tools to help you with this.1.Snap to edges when dragging and resizing element. By default, Bubble will try to snap elements to an existing line on the page. If you want to change this behavior and snap to a grid, you can control this in the Grid menu in the Top Bar.2.You can show a grid, control the step (in pixels) and the color of the lines.3.The Arrange menu offers some useful distribution features, for instance if you want the space between three elements to be equal. You can also center an element relatively to its parent (this is also possible by using the Shortcut CTRL + E).Using the Contextual MenuRight-clicking on an element will reveal a Contextual Menu. You will find some clipboard options that can save you a lot of time, in particular copy formatting and copy conditional formatting. Using this feature will copy all the conditions and the modified properties in each of the conditions.You can also replace an element by another type. For instance, if you realized that you want to use the Ionic Toggle instead of a Checkbox element, you can replace the element without having to delete it and rebuild it. Keep in mind that this can have some consequences on your app, as the type of data the element returns can be different. For instance, if you replace a checkbox by a date input. The Issue Checker will be useful to make sure you haven't introduced issues.The Contextual Menu also offers a grouping feature, that will move all the selected elements into a new group. Lastly, you can decide to convert an element, or a group of element into a Reusable Element. This is particularly useful if you realize that a group of elements will be used in more than one place.Customizing color swatchesIt is important to always use the same color (HEX code) across your pages, for design consistency. To ease this process, you can define some preset colors in the Settings tab, General & Design section, and then you'll be able to pick these colors wherever you access the color picker.Building responsive pagesBuilding responsive pages can be a little unnatural at first. However, once you master the different parameters, you will be able to have very customizable behavior. As everything in Bubble, you have immediate feedback when you change a parameter, so tweaking is a good way to start. Here are a few techniques we've seen to be useful when designing a responsive page.1.Grouping elements is very useful when you want them to move together on the page. Select a few elements and right click on them to group them. You can also use the keyboard shortcut CTRL/CMD + G. Once this is done, you can define a max width, a min width, an alignment, etc. at the group level.2.If elements overlap, their behavior will be similar. So if you want to show a group when the width is higher than 500px, and show another one when the width is lower than 500px, it’s important to have these elements side by side, and to make sure they don’t overlap.3.If you need to have a screen-wide stripe, you can use a group (or a floating group to make it float at the top) and make it as wide as the page area in the builder view. If you don't set a maximum width, it will automatically extend to the edges of the screen.4.If you want the distance between two elements to get smaller as the page is resized (instead of the elements' widths being squeezed), using a transparent shape can be very helpful. Remember that the algorithm keeps the margins constant, and not the widths. So if an invisible shape is between two elements, it will get squeezed and the visual distance between the two elements will effectively get smaller as the page gets narrower.5.You can change fonts based on the screen width. The Current Page Width datasource is available in the conditional tab of each element, so you can have a smaller font based on the width. A good practice is to put this at the style level, so that all elements follow the same rule.6.There is a difference between a 'hiding rule' and using a conditional state that hides an element based on the current page width. The hiding rule is more powerful because when it gets applied (and hides an element), it frees some space for the other elements on the same line. Setting a condition doesn’t do this.7.If you want to have a radically different design for mobile, you can build a different page entirely. Just design another page and make this page the 'mobile version'.PreviousMigrating Legacy PagesNextTemplatesLast modified 8mo agoCopy linkOn this pageFinding elementsUsing the InspectorChoosing alignmentsUsing the Contextual MenuCustomizing color swatchesBuilding responsive pages









Floating groups - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersGroupsRepeating groupsPopupsFloating groupsGroup focusInput formsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookFloating groupsThis section covers the group type Floating Group, which is used primarily for attaching a group to one of the sides of the screen, regardless of scrolling positionVideo lessonsWe have multiple video lessons on how to set up and use Floating groups:​How to use Floating Groups​​How to build a sidebar layout​​How to build a responsive navigation bar​Floating Groups are a group type that can be set up to hover above other elements on the page and they can be attached to any side of the screen and stay there regardless of whether the user scrolls up and down.Some typical use cases for floating groups include:Navigation menus: A floating menu bar that stays at the top of the screen while users scroll down the page.Social media icons: Floating icons that stay in a fixed position, usually in the corner of the screen, and provide quick access to social media profiles.Chatbots: A chat widget that pops up in a floating window, allowing users to communicate with a customer support agent or AI chatbot.Shopping carts: A floating cart that displays items a user has added to their shopping cart and allows them to checkout from anywhere on the site.Back-to-top buttons: A floating button that appears when a user scrolls down the page, allowing them to quickly return to the top of the page.A typical use case for Floating Groups is to set up a navigation header that sticks to the top of the screen. The example above is from Bubble's homepage – which is built using Bubble.Sticking Floating Groups to the screen edgeFloating Groups can be set up to stay along the edge of the screen even if the user scrolls. It can follow the screen edge exactly or be place at a given distance using margins.To set a Floating Group to stick to the edge, you need to pick a vertical and horizontal axis for the group to stay floating relevant to. You do this by opening up the Property Editor for the group and changing the following setting:The two top settings in the Property Editor of the Floating Group allows you to have the group float relative to both the vertical and horizontal axis.What is the z-index?The z-index allows you to choose whether the Floating Group should float above or below the other elements, including the page itself.Note that if you change the setting below to Beneath the page, the group will literally be beneath the page itself (and not just beneath the elements on the page).

As a result, if the page has a background style, it may block the Floating Group from sight.PreviousPopupsNextGroup focusLast modified 21d agoCopy linkOn this pageSticking Floating Groups to the screen edgeWhat is the z-index?









Data API Privacy Rules - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationThe Data APIData API Privacy RulesData API endpointsData API requestsThe Workflow APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookData API Privacy RulesThis section covers the Privacy Rules settings for the Data APIHelp us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​The Data API and Privacy RulesAccess to a specific data type through the Data API is controlled by the Privacy Rules applied to that type, except if the client is using a Bubble API token to authenticate (in which case the client will be granted full admin access and Privacy Rules are disregarded).If a client is accessing the Data API as an admin (authenticating with a Bubble API token) all Privacy Rules will be disregarded. If you want to use Privacy Rules to control access to the Data API, use user authentication instead.Privacy Rules serve as a secure filter to stop unauthorized access to your app's database.​How Privacy Rules affect the Data APIThe different checkboxes in a given Privacy Rule affect the Data API in the following way:Regular Privacy RulesView all fieldsIf this box is checked, the client will be able to retrieve all the fields on all the things of a given data type. If you uncheck this box you can check which fields are returned one-by-one.Find this in searchesIf this box is checked, the client will be able to retrieve a list of things of a given data type, optionally using search constraints. If it’s left unchecked, the client will be unable to search for the data type.View attached filesIf this box is checked, the client will be able to retrieve files saved to a given data type.Allow auto-bindingThis setting does not affect clients who access the database via the Data API.Data API-specific Privacy RulesActivating the Data API for a specific Thing activates three new settings in the Privacy Rules of that Thing.Whenever the Data API is enabled for a database Thing, three new options are available in that Thing  ’s Privacy Rule:Create via APIModify via APIDelete via APIAll three are unchecked by default to avoid accidentally giving editing access. If these boxes are left unchecked, an API client matching this Privacy Rule will not be able to create, make changes to or delete any data on that data type through the Data API.The Data API-specific Privacy Rules only apply to clients that access the database via the Data API. They do not affect your application's regular users or your API Workflows.PreviousThe Data APINextData API endpointsLast modified 1mo agoCopy linkOn this pageThe Data API and Privacy RulesHow Privacy Rules affect the Data APIRegular Privacy RulesData API-specific Privacy Rules









Visual elements - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersInput formsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookVisual elementsThis section describes the visual elements that are available in the Bubble editorVisual elements are the elements you can place on that page that cannot contain other elements (groups) and cannot accept input (input elements). They usually serve two purposes:To display information or contribute to the aesthetics of the pageTo accept button clicksIn the illustration above, all elements are visual elements: text, an image and a button.The visual elements category contains the following elements:TextA non-editable text element. Both the header and the body copy in the image above are text elements.ButtonA button is a shape with a centered text that's optimized for click workflows.IconIcon elements let you pick an icon to display from a large catalogue of different designs. Bubble uses the FontAwesome library.LinkThe link element lets you set up a link with a custom text and destination. It can dynamically point to one of your internal pages (including sending data to that page) or point towards an static and/or external link.ImageImage elements allow you to place images in your app. The element supports all widely used image types such as png, jpg, svg, webp and gif.ShapeThe shape element adds a rectangle to the page which can be resized, rounded and styled in different ways.AlertThe alert element adds a bar that can show a text message for a set amount of seconds before it disappears. It's used to display temporary messages such as success and error messages.VideoThe video element lets you implement streaming video in your app. The element supports YoutTube and Vimeo.HTMLThe HTML element lets you place a snippet of HTML code on the page. It can be useful when you need to include custom HTML code in your app that cannot be achieved through Bubble's visual editor. This can be HTML code, CSS styles, and JavaScript code.Typical use cases for the HTML element include:Embedding third-party widgetsUsing custom CSS to style or animate elementsAdding custom functionality with JavascriptMapThe Map element lets you implement a Google Map on the page, fully navigatable by your users. Built on BubbleThis element lets you add a small "Built without code: Bubble" logo to your app.PreviousThe pageNextContainersLast modified 24d agoCopy linkOn this pageTextButtonIconLinkImageShapeAlertVideoHTMLMapBuilt on Bubble









Selection controls - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersInput formsText and numbersDates and timeFile uploadsSelection controlsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookSelection controlsThis section covers selection control elements, that lets you set up input elements with predefined optionsSelection control elements are input elements that let your users make a choice from a preselected set of options. This ranges from a simple yes/no answer to picking one or more records from the database or other data sources.CheckboxThe Checkbox element is the most basic selection control element which simply returns a yes or a no depending on whether the box is checked or not.Radio buttonThe Radio button element is similar to the checkbox, but allows you to add more than one option. You can set up a static list of text options (in the example below we have used the texts Option 1, Option 2 and Option 3) or you can fetch a list of Things from the database and display one of their fields as the label.DropdownThe Dropdown element, similarly to the Radio button element lets you give your users one choice out of a selection of texts or from the database.Searchbox elementThe search box element lets you set up a flexible text search for database records. The element looks like a regular input field but quickly and dynamically returns search results as the user types.Slider inputThe Slider input element lets your users select a numerical value out of a range. You can set a minimum and a maximum value and the value of each step.Multiselect dropdownThe Multiselect dropdown element lets your users select multiple choices from a list of texts or records from the database. They choose the item from a dropdown list or search for them by typing.The element returns a list of whichever type of data you specify.The Multiselect dropdown element is a plugin. It's made by Bubble but it needs to be installed in your app before you can use it.

Search for Multiselect dropdown in the plugin store to install it.PreviousFile uploadsNextStylingLast modified 21d agoCopy linkOn this pageCheckboxRadio buttonDropdownSearchbox elementSlider inputMultiselect dropdown









Messaging App - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookMessaging Appby Rémi Fossembas from Apeable an official Bubble coachVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!Instant messaging apps include ones like Messenger, Whatsapp or Slack. This is a chat application that enables users to instant message and connect with each other. Users send text messages, images, videos, links or files to each other, and other users can reply and react with emojis.This guide’s data structure and logic can be used:as a stand-alone app whose purpose is to connect people with each other. By pushing it to a new target population, you will be able to take a slice of the communication marketor as an additional feature of your app. This module will ease communication between your users and make your app more funThese suggested data types and option sets should help you build common functionality for messaging apps in a way that keeps things scalable. Preview this messaging app’s data structure by following this link: Messaging app​Data types recommendedTo connect with each other, users (USER)  will create channels (CHAT-CHANNEL) with one another (or with groups). When a user presses the “Send” button a new message (CHAT-MESSAGE) is created to store the value of this message, which can be text, images, who has seen it, etc. Someone in the channel may want to react to this message by selecting an emoji which will create a (CHAT-REACTION) stored as a list into the message’s record.
We’ll also cover the feature allowing you to create a list of your favorite contact users (CONTACT).CHAT-MESSAGECHAT-MESSAGE is where the visual information of a message is stored in the database. It belongs to a CHAT-CHANNEL so that you can perform a “Do a search for” all messages in a channel to find all of a specific thread. This data is protected by the field VISIBLE BY that allows only users in this list to search, view files and view fields of this message. Everyone else has no access to it.Suggested fields on this typeType (type, an option set): this field is used for identifying what kind of message content it is, also so that we can control how the message is rendered visually. For instance if the message type is “image” you won’t show the text element of the message.​​Value-text (text): this is the content of the message when this message has Type = text. For instance this field will be empty when your message Type = image, but if Type = text it could be “Hello John”. You could also set Type = link to use BBcode, a special way of storing text that allows for rich text content like links or formatting, for example, “Look at this nice car: [url=https://tesla.com/]Tesla.com[/url]”.Value-image (image): this is the content of the message if this message’s Type is image (or link with a preview).Value-file (file): this is the content of the message if this message’s Type is file. The value of this field can be displayed as a link in the text element of the message.CHAT-CHANNEL (CHAT-CHANNEL, another data type): is the reference of the thread this message belongs to.​​​VISIBLE BY (list of USERS): is set for privacy purposes: only users of this list can view this message. Every time a message is created, set this list of users to all users that belong to this chat channel. When a user is added to the channel, add this user to all previous messages.OWNER (USER): is often the Current User but that field allows you to create messages on behalf of someone else. It can be useful if you need automated messages sent by a bot for instance.SEEN BY (list of USERS): is set to Current User when the message is created, then users are added when they have read the message.This allows for helpful features like displaying the number of unread messages a user has: Perform a “Do a search for” CHAT-MESSAGE: count, with Constraints:CHAT-CHANNEL = XXXSEEN BY doesn’t contain Current UserVISIBLE BY contains Current User (not needed if previous Privacy Rules is set properly)​​​CHAT-REACTIONS (list of CHAT-REACTIONS): allows users to react to a specific message with Emojis or Likes.​​​CHAT-REPLY (CHAT-MESSAGE): stores the reference of a message that this one was a reply to. In the case where a user wants to reply to a message, you need to store that relationship somewhere. Let's say the original message is A and the reply is B, then save in message B's CHAT-REPLY the message A's value.​​​Privacy rules for this data typeMake this data type private by default:  uncheck all the boxes under “Everyone else (default permissions)” Create a rule:When: This CHAT-MESSAGE’s VISIBLE BY contains Current USER, they can “View all fields”, “Find this in searches” and “View attached files”CHAT-CHANNELThis Data Type is the primary way to keep messages organized by threads.Suggested fields on this typeName (text): especially useful if threads are organized into channels with a list of Users.PARTICIPANTS (list of USERS): is set for privacy purposes: only users of this list can view this channel. Add users to this list so they can see the thread and participate in the conversation.​​​ARCHIVED BY (list of USERS): allows each PARTICIPANT of the channel to archive a thread but can still unarchive the thread if desired. This data type isn't mandatory for the messaging system to work, but it's an option that allows each user to mute threads and no longer receive notifications.Privacy rules for this data typeMake this data type private by default: uncheck all boxes under “Everyone else (default permissions)” Create a rule:When: This CHAT-CHANNEL’s PARTICIPANTS contains Current USER, they can “View all fields”, “Find this in searches”, and “View attached fields”CHAT-REACTIONThis Data Type allows users to react to a message with some Emojis. This is a separate Data Type instead of a field on CHAT-MESSAGE because multiple users might react to the message, each with a different reaction (emoji). Because we need to store at least two pieces of information about each reaction (the person reacting and their emoji), we can’t store it simply as one field on CHAT-MESSAGE and instead have to use a new Data Type.Suggested fields on this typeOWNER (USER): is the creator of this reactionCHAT-MESSAGE (CHAT-MESSAGE): the message that the reaction belongs toEmoji (Emoji, an option set):  this will have choices like 👍 👎 😂 💙Privacy rules for this data typeSince this data type alone will not contain information that is too sensitive (since the CHAT-MESSAGE’s contents are not stored with each reaction, just a pointer to the relevant message), we could just leave this visible to everyoneCONTACTThis Data Type allows users to have a list of contacts.Suggested fields on this typeOWNER (USER): is the creator of the contact list.CONTACT (USER): is the user added to this list.Privacy rules for this data typeMake this data type private by default:  uncheck all boxes under “Everyone else (default permissions)” Create a rule:When: This CONTACT’s OWNER is Current USER, they can “View all fields”, “Find this in searches”, and “View attached fields”USERStandard built-in Bubble app User.Suggested fields on this typeFirst name (text)Last name (text)Profile picture (image)Email (built-in field)Privacy rules for this data typeMake this data type private by default:  uncheck all boxes under “Everyone else (default permissions)” Create a rule:When: Current User is logged in, they should be able to view “First name”, “Last name” and “Profile picture” fields if you want all users to be able to see each others’ information. “Find this in searches” should also be checked if you want users to be able to find each other, such as by name.Option sets recommendedType (of CHAT-MESSAGE)textimagelinkfilevideoThis option set is used for saving what format a message is. This helps when it comes time to build what the page looks like, and you want to render different formats of messages differently. For instance if a message Type is “image” you won’t show a text element of the message.Emoji👍Text: &#128077👎Text: &#128078😂Text: &#128514💙Text: &#10084You can of course add as many emojis you want. You can display them in a text element using the option set’s Display or in a HTML element using the text’s value.If you want to allow your users to create their own list of reactions, you would use a new Data Type instead of an option set.Example uses in your appDisplay the list of channels the Current User belongs to: You actually don't need to apply a constraint filter when doing a search with the current user because the privacy rules already ensure that a user can only see channels they are a member of.​​Display the list of messages of a specific Channel. In the screenshot below, the value of the CHAT-CHANNEL is given by the Parent group that this Repeating Group is in.​​Display the list of reactions to a specific Message. In this case, the value of the CHAT-MESSAGE is given by the Parent group that this group is in.​​Additional notesYou might want to allow your users to bookmark some specific messages, like you can on Slack or on Bubble forum, so they can easily access a list of bookmarked messages at any time without having to go through all the threads to find them.To do so, follow similar logic to how we set up CONTACT, namely a new data type for storing just this information:OWNER: (USER) is the creator of the bookmarked message.MESSAGE: (CHAT-MESSAGE) is the bookmarked message the owner wants to add to his list.About the author: Rémi Fossembas Rémi is from Apeable and is an official Bubble coach​PreviousBlog AppsNextDashboardsLast modified 11mo agoCopy linkOn this pageData types recommendedCHAT-MESSAGECHAT-CHANNELCHAT-REACTIONCONTACTUSEROption sets recommendedType (of CHAT-MESSAGE)EmojiExample uses in your appAdditional notesAbout the author: Rémi Fossembas 









App texts (translations) - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseFilesStatic dataApp texts (translations)Option SetsTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookApp texts (translations)App texts, short for Application texts and messages is a sort of database for text strings that you can use around your app. It can be used for a single language, but Bubble also lets you translate all the strings into different languages to offer your users a multilingual app.Application texts are a part of Bubble's static data features. This means that they are not dynamic, like the database, and that the app needs to be redeployed every time something changes. As such, they are not meant to store long strings of text like articles and product descriptions, but shorter content like headers, menu options and button labels.Application texts become part of your application's codebase and is downloaded to every user on page load. You should never use these strings to store sensitive information.Assigning application textsApplication texts can be used in any expression, meaning that it can be assigned to any element property that accepts dynamic texts: this includes text elements, labels on buttons and checkboxes, text input fields, tooltips an many other places.Application texts can be used in any dynamic expression. In the screenshot above we're using an app text called My input as the placeholder for a text input element.This also means you can use them in workflows, element conditions and any other place where you can insert a dynamic expression. In the example above, we have selected App text as the data source, and My input as the operator: this is the ID of the particular string we want to show, which means it needs to be created first.Editing application textsTo access the application text editor, go to Settings - Languages. Under General settings you will find your app's default language and the field on the user that determines the user's language preference (more on that below).Under Application texts and messages you will find all the custom text strings that you have added (if any) as well as Bubble's core texts.The left column is the ID of the text. In the example from earlier, the ID of the text was My input. We'll find this ID andThe strings ID is on the left side, and the string that will be displayed to your users is on the right. Click the image to enlarge.Core textsThe core texts are the text strings that Bubble includes by default. You can change their string, but they can't be deleted and their ID remains static. These strings cover different error/informational messages connected to Bubble's core functionality. These built-in texts are already translated into all the available languages.Element stringsSome elements and plugins also add text strings that become available at the bottom of the list. For example, the multi-file uploader plugin adds standard texts such as Cancel upload and Remove file.Adding multiple languagesApplication texts are set up for multiple languages, and uses the IETF language tag language codes to identify each language and dialect.Setting the language field on the UserUsers in Bubble don't have a language setting field built in, but lets you set one up if you need it. The name of the field is not important, but the field must return a valid IETF language tag to work – in other words, the field must contain a text that matches one of the abbreviations in the dropdown The language field on the user must return one of language codes in the language dropdown, such as fr_fr.When you have set up the field, you assign that field to control the user's language setting with the dropdown Language field on the user type. Select the field you set up, and Bubble will automatically respond to the value in the field to display strings in the user's language.If the field is empty, Bubble will default to the language set in the Application primary language dropdown.Translating textsTo translate texts, select the language you want to translate into with the Currently editing messages and texts for dropdown. When you select a different language you will see the strings change. Strings that have not been translated into that language will show the text (no translation).Exporting and importing translationsBubble also lets you export all the language strings to a CSV file and then re-import the file after having made the needed adjustments to it. This way you can efficiently invite other users to translate the strings without giving them access to the Bubble editor.1.Click the Export button and download the CSV file that Bubble generates2.Make the needed adjustments to the file, but make sure that no text ID's are changed and that the columns remain exactly as they were when you downloaded the file3.Click the Import button and select the finished file.Importing a CSV file will overwrite all strings, even if the cell in the CSV file is left empty. If you want to keep a string as it was upon export, make sure it remains in the file.FAQ: Application textIf a text string is not translated into the active language, what will Bubble display?If the user has selected a language and a string on the page has not been translated into that language, the text (no translation) will be displayed instead. Bubble's error console in the bottom right corner of the debugger will also flag a warning when you preview the page.What happens if the language field on the user is empty?If you have set a field on the user to be a language field and that field is empty or returns an invalid language code, Bubble will default to the language set in the Application primary language dropdown.How do application strings affect performance?The application strings you add become part of your applications JavaScript source code files. This means that they are downloaded to every user that opens up any of your pages.For performance reasons, Bubble only downloads the text in the language that the user has selected – this is why changing the language on the user requires a page load so that the updated JavaScript file can be generated and downloaded.Application strings are no more performance-taxing than placing the string directly on the element; if they are used in multiple places they are more lightweight, since they only need to be stored once. Even if you don't plan to translate your app it can be useful to maintain all your strings in one place.Do Application texts support right-to-left writing (RTL)?Yes, Application texts support RTL languages such as Arabic, Hebrew and Urdu. Note that you may need to tweak your app design if you plan to switch between LTR and RTL languages, so we recommend testing your application in both languages.PreviousStatic dataNextOption SetsLast modified 6d agoCopy linkOn this pageAssigning application textsEditing application textsCore textsElement stringsAdding multiple languagesSetting the language field on the UserTranslating textsExporting and importing translationsFAQ: Application text









Data API endpoints - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationThe Data APIData API Privacy RulesData API endpointsData API requestsThe Workflow APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookData API endpointsThis section covers how to identify the correct endpoint when using the Bubble Data API.Help us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​IntroductionRemember our lesson from earlier when we explored that whenever a client sends an API request, they are attempting to reach a specific resource. The URL, short for Universal Resource Locator, shows the way to this resource.Bubble automatically generates a URL – known as an endpoint – for each data type you activate in the Data API. By using this URL in an API request, a client will reach the correct data type – the resource.Root URLThe URL consists of a root URL that’s unique for every version of every app you create but remains the same for all data types. As soon as you have activated the Data API, Bubble will reveal your app's root URL in the API settings:When you activate the Data API, Bubble reveals the root url of your application.That URL is structured like this:No custom domainVersionURLTest version:https://myapp.bubbleapps.io/version-test/api/1.1/objLive version: https://myapp.bubbleapps.io/api/1.1/objCustom domainIf you have connected your app to a custom domain, the URL will look like this:VersionURLTest version:https://mydomain.com/version-test/api/1.1/objLive version: https://mydomain.com/api/1.1/objAs you can see, the root URL points the client towards your app’s API and obj (object) means we want to interact with objects (data records) in the database. What’s missing?The Data Type URLThe final piece of the puzzle is to let the server know which data type we want to access. For that we need to include the name of the data type. Data type names in the Data API are the same as what you named them in the Bubble database editor, except it needs to be formatted in the following way:Remove spacesUse lowercase lettersFor example, the following data type names would need to be formatted as the following:Data Type nameCorrect Data API formattingRental UnitrentalunitSports TeamsportsteamCake RecipecakerecipeMake sure to always use unique Data Type names.
If two or more Data Types share the same name, the Data API will return the first one it finds, which may lead to unexpected behavior.If we want to access the Rental Unit data type, the full endpoint URL would look like this:No custom domainVersionURLTest version:https://myapp.bubbleapps.io/version-test/api/1.1/obj/rentalunitLive version: https://myapp.bubbleapps.io/api/1.1/obj/rentalunitCustom domainVersionURLTest version:https://myapp.bubbleapps.io/version-test/api/1.1/obj/rentalunitLive version: https://myapp.bubbleapps.io/api/1.1/obj/rentalunitThe HTTP ActionTo complete an endpoint, we need to know both the URL to the resource we want to access, and the HTTP method (GET, PUT, POST, DELETE) that determines what we want to do with that data type.ActionDescriptionGETRetrieve dataPOSTCreate dataPUTUpdate dataPATCHReplace dataDELETEDelete dataThe table above shows the most common HTTP methods used in an API call.

To learn more about what an HTTP method is from a more technical perspective, check out our guide on How RESTful APIs work and HTTP methods specifically.Next we will look at how to set up some common requests.​PreviousData API Privacy RulesNextData API requestsLast modified 1mo agoCopy linkOn this pageIntroductionRoot URLNo custom domainCustom domainThe Data Type URLNo custom domainCustom domainThe HTTP Action









Tips When Programming - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsThe BasicsHandling ConditionalityUsing Custom EventsTips When ProgrammingUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookTips When ProgrammingAs your app gets more complex, some pages may start having many workflows. A few tools have been added to Bubble's Workflow tab to help you organize your workflows.Our Academy quick tip on how to color code your workflowsKeeping your workflows organizedIt can be useful to organize your workflows in folders, for instance, navigation workflows, data operation workflows, etc. You can click on the arrow next to the Tabs bar to reveal the Folders View. You can see the different folders that you have created, or create new folders, or delete them.Once a folder has been created, you can assign each workflow a folder. Clicking on a folder will show workflows in this folder. You can also assign a color to a workflow. The color of the workflow is purely visual, and does not have any impact on the execution of your workflows. It can be helpful to assign specific colors to some workflows to help organize your page.Bubble generates automatic names for events and actions, but it can also be helpful to modify these names by clicking in the title bar of the Property Editor. Similarly to elements, naming workflows will prove to be useful in the long run.Using shortcutsYou will find yourself going back and forth between the Design and the Workflow tabs as soon as your workflows rely on page elements. You can use the contextual menu (right click on an element or an event or action) and pick either 'Reveal workflow' or 'Reveal element'. This will highlight in the editor the workflow or the element that is linked to the element you're editing.The button 'Start/edit workflow' in the Property Editor for some elements is another shortcut to be taken to the Workflow tab and see the workflows that are running when the user interacts with the current element. If no workflow exists, such a workflow will be created.PreviousUsing Custom EventsNext - User manualUsing PluginsLast modified 1yr agoCopy linkOn this pageKeeping your workflows organizedUsing shortcuts









The Component Library - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookThe Component LibraryThe Component Library is a collection of pre-built User Interface (UI) components that can be dragged and dropped onto your page to help you build beautiful interfaces faster. These UI components are fully responsive and are made up of containers, visual elements, and form inputs that can be individually customized once added to your page. Each component is a fully independent unit, but can be connected to each other or other parts of your app by adding workflows and data. This guide will show you how to use these components to build a beautiful landing page in seconds and how to wire up the Signup and Login forms for full user authentication.Build with componentsThe UI components in the Component Library allow you to build a fully responsive and customizable app in seconds. First, change your page layout to a Column container layout type in the page's Property Editor. This will allow your components to stack vertically when added to your page and the content to resize appropriately as the screen width changes.Next, drag any number of components onto your page, one below the other. When dropping your component onto your page, the blue indicator on the editor canvas will tell you where it will land. Components can be added within other groups, so make sure the blue indicator is at the very bottom of the last container.Once you are done adding components, you will have a fully responsive landing page that can be customized to your liking.Customize your componentsNow that the skeleton of your landing page has been built, each element can be customized to your liking. For example, you can change the text in any of the text boxes or buttons by selecting the element and updating its Appearance or replace any of the placeholder images by selecting the image and uploading a new one. As you add additional pages to your application, you can update the placeholder links on your page to navigate to those pages by adding a Go to page workflow action when the link is clicked.To change the overall look and feel of your landing page, you can customize the font and color variables in the Style Variables subtab in the Styles tab. Since the font and colors used in each element is connected to a Variable, any changes made on the Style Variable level will cascade through your app automatically. Adjust the Style Variables so that your landing page matches your brand.Adding workflows for User AuthenticationUser Authentication is the foundation for almost every web application. By using the Header and Signup/Login components, you can set up a fully functionally signup and login flow in a handful of clicks.Once you've added the Header and Signup/Login components onto your page, you'll need to connect the Signup and Login buttons in the Header to show the Signup/Login popup or the Signup/Login page, depending on the component you selected. Most of the workflows have already added to help you get started.Open the workflow tab of the page that contains the Signup/Login component, and you'll see two workflows titled "When an element is clicked." The first workflow will control the Signup form and the second workflow will control the Login form. Select the first workflow event and change the element to "Button signup (Header)." This connects the Signup button to the workflow that opens the Signup Form. Similarly, in the second workflow event, change the element to "Button login (Header)" to connect the Login button to the workflow that opens the Login Form.To sign the user up, start a workflow from the Signup button in the Signup form and add the "Sign the user up" workflow action. Here, you'll map the email input's value and password input's value to the workflow parameters so that the workflow action can register those two fields. Next, we need to add a new field to the User data type so we can capture the name of the user on signup. On the data tab, select the User data type and add a new Field of type text called "Name". Going back to the signup workflow, add a new action after "Sign the user up" called "Make changes to Current User". Here, you'll map the Name parameter to the Input Name's value to update the user you just signed up with the name they entered.As you continue building your app, you can add additional workflows here to navigate the user to the proper page after they sign up, or any other logic that your application needs.To connect the Login button, start a workflow from the Login button and add the "Log the user in" workflow action. Just like with Signup, you'll map the email and password input's value from the Login form to the Email and Password parameters. As you continue building your app, you can add additional logic here depending on what you want to happen after a user logs into your app.There you have it, your landing page is now connected to a full user authentication workflow!​PreviousTemplatesNextImporting from FigmaLast modified 21d agoCopy linkOn this pageBuild with componentsCustomize your componentsAdding workflows for User Authentication









Handling Conditionality - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationUsing Page SlugsUsing Reusable ElementsHandling ConditionalityBuilding Dynamic ExpressionsBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookHandling ConditionalityYou can control how page elements behave and appear under certain circumstances, for instance, show a 'Log out' button if the user is logged in, or change the color of a button when the user hovers it. You define these conditions and the properties to be altered in the Conditional tab of the element's Property Editor. Defining conditionsWhen you edit an element (by double-clicking on it), you can see the Property Editor. The Appearance tab defines the general behavior of the element, and the Conditional tab is where you can define some conditions that will apply to this element in Run-mode.A condition is composed of two different things:1.The condition itself, that defines when the properties defined in point 2 applies. In the example above, this is Current user isn't logged in.2.The properties that should be modified when the element meets the condition defined in point 1. In this case, the element will not be visible.Note that the the condition can be comprised of almost any data source, but must end up being a yes/no expression. If it does not, it will be reported as an issue by the Issue Checker. If more than one condition is true for an element, all conditions will be applied. If two conditions or more have contradictory properties (i.e. the same property is modified in different ways in two conditions or more), the last one wins. Thus, you can control the order by clicking on 'move up' or 'move down'. Previewing conditionsWhen editing an element's condition in the Editor, you can click ON/OFF to artificially put the element in that state for editing purposes. This has no effect on the element in Run-mode.Our Academy quick tip on how to preview conditions on an elementRun-mode debuggingAs an element can have more than one condition, several conditions can be evaluated to yes on the same element. You will often have to debug an element's behavior when it involves conditions to understand its behavior, we recommend using the Debugger to inspect an element and figure out which condition is evaluated to true and how it impacts the element's appearance.TransitionsWatch our Academy quick tip on how to animate changes in an element's propertiesProperty changes, when a condition's evaluation changes from no to yes, or the other way around, are immediate. If you want some properties to change gradually, you can define some transitions rules in the third tab of the Property Editor. This is useful if you want to give a more fluid feel to your user interface. For instance, in the illustration below, the background color will change from the initial value to the final value in 200 milliseconds, following an easing curve. These transitions rules can only be applied to some visual properties. For instance, changing a text of a button cannot be modified gradually, while changing its color can.PreviousUsing Reusable ElementsNextBuilding Dynamic ExpressionsLast modified 1yr agoCopy linkOn this pageDefining conditionsPreviewing conditionsRun-mode debuggingTransitions









No authentication - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationHow to authenticateNo authenticationAs a UserAs an adminThe Data APIThe Workflow APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookNo authenticationThis section covers how to set up incoming API connections that don't require any authentication.Help us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​The most basic way is to require no authentication at all. This means that any internet user who knows about your app’s API can connect and make any change they want to all the data types you have exposed in the Data API setting.While there are scenarios where this may be what you want, you should generally be very careful with this option. Keep in mind that API calls will consume your app’s capacity just like any other operation, so even if you set up an open API intentionally, you will need to consider that a high volume of calls may end up consuming a large portion of your server capacity.Don’t be tempted to think that your API is secure because no one knows its URL endpoints. The endpoints are easy to construct with just a tiny bit of information. 

Obfuscation is not security: to keep your API truly secure you need proper authentication.The Data APITo offer access to the Data API without authentication, the following settings need to be set up:1.Activate the Data API under Settings - API2.Activate the Data Types that you want to expose3.Set up a Privacy Rule on each of the data types where you check all the boxes in the Everyone Else rule, including Create via API, Modify via API and Delete via APIPreviousHow to authenticateNextAs a UserLast modified 1mo agoCopy link









The page - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersInput formsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookThe pageThe page is the blank canvas on which you design your app's user interface.At the core of everything related to design and user interface in Bubble is the page.This is the canvas on which you place input elements, text, images, icons, videos and everything else that your users need to make use of your application.The page gives you a blank canvas on which to build your vision.What is a page?No matter what kind of application you want to build, from a simple website to a complex e-commerce platform, the page remains the starting point for all your design and development efforts. You can see the page itself as the lowest level in the hierarchy of a page's structure, where every element you add to it is contained within that page.What is a page's hierarchy structure?A Bubble page is composed of three types of components:The page
The page is the top-level component of a webpage and is responsible for organizing the groups and elements on the page.
The page is the top container for all elements
Groups:
Groups are used to group elements together and control their layout. They can be thought of as "boxes" that hold other elements. They can be styled or they can be invisible to the user and can contain Elements and even other Groups to create a hierarchy. Groups are a major part of your page's design as they determine how your other elements behave.
Groups are containers for elements and for sub-groups
Elements
Elements are the actual content that your users see and interact with to work with your app, such as buttons, links, images, icons and input fields.
Elements are the things that users interact with on the pageThe way in which these components are organized and styled determines the overall layout and design. From a technical viewpoint they make up the page's hierarchy structure.It helps to see it in a schematic form:

​In a way, the hierarchy above is how your browser "sees" the page before rendering the results on the screen.Default pagesWhen you create a new Bubble application, a few pages are included by default. These pages have a few traits in common:They are always present when your app is createdYou cannot change their namesYou cannot delete themindexThe index page is the main page of your app (more on that below)404The 404 page is where your users are taken if they type in an URL in the URL bar that includes your domain, but the page name they enter doesn't exist:https://appname.bubbleapps.io/non-existing-pageThe 404 is an http error code that is used to tell your browser that the page doesn't exists.The 404 page can be edited freely just like any other page – but it can't be deleted.You can use this page to tell your users that the page couldn't be found and point them in another direction.reset_pwThis is the page to which your users are directed if they need to reset their password. They will most likely follow a reset password email to this page.The reset_pw page is a special page that lets your users reset their password safely. It's part of Bubble's core functionality and can't be removed or renamed.​The index pageThe index page is the main page of your application – the first page that will load when a user types in your app's domain in the browser's URL bar. It's also the only page that can be displayed without showing the page's name.For example, the below URL's would take you to the index page even if you are not including the page's name in the URL:No custom domainVersionURLTest versionhttps://appname.bubbleapps.io/version-testLive versionhttps://appname.bubbleapps.ioCustom domainVersionURLTest versionhttps://www.mydomain.com/version-testLive versionhttps://www.mydomain.comSetting an index pageWhen you create an app in Bubble, the index page is created automatically. You cannot name another page index, but you can replace it by using the Make this page the new index function. The old index page will be named old_index.​The page URLEvery page that you add automatically has a unique URL assigned that your users can access to visit that page, just like any other website. All pages follow the same URL pattern: by combining the root URL of your application with the name of the page:No custom domainVersionURLTest version:https://myapp.bubbleapps.io/version-test/page-nameLive version: https://myapp.bubbleapps.io/page-nameCustom domainIf you have connected your app to a custom domain, the URL will look like this:VersionURLTest version:https://mydomain.com/version-test/page-nameLive version: https://mydomain.com/page-name​Creating a new pageTo create a new page, click the dropdown in the upper left corner of the Bubble editor, right next to the Bubble logo. In the dropdown, click Add a new page...You will be asked to provide a name for the new page and whether you want to clone an existing page.You can give your page any name you want, as long as it's URL safe and unique in this application.Naming your pagesYou can create as many pages in your app as long as they have unique names. Keep in mind when naming pages that they need to be URL safe. Any non-URL safe strings you provide will automatically be URL encoded.A simple rule of thumb for page names is to only use the english letters a-z and numbers 0-9 and replace spaces with dashes. During URL encoding, Bubble will:change the text to lowercasereplace spaces with -replace special characters with _​Cloning a pageCloning a page means to create an exact copy of that page under a new name. The entire page, including all elements and workflows will be copied.There are two ways to clone a page:By selecting Add new page...To clone a page, you can use the Add new page... menu item... or by having the page you want to clone open in the editor and selecting Edit - Clone this page:You can also clone the page by selecting Clone this page while having the page you want to clone open in the editor.Regardless of the method you choose, you will be asked to provide a name for the clone and confirm which page to clone in the page dropdown marked below:Page propertiesEach page can have their own individual settings configured that affects how that page looks and behaves. Settings are available in the Property Editor.There are two ways to access the page settings:1.Double-click with the left mouse button anywhere on the page itself (avoid clicking on another group or element2.Clicking on the page in the page's element tree:Using the element tree you can easily access the Property Editor of the page – or any other element.​For the full list of all the settings for the page, see our page settings quick reference.​The page's settings are available in the Property Editor, as illustrated below:AppearanceThe Appearance tab lets you control the visual properties of the page, such as the background style and colors, as well as what kind of data the page should hold and its SEO metadata.LayoutThe Layout tab lets you control the page's responsive properties, or how it's layout is structured and changes across different screen sizes. You can read more about layouts in our guide on responsive design.ConditionsThe Conditions tab lets you change the Page title and background styling if one or more certain conditions are true. You can read more about this in our article on Conditions.​​Organizing your pagesPages can be organized into folders in the Bubble editor to make them easier to find.Organizing pages into folders makes it easier to find the pages you need to open in the editor, but they do not affect the URL or navigation experience of the page in your app. Adding a page to a folderTo move a page into a specific folder, do the following:Open the Property Editor for the page by double-clicking anywhere on the page itself (not on another group or element)In the Property Editor, navigate to the Appearance tab and scroll to the bottom:
​Pick a folder, or create a new one. You can leave the dropdown blank to remove it from a folder.

Navigating your foldersYou will find all the folders you create in the upper right corner of the page navigator (which is located in the top left corner of the Bubble editor).Folders let you organize the pages in your app to make them easier to find. Folders do not affect the URL of the page in your Bubble app.Frequently asked questionsCan I add page folders to my URL structure?Bubble does not support page folders in your app's URL's. As such, all pages follow the same structure as described above.Can I publish and un-publish pages?All pages are public, meaning that as soon as you have created one, they can be accessed in your app. Keep in mind that changes need to be deployed before they are visible in your live app – this applies to pages too.​PreviousThe element treeNextVisual elementsLast modified 21d agoCopy linkOn this pageWhat is a page?Default pagesThe index pageSetting an index pageThe page URLCreating a new pageNaming your pagesCloning a pagePage propertiesAppearanceLayoutConditionsOrganizing your pagesAdding a page to a folderNavigating your foldersFrequently asked questionsCan I add page folders to my URL structure?Can I publish and un-publish pages?









Data API requests - Bubble Docs











Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationThe Data APIData API Privacy RulesData API endpointsData API requestsThe Workflow APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookData API requestsThis section covers the different requests that you can make with the Data API.Help us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​This section takes a long-form look at how you can set up different requests using the Data API.

If you are familiar with API’s and want the short-form technical documentation, you can go to the list of Data API requests in our reference section instead.Bubble's Data API gives external systems such as other applications access to read, create, edit and delete records in your app’s database.Example applicationBefore we move into the different requests, we'll imagine an example application that we'll reference throughout this section:Imagine we are building a platform that allows property owners to manage their rental units. To keep our examples very simple, we are just adding a few fields to a data type called Rental Unit:Field nameField typeUnit nametextUnit numberNumber (integer)Unit addressgeographical addressYou can set up the call from any system you prefer, but for these examples we’ll use a tool called Postman to send the requests to our Bubble app. What is Postman?Postman is a tool that allows you to test and document APIs. It provides a user-friendly interface for sending HTTP requests and viewing the responses, and includes features such as saving and organizing requests, automated testing, and support for various authentication methods.

We recommend using it to test both incoming and outgoing API requests in your Bubble applications. You can set up an account here.Creating a thingThis is the in-depth manual entry for this Data API request. For the short-form technical reference, see this entry.The first thing we’ll do is to use the Data API to create a new rental unit. The process will look as follows:A POST request is sent from Postman to the rentalunit endpointOur Bubble app receives the request and processes itA new rental unit is createdOur Bubble app sends a response back to Postman to let us know that the request was successfulLet’s also quickly go over how the API is structured:The URL points to the resource we want to accessThe HTTP method we use is POST since we want to create somethingThe header contains the bearer token that is used to authenticate us, as well as the format of our body (JSON)The body contains the parameters that we want to save in the rentalunit (unitname, unitumber and address)

RequestIn Postman, we’ll create a new request and name it ‘Create Rental Unit’. The name is just for you to organize your different requests. In the URL bar, we’ll enter the root URL combined with the typename:https://myapp.bubbleapps.io/version-test/api/1.1/obj/rentalunit
Next, we’ll need to add the parameters we want to include when we create the new rental unit:KeyValueUnit nameUnit AUnit number3Unit address33 Nassau Avenue, Brooklyn, NY 11222Note that the last field, the Unit address, needs to be a valid Google Maps address. For testing purposes you can use the address in the example or copy/paste one from Google Maps.In Postman, our call should look like this:In this screenshot you can see the HTTP method (GET), the endpoint and the parameters we want to send.Now we are ready to test the request in Postman by clicking the Send button.

If you are curious to see the API structure, this is what’s being sent to your app’s server:HeaderAuthorization: Bearer <token>User-Agent: PostmanRuntime/7.30.0Accept: */*Cache-Control: no-cachePostman-Token: <token>Host: myapp.bubbleapps.ioAccept-Encoding: gzip, deflate, brConnection: keep-aliveBodyUnit name: "Unit A"Unit number: "3"Unit address: "33 Nassau Avenue, Brooklyn, NY 11222"jResponseWhen a request has been processed by the Bubble server it will send a response back to the client with a success or error code, as well as any relevant information connected to the request. In the case of this request, two pieces of data are sent back to the client:

A status on the request (Success)The Unique ID of the rental unit we createdThis too is sent in JSON format and looks like this:{ "status": "success", "id": "1672236233855x229135430406542270"}​Making changes to a thingThis is the in-depth manual entry for this Data API request. For the short-form technical reference, see this entry.Now it’s time to make some changes to the rental unit we just created. As you may have guessed, there’s an important difference between these two calls: since we now want to make changes to a specific thing, we need to identify that thing in the request.Luckily we have a unique ID from the response of our last POST request, so we can use that to find the correct unit and make changes to it. When we search for a database thing by its Unique ID field, it’s often called a lookup.So let’s look at what kind of steps the process will be going through this time:A PATCH request is sent from Postman to the rentalunit endpoint including a unique IDOur Bubble app receives the requestThe server performs a lookup on the Unique IDThe changes are made to the rental unitOur Bubble app sends a response back to Postman to let us know that the request was successful
RequestIn Postman, change the HTTP method from POST to PATCH and then add the unique ID of the rentalunit we created earlier after the typename. The full URL should look something like this:
https://myapp.bubbleapps.io/version-test/api/1.1/obj/rentalunit/Now navigate to the parameter section and make some additional changes. We can remove the Unit number and Unit address fields since we only want to change the name for now. That should leave you with just one parameter:

KeyValueUnit nameNew nameIn Postman, the request settings should look like this:Note that we have changed the HTTP method to PATCH.Now let’s try that by clicking the SEND button.ResponseWith this kind of action, we don’t need any response except to know whether it was successful. After all, we already know which record we are making changes to, so there’s no need for the server to send the unique ID.In this case your Bubble app will respond with a status code of 201 and an empty body.

Bulk creating thingsThis is the in-depth manual entry for this Data API request. For the short-form technical reference, see this entry.The requests we have set up so far have worked on single records; we have created one new thing and made changes to one thing.In this scenario we are going to create several things in one request using the Data API’s bulk feature. This is a very powerful feature that allows you to create a list of things in your database very fast.The bulk creation feature is the fastest way to create a list of things, but you should be mindful of your app’s capacity when bulk creating database records since it can consume a lot of server capacity.There’s a hard limit of 1000 records when using the bulk create feature. Additionally, if the request takes more than 4 minutes to process it will time out and be canceled.RequestSince we are creating something we will still be using the POST HTTP method. We need to make a change to our endpoint to tell our Bubble app that we want to create multiple records. We’ll add the word bulk to the endpoint, making it look like this:

POST https://myapp.bubbleapps.io/api/1.1/obj/rentalunit/bulk
The next change we need to make is to tell Bubble that we’re formatting our parameters as text rather than JSON. To change this, go to the Body section and choose Raw as the format. Then check the dropdown all the way to the right and set it to Text. If you now go to Headers you should see the Content-type having changed to plain/text.We’ll also need to change the formatting of the parameters we are sending. This time, we’ll use the full data type name (i.e. Rental unit instead of rentalunit) and we’ll use one line for each record that we want to create. Include all parameters that you need, and any fields left out will be empty in the created record (or their default value if they have one).In the Body section, write out your fields in this structure:{“Field1”: Value, “Field2”: “Value”}{“Field1”: Value, “Field2”: “Value”}For our rental units, it should look like this:{"Unit name": "New apartment", "Unit number": 5}{"Unit name": "Old apartment", "Unit number": 6}Note that strings need to be in quotation marks but numbers (integers) don’t.

Note that we have added  bulk to the endpoint and changed the body type to RAW - TEXT.ResponseWhen using the bulk feature, Bubble will give you one line of response for each item that you have tried to create. For our example above, the response is as follows:{"status":"success","id":"1672396136196x664154886510492300"}{"status":"success","id":"1672396136197x330332849009372400"}As you’ll recall, this is the same response as we got when creating a single rental unit, just with multiple lines. If we were to mess up one of our lines, we would get an error message for that particular line:{"status":"error","message":"Could not parse as JSON: {\"Unit name\": \"New apartment, \"Unit number\": 5}"}{"status":"success","id":"1672396782256x592646320029190300"}In this example a quotation mark was left out after New apartment making it impossible for Bubble to parse it. As you can see, record number two, which was correctly formatted, was still created.Searching for thingsThis is the in-depth manual entry for this Data API request. For the short-form technical reference, see this entry.In this example we’ll be doing nearly the same things as the last one, but with a slight alteration: rather than performing a lookup (directly identifying the record by its Unique ID) we’ll perform a search (looking for one or more records that match our criteria).When setting this up, it helps to think about how Do a search for is structured: we need to tell what data type we are searching for, and we need to add constraints to narrow the search down. The Data API works in exactly the same way.RequestFirst, let’s think about the HTTP method: as we want to find data rather than making changes to it, we’ll be using the GET method. Since we are still searching for rentalunits, we’ll use the same endpoint as in our last request, except we’ll remove the Unique ID.Now, let’s set up our constraints. In the database we have six rental units numbered sequentially. We’ll use the unitnumber field to search for units that have a number higher than 3 and a name that contains Unit. You can find a list of all constraint types in our Data API reference.In the params section we’ll add one parameter called constraints. We’ll then add our constraints with the following format:[ { "key": "unitname", "constraint_type": "text contains", "value": "Unit” } ,{ "key": "unitnumber", "constraint_type": "greater than", "value": "3" }]Let’s break down the logic of that snippet:There are two constraints, each wrapped in curly bracketsEach constraint contains three data points:Key: the name of the field we want to apply the constraint to (unitname)Constraint_type: the type of constraint we want to apply (text contains)Value: the value we’re looking for (Unit)Each data point is separated by a comma and wrapped in quotation marksEach constraint is also separated by a comma, and the full parameter is wrapped in square brackets.

Now let’s run it.

ResponseHere’s what Bubble returns:{ "response": { "cursor": 0, "results": [ { "Modified Date": "2022-12-30T11:03:11.097Z", "Created Date": "2022-12-30T11:03:11.097Z", "Created By": "admin_user_securitybook_test", "Unit name": "Rental unit 4", "Unit number": 4, "_id": "1672398191097x872601726695236800" }, { "Modified Date": "2022-12-30T11:03:11.098Z", "Created Date": "2022-12-30T11:03:11.098Z", "Created By": "admin_user_securitybook_test", "Unit name": "Rental unit 5", "Unit number": 5, "_id": "1672398191098x642899010515676700" }, { "Modified Date": "2022-12-30T11:03:11.099Z", "Created Date": "2022-12-30T11:03:11.098Z", "Created By": "admin_user_securitybook_test", "Unit name": "Rental unit 6", "Unit number": 6, "_id": "1672398191098x774874860707789600" } ], "count": 3, "remaining": 0 }}As you can see, JSON is an easy-to-read format. We can clearly recognize the data and their fields from our Bubble database. The count value shows the number of results in this response, and the remaining value shows how many records are left (Bubble will return 100 records by default, but you can also set the number you want returned with the pagination feature).PaginationPagination means to divide up the search results into “pages” – smaller, more manageable chunks of data. The Data API splits results into pages of 100 records by default, but you can set up pagination to work in the way you want by providing a few more parameters.To set up pagination, we need two more parameters:Cursor: Where to start the list (similar to items from # in the Bubble editor)Limit: How many results you want back (similar to items to # in the Bubble editor)You add this just like you did the constraint parameter in the last example. In Postman, go to the Params section and add two new rows of parameters: cursor and limit. Let’s say we want to get results from the 2nd record to the 5th, we provide a cursor value of 2 and a limit value of 3.Bubble will respond with 3 items, starting from item #2. It will also provide the remaining value, which can be used as the cursor to fetch the next page of items.SortingJust like Do a search for, the Data API can also be set up to sort the results based on a parameter of your choice. To apply sorting, use the following two parameters:Sort_field: the field you want to sort byDescending (true/false)You can also apply one or more layers of sorting after the first one by using the additional_sort_fields and supplying an array of sort fields just like we did with constraints. For example, if we wanted to sort by the unitnumber and then the unitname, our parameter would look like this:additional_sort_fields[ { "sort_field": "unitname", "descending": "false"}]PreviousData API endpointsNextThe Workflow APILast modified 1mo agoCopy linkOn this pageExample applicationCreating a thingRequestResponseMaking changes to a thing
RequestResponseBulk creating thingsRequestResponseSearching for thingsRequestResponsePaginationSorting









Responsive design - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingResponsive designBuilding responsive pagesLegacy articlesTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookResponsive designWhat is responsive design?Responsive design is a method that gives your users a great experience no matter what kind of device they are using to access your app.

Responsive design ensures your app looks as intended on all resolutions and screen sizes by adjusting the layout and content to fit properly.
Instead of having to set up separate pages for different devices, the goal of responsive design is to create a single page that automatically adjusts its layout and content to fit the screen size and resolution of the device being used to access it.Responsive design is important for several reasons:It gives the broadest number of users access to your app as they can access from all types of devicesIt reduces development time since you don't need to design and maintain separate pagesSearch engines tend to favor pages that are accessible on all devices which can help these pages rank higherBubble's responsive engineBubble features a design environment that lets you control every aspect of your app's responsiveness in the same visual editor that you use to build your pages. It uses a grid-based layout to change the appearance of the page depending on the screen size and orientation of the device.For example, on a larger screen like a desktop computer, your page might have a three-column layout with a navigation menu, main content area, and a sidebar. But on a smaller screen, such as a smartphone, the same page might rearrange its content into a single column layout with a "hamburger" menu icon to access the navigation.In the next article we'll explore the basics of how this design method works.Building responsive pagesVideo lessonsWe have several video lessons that can help you learn about designing responsive pages.​Understanding the column container layout​​Understanding the row container layout​​How to build a sidebar layout​​How to build a responsive navigation bar​​Dragging and dropping elements in the element tree​​Layout and sizing properties in Conditionals​​Padding in a container element​​Scrolling overflowing content​​Gap spacing for row and column layouts​​How to use the align to parent container layout​You'll find our full Youtube playlist about the responsive editor here.Bubble's responsive engine is a feature that was introduced in 2022. In older applications you may need to activate the feature on a page-by-page basis and convert those pages to the new engine.​PreviousCustom FontsNextBuilding responsive pagesLast modified 22d agoCopy linkOn this pageWhat is responsive design?Bubble's responsive engine









Application & Data Ownership - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereThe BasicsThe Application EditorThe Application Editor (Legacy)Building Your First AppStrategies to Learn BubbleApplication & Data OwnershipChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookApplication & Data OwnershipIntellectual property ownershipThe basic rule is you own your data. This includes the design of your application and the data that your users upload (pursuant to your own agreement with them, of course). What Bubble owns is the code that runs your application, which is not app-specific. This is similar to the fact that Microsoft owns Microsoft Word, but does not own the books written with it.Exporting your application & dataWe support automatically exporting user-created data in the form of CSV files. You can also use the Bubble API and write some scripts to read your data in an automated, more scalable way.Bubble apps can only be run on the Bubble platform; there's no way of exporting your application as code. If you decide to move off the Bubble platform, you'll have to rebuild the application logic, although we can help you export the design. We'll do our best to help you leave if you want to. Our goal, though, is for Bubble to grow with your app. Via our Javascript and API integrations, you'll never hit a hard limit of the system. Our Dedicated Plans let you have a dedicated cluster only for your apps, maintained by us, and you can scale as your business grows independently from other Bubble applications.Finally, we want to make sure you feel secure about building on the Bubble platform, so, although we plan to be around for a very long time, here's our guarantee: if for some reason we ever have to close down shop, we will release the Bubble source code under an open-source license so that you can set up your own Bubble server and keep your app running.PreviousStrategies to Learn BubbleNextChangelogLast modified 1yr agoCopy linkOn this pageIntellectual property ownershipExporting your application & data









Templates - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookTemplatesTemplates allow you to import a pre-made app to get started with your project quickly. This is not just a design feature, as templates include both the design and workflows. The purpose of a template is to give you a more or less complete application of a given type to kickstart your project.Templates cover a wide range of categories:BlogCRMDashboardGame Landing PageMarketplaceOnline StorePortfolioSocial Directory & ListingsProfessional ServicesOn-demand ServicesProject ManagementBuilding BlocksOtherHaving a look through the templates section before starting an app from scratch can be a good idea, as many app categories start out with the same framework, and you can build additional features on top of it. Using a template does not restrict your ability to customize it at all – it just gives you a faster start and you may avoid having to repeat tasks that others have done before you, such as setting up signup/login forms.Note that you cannot add a template into an app after the app has been created.Templates are found on the Templates page.Creating an app using a templateOn the Templates page you can browse templates in different categories and pick one that suits your project. Clicking a template will give you a notification like the one below, and when you click Use now a new project will be created with the chosen template applied.Reviewing TemplatesWhen an app is created with a template, you will be able to review the template in the Editor (or in the template page). You will also be able to reveal your email to the template owner, which is useful if you need an answer. As the Ecosystem grows, it is important for the Community to regulate and provide feedback. We appreciate your help.To leave a review, go the Template tab.Rules and LicensePlease review our Marketplace Policies.PreviousTips When Designing (Legacy)NextThe Component LibraryLast modified 21d agoCopy linkOn this pageCreating an app using a templateReviewing TemplatesRules and License









Working with Location Data - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookWorking with Location DataMaps and geolocation features in Bubble rely on Google APIs. Once your app uses your own domain, it will require your own Google API keys in the Settings > General > "General services API Keys" section. This guide covers how to obtain your own keys.Tip: The Google API gets used for timezones as well as geographic addresses, so if you're using "Current user's timezone" or addresses anywhere in your app, go ahead and update these keys.Note: In May 2020, Google changed its APIs to split off timezone capabilities (previously part of a bundle of Geocode capabilities) into its own API. This means you will have to add the Time Zone API to the capabilities of your app when registering it with Google.Our Academy tutorial on how to set up Google API keysSet up your app in Google Developers ConsoleYou first need to set up your account in the Google Developers Console - this tells Google about your app and is how Google will know which APIs your app is allowed to invoke.Visit the console here. You will have to log in; you may also have to provide billing details, which is a requirement from Google.First, create a "project" in Google that corresponds to your Bubble app; your interface may look something like this:​Then, with that project active (i.e. name showing in the topbar), click on the menu icon in the upper left > APIs & Services > Library:​In the Library, search for the following APIs and "Enable" each one:Geocoding APIPlaces APIGeolocation APIMaps JavaScript API(New in May 2020) Time Zone APICreate and set up your new keysNow visit the menu icon in the upper left > APIs & Services > Credentials. Create 2 new API keys (in the "Create credentials" button), and edit one of them to be called "Client" and the other to be called "Server".We now want to apply some restrictions to the keys as a form of security.Click into the Client key's settings, and under "Application restrictions", choose "HTTP referrers (web sites)". Then under the "Website restrictions" section, add your Bubble app's URL, for instance like "https://appname.bubbleapps.io/*". This restriction means that only your Bubble app can use the Client key. The "*" is a "wildcard" which means that any URL starting with "https://appname.bubbleapps.io/" will be accepted.Then, click into the Server key's settings, and look at the "API restrictions" section. Choose "Restrict key", and then in the dropdown, select all 5 of the APIs you enabled above. This restriction means that the Server key can only use these 5 Google APIs. (New in May 2020 - Note that now you must enable all 5 of the APIs, whereas before there were only 4 to enable.)The keys are now all set to be used! In a different tab, go back to your Bubble editor and go to Settings > General. In the "General services API keys" section, copy and paste the Server key into the "Google Geocode API key" box, and the Client key into the "Google Map API key" box. You should now be all set up.Further notes on the Google sideThe generic instructions provided by Google for setting up an API key are here for Maps and here for Geocode; the instructions on this Manual page are accurate as of January 2020, but as Google updates their interface, please refer to their official documentation as neededIn order to use these APIs, you may need to set up a billing account with Google Cloud and connect your Google project with that billing accountNote that changes in a Google project configuration can take a minute or so to propagate and take effectWatch outBecause Bubble uses the Google Maps API, there are some inconsistencies in Google Maps data that will reflect in the app. For example, for some (non-US) addresses, the "city' field is actually the name of the neighborhood / area. To help mitigate this, try adding a Map element (even a hidden one) that takes as its value the value from a SearchBox input - the Map will place the pin correctly, and then its "center" might yield more accurate data about that location.PreviousThe database editorNextUsing AlgoliaLast modified 1yr agoCopy linkOn this pageSet up your app in Google Developers ConsoleCreate and set up your new keysFurther notes on the Google side









Changelog - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookChangelogThis page documents changes that we make in the documentation.Major updatesFebruary 20th 2023
Design sectionWe have revamped all user manual sections focusing on design and changed the structure of the navigation.Building a user interfaceThis section has been removed and articles merged into the new Design section.DesignA new section has been created that covers all subjects related to design and user interface in Bubble. The Design section introduces new sub-sections that each cover their subjects in greater detail and with more illustrations than earlier:Elements: this covers the different elements and what they are used for, including the page itselfStyling: this covers the different styling tools Bubble offers: color/font variables, styles and how to use custom fontsResponsive design: this section covers the responsive engine in a lot more detail than before. Legacy articles have now been moved into a separate sub-section as the old engine is gradually being phased out.Templates/Component Library/Figma Import: these sections have also been expanded.January 29th 2023
API sectionWe have added a long list of new articles detailing the use of the Data API, Workflow API and the API Connector. You can read more about this update in this forum thread.Major updatesWe have launched three article series that covers APIs from different perspectives:Introduction to APIsThis article series explains how APIs work in general both in and outside of the Bubble sphere. We hope it will make it easier for new users to understand the underlying technology and in turn have an easier time grasping different settings and external API documentation.
Link​The Bubble APIThe Bubble API lets you accept incoming API connections and consists of the Data API (exposing database data to external applications) and the Workflow API (exposing API Workflows to external applications) and this series details what they are for, how to set them up and how to access them from external systems.
Link​The API ConnectorThe API Connector is how you make outgoing API connections to access data and workflows in external apps. This series explains the different settings and authentication methods.
Link​​Updated articlesUser manual:https://manual.bubble.io/help-guides/apis-connect-to-other-appshttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/introduction-to-apishttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/introduction-to-apis/what-is-a-restful-apihttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-apihttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/authenticationhttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/authentication/how-to-authenticatehttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/authentication/no-authenticationhttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/authentication/as-a-userhttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/authentication/as-an-adminhttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/the-data-apihttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/the-data-api/data-api-privacy-ruleshttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/the-data-api/data-api-endpointshttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/the-data-api/data-api-requestshttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/the-workflow-apihttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/the-workflow-api/workflow-api-privacy-ruleshttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/the-workflow-api/workflow-api-endpointshttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/the-workflow-api/api-workflowshttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/the-workflow-api/api-workflows/creating-api-workflowshttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/the-workflow-api/api-workflows/scheduling-api-workflowshttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-bubble-api/the-workflow-api/api-workflows/recursive-api-workflowshttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-api-connector https://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-api-connector/authenticationhttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/the-api-connector/case-google-translatehttps://manual.bubble.io/help-guides/apis-connect-to-other-apps/api-glossaryCore referencehttps://manual.bubble.io/core-resources/api/the-bubble-api/the-data-api/data-api-requestsMinor updatesFebruary 21st 2023
Stripe custom domainsWe have added information about using custom domains on Stripe checkout. The instructions have been added to the FAQ section of the Stripe plugin reference section.March 1st 2023
Blockspring plugin update
Send confirmation email workflowBlockspring plugin updateUnfortunately, Blockspring has ceased operations as of December 2022. We have updated the documentation for the plugin to reflect this.Send confirmation email workflowWe have made an update to the way the Send confirmation email workflow to reflect the new Just make token, don't send email feature that allows you to generate the token without sending the email.​PreviousApplication & Data OwnershipNext - User manualDesignLast modified 12d agoCopy linkOn this pageMajor updatesMinor updates









The element hierarchy - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe element treeThe pageVisual elementsContainersInput formsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookThe element hierarchyThis section covers the logic of the hierarchy that is structured on your page as you add elements to it.A Bubble page is composed of three types of components:The page
The page is the top-level component of a webpage and is responsible for organizing the groups and elements on the page.
The page is the top container for all elements
Containers/Groups:
Groups are used to group elements together and control their layout. They can be thought of as "boxes" that hold other elements. They can be styled or they can be invisible to the user and can contain Elements and even other Groups to create a hierarchy. Groups are a major part of your page's design as they determine how your other elements behave.
Groups are containers for elements and for sub-groups
Elements
Elements are the actual content that your users see and interact with to work with your app, such as buttons, links, images, icons and input fields.
Elements are the things that users interact with on the pageThe way in which these components are organized and styled determines the overall layout and design. From a technical viewpoint they make up the page's hierarchy structure.It helps to see it in a schematic form:


In a way, the hierarchy above is how your browser "sees" the page before rendering the results on the screen.PreviousElementsNextThe element treeLast modified 22d agoCopy link









Bubble as a backend - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookBubble as a backendBy Robert Brooks, Founder & CEO, MVP.devVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!In this guide, Bubble.io will be used as a backend service with an Arduino board to capture sensor data for a pump in a remote area. The module will monitor the pump and receive alerts if the pump fails or if the sensor data indicates a problem, and send the data back via satellite communication.  The data captured by the Arduino board will be saved in Bubble.io using REST API calls, as well as storing configuration data.  The module can also be used to remotely control the pump, turning it on or off as needed.Bubble is great in these sorts of backend as a service scenarios for quick proof of concept builds, or even production ready solutions.  Create the data types and making them available via API is extremely quick and easyData types recommendedThe Bubble backend solution will be storing configuration information, pump status data, as well as time series data for the historical record of each pump.  Data types will be Users, Pumps, Configurations, Alerts, and Pump HistoryUsersThe users data type stores information about the users that have access to the Bubble platform to make configuration changes, turn the pumps on and off, monitor alerts, and view historical data.Suggested fields on this typeEmail - textFirst Name - textLast Name – textRole – Roles: Option set that defines the access level the user has to in the database and app; this will be used for the privacy rules of many other data typesAnd any other fields that might be relevant for platform usersPrivacy rules for this data typeUsers can:View all fields except the following:SlugCreated DateModified DateFind this in searchesView attached filesUsers with the Admin role can view all fields for all users, as well as find in searches, and view attached filesPumpsA pump is the unit being controlled in the field to monitor pumps, send commands, and capture alerts.Suggested fields on this typeName – textLocation – text: lat/long coordinates of the pump; alternatively, this could be stores as a geographic address if that’s granular enough for our use caseStatus - textActive – yes/noPrivacy rules for this data typeUsers with the Pump Tech and Pump Admin roles can:View all fields except the following:Created DateModified DateFind this in searchesView attached filesConfigurationsConfiguration settings for each pump. Though this could be included in the Pumps data type, we’re using a separate data type so that a group of pumps can have the same configurations and for learning purposes.Suggested fields on this typeName – textPumps – List of Pumps: A list of pumps to which these configurations applySchedule – date range: time the pump will turn on and offPercentOpen – number: number from 0-100 to determine how much the pump may be throttledThreshold – number: fault tolerance before an alert is triggeredActive – yes/noPrivacy rules for this data typeUsers with the Pump Tech and Pump Admin roles can:View all fields except the following:Created DateModified DateFind this in searchesView attached filesAlertsInfo about alerts triggered by a pump are stored here.Suggested fields on this typePump – Pumps: The pump that generated the alertDescription – textAlert Type: Alert Types: Option set for the type of alert triggeredSeverity: number: A range of 1 – 5 that is sent by the Arduino controller that measures the severity of the alertPrivacy rules for this data typeUsers with the Pump Tech and Pump Admin roles can:View all fields except the following:Created DateModified DateFind this in searchesView attached filesPump HistoryPumps are polled hourly and the information is stored here for future reference.Suggested fields on this typePump – Pumps: The pump this record belongs toTitle – textDescription - text: This stores whatever information you want to log each hourPrivacy rules for this data typeUsers with the Pump Tech and Pump Admin roles can:View all fields except the following:Created DateModified DateFind this in searchesView attached filesOption sets recommendedRolesPump TechPump AdminAdministratorSets the access level the user has to the platformAlert TypesPump OnPump OffPump FailurePump WarningList of alerts the pumps can generateAdditional notesThere are unlimited scenarios and use cases for using Bubble as a backend.  From API Management, to BLE RFID data storage, to unmonitored task execution, the possibilities are only limited by your imagination.About MVP.devAt MVP.dev, we help business owners harness the power of no-code technology to bring their vision to life in weeks through a high-touch proven process.Rather than holding your tech hostage through a drawn-out and mysterious process, we’re passionate about partnering and collaborating with you every step of the way — from idea to design to development to delivery.We lean on your vision and our experience to create a truly unforgettable experience and product.PreviousBuilding Block AppsNextFilesLast modified 11mo agoCopy linkOn this pageData types recommendedUsersPumpsConfigurationsAlertsPump HistoryOption sets recommendedRolesAlert TypesAdditional notesAbout MVP.dev









CRM Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookCRM AppsBy Petter Amlie, founder of Amlie SolutionsVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!In this example, we are building a CRM or Customer Relationship Management software. This is used by organizations to keep track of their clients, vendors and contacts.Well-known CRM examples are Salesforce, Insightly, Zoho CRM and SuperOffice. We’re going to set up a CRM that allows multiple clients to work in the same software without seeing each other’s data (typically called a SaaS model), and this will be reflected in some of the ways we structure the Data and Privacy Rules. What this means in practice is that I, as a paying client, will only have access to see and make changes to my own data, and I can trust that nobody else has access to my data.Additionally, the way we set it up allows for multiple Users for each client, since the client will typically be a company itself. This way, an account owner can invite their team into your CRM platform to collaborate on sales processes and customer management.Data types recommendedWe’ll be working with a fairly simple set of Data Types to show the principles behind the multi-client CRM model. This could easily be extended with more Data Types (such as Deals, Projects, Tasks and Meetings) using those same principles. Most Contacts and Companies added to the platform will start their life-cycle as a Lead, that then becomes a Contact and/or Company as it moves through the sales process.ParentOrganizationThe ParentOrganization is the organization that your app’s Users belong to. For example, I might register as a company called Acme Inc. and add all my 25 employees to that ParentOrganization. Those 25 employees will then have access to only data that belongs to their ParentOrganization, and nothing else. To make this happen, we need to add the ParentOrganization to all other Data Types and set up Privacy Rules for each of them.The ParentOrganization is created when the first user in that organization registers in your application, and then that User invites their team to that organization.In principle, this organization only needs a name; we can set up the Data Type as below:Suggested fields on this typeName (text)Owner (User) - this will be the User who first registered the account and is the owner, or admin, of itPrivacy RulesAs we explored earlier, the ParentOrganization makes up the primary security “fence” of your application: all Users should only be able to access data that belongs to their ParentOrganization. This also means that we need to keep the ParentOrganization itself private: Users outside of my organization shouldn’t even know that we have an account. So let’s set that up like this:If this ParentOrganization is Current User’s ParentOrganization, this User can:View all fields: yesFind this in searches: yesView attached files: yesAllow auto-binding: noOk, so that Rule lets only Users who belong to that ParentOrganization to see its details, but note that we’re blocking access to edit it. But remember, when the Organization is first set up, we also set up a field for Owner. That particular User should be able to make changes to their own organization. That would look like this:If this ParentOrganization’s Owner is Current User’s ParentOrganization, this User can:View all fields: yesFind this in searches: yesView attached files: yesAllow auto-binding: yesNotice the last rule in bold: since this User is the owner of the ParentOrganization, we’ll allow that User to make changes to it.CompanyNow we move on to the actual data that your Users will store in the CRM. A Company is any organization that you add to your CRM that’s not your own. A Company can be both a Client and a Vendor, as separated by the Company type field. We have added a few standard fields like phone number and address, and you can of course add as many more as you need to store more information.Suggested fields on this typeParentOrganization (ParentOrganization) - connects this to the entity who owns this data and thus should be allowed to see it; see this article​Name (text)Address (Google Maps address)Phone (text)Website (text)Type (list of Company Types, an option set) - note that this is a list of Company Types. If you add just Client to that list, then the Company can be sorted as a Client, and the same if you add Vendor. However, since we’re using a list here, you can add both Client and Vendor, allowing a Company to be both.Privacy rulesSince we set up our ParentOrganization in the last step, we now need to make sure that the Company type we’ve created is only available to Users who belong to the Organization to which it was added:If this Company’s ParentOrganization is Current User’s ParentOrganization and Current User’s ParentOrganization is not empty, this User canView all fields: yesFind this in searches: yesView attached files: yesAllow auto-binding: yesSo, our rule says that the Company belongs to a ParentOrganization, and so does the User: as long as these two match, that User can see and edit the Company. Take note of the second condition we’ve added: and Current User’s Organization is not empty - this is an extra level of security that will stop Users from seeing Companies if both the ParentOrganization of the Company and the User is empty (in which case they will technically match). This should never happen, of course: but since software bugs do occur sometimes, this gives us an extra layer of security even in the unlikely case that both the User’s ParentOrganization and the Company’s ParentOrganization is somehow lost or deleted.ContactIn many cases when you add a Company to your CRM, you’ll also want to add Contacts to that Company.  A Contact needs to contain information similar to what you would save in your phone’s phone book. A Contact doesn’t have to belong to a Company, but if they do we can use that field to filter and sort Users in our platform:Suggested fields on this typeParentOrganization (ParentOrganization)Company (Company) - the custom Data Type aboveFirst name (text)Last name (text)Phone (text)Email (text)Address (Google Maps address)Date of Birth (date)LinkedIn Profile (text)Privacy RulesThe Privacy Rules for a Contact are similar to a Company: Users should only be able to see Contacts that belong to their own ParentOrganization. Let’s set it up like this:If this Contact’s ParentOrganization is Current User’s ParentOrganization and Current User’s ParentOrganization is not empty, this User can:View all fields: yesFind this in searches: yesView attached files: yesAllow auto-binding: yesLeadA Lead is a bit different from Contacts and Companies in that they are more temporary. They are basically potential clients: you don’t know whether they will convert to an actual client yet, and your Users may not want to store them as a Contact just yet to avoid overflooding the database with irrelevant Contact and Company records. A Lead can typically come into contact with your Client using a contact form: they’ll provide their contact information, but it’s too early to say whether they’re serious about doing businessIf a Lead does convert into business, we’ll convert it into a Contact and/or a Company. At this point we’ll create the Contact/Company record based on the information saved in the Lead. Optionally, we can delete the initial Lead at that point (unless you want to keep it around)We’ll introduce a slight change to this Data Type to illustrate what’s possible with Privacy Rules: we’re going to assume that if this Lead was created by an employee, we want only that employee to be able to edit it. We’re going to use the built-in Created by field for that.Suggested fields on this typeParentOrganization (ParentOrganization)First name (text)Last name (text)Company name (text)Phone (text)Email (text)Comment (text): if you are generating leads from a contact form, a comment field is a great way to save what kind of interest the lead has in your company.Privacy RulesFor this one, we’re actually creating two Privacy Rules. One is to make the Lead visible to all members of the same ParentOrganization (like we did with the other Data Types), and the second rule is to let the Lead’s Creator be the only one allowed to make changes to it:If this Lead’s ParentOrganization is Current User’s ParentOrganization and Current User’s ParentOrganization is not empty and this Lead’s Created by is not Current User, this User canView all fields: yesFind this in searches: yesView attached files: yesAllow auto-binding: noIf this Lead’s ParentOrganization is Current User’s ParentOrganization and Current User’s ParentOrganization is not empty and this Lead’s Created by is Current User, this User can:View all fields: yesFind this in searches: yesView attached files: yesAllow auto-binding: yesNote like in our ParentOrganization that the only difference is in the final Rule. In plain English, we’re saying that if the Current User created this Rule, then that User should be able to edit it (by allowing auto-bind).

Option sets recommendedFor any data that’s shared between all Users of the platform and remains fairly static, we can use an Option Set. Option Sets load faster than data in your database, but they’re not meant to hold any private information.In our CRM, we’ll use it to store the two types of Companies in our database.Company TypeClientVendorThe Company Type Option Set is used to separate Client and Vendor companies. We’re storing the Company Type as a List, which makes it possible to make a Company both a Client and a Vendor.About the author: Amlie SolutionsThis guide is written by Petter Amlie. Petter is the founder of Amlie Solutions, a no-code expert, public speaker and author of two books on Bubble: The Ultimate Guide to Bubble Performance and The Ultimate Guide to Bubble Security. You can find a growing number of free guides, video courses and in-depth articles on his website.…PreviousProject Management AppsNextProfessional Services AppsLast modified 11mo agoCopy linkOn this pageData types recommendedParentOrganizationCompanyContactLeadOption sets recommendedCompany TypeAbout the author: Amlie Solutions









Workflow API endpoints - Bubble Docs










Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationThe Data APIThe Workflow APIWorkflow API Privacy RulesWorkflow API endpointsAPI WorkflowsThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookWorkflow API endpointsThis section covers how to identify the correct endpoint for a given API WorkflowHelp us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​The root URLTo find your application's Workflow API root URL, go to Settings - API. As soon as you have activated the Workflow API Bubble will reveal the root URL.Constructing the complete URLKeep in mind that the version-test and version-live versions of your application have separate root URLs for API workflows.

Remember to update the external call to reflect whether you want to communicate with the test or live version of your app.The complete endpoint URL consists of the root URL combined with the name of the Workflow you want to access.For example, the URL of the API Workflow in the image above would be:No domain connectedhttps://my-bubble-application.bubbleapps.io/version-test/api/1.1/wf/url-friendly-nameor for the live version of your app:https://my-bubble-application.bubbleapps.io/api/1.1/wf/url-friendly-nameDomain connectedhttps://www.mydomain.com/version-test/api/1.1/wf/url-friendly-nameor for the live version of your app:https://www.mydomain.com/api/1.1/wf/url-friendly-namePreviousWorkflow API Privacy RulesNextAPI WorkflowsLast modified 1mo agoCopy linkOn this pageThe root URLConstructing the complete URLNo domain connectedDomain connected









Groups - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersGroupsRepeating groupsPopupsFloating groupsGroup focusInput formsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookGroupsThis section covers Groups, that can be used to contain elements and data and control the responsive behavior of child elementsGroups are the most basic container type. It can be placed anywhere on the page, including inside of other container.It can be used to organize other elements, for aesthetic purposes (by styling it) and to pass data.Groups can hold elements like the form in the example above.Using groups for navigationGroups can be displayed and hidden based on different conditions and user actions. By hiding and showing groups that contain other elements you can let your users navigate your app without having to go to another page.When a group is hidden, you can set it to collapse its height and width to give room for other groups to be displayed. To the user, the switch is instant – the content on the page simply seems to change without any delay or flickering.In the example above, we are toggling the visibility of Group A and Group B.In the animation above we are toggling the visibility of Group A and Group B. The result is that one replaces the other as the blue group collapses its height. This is how you build single-page applications (often abbreviated to SPA) where users can visit different sections of the page while never having to reload.There are two ways to hide and show groups: conditions and actions.Using conditionsThe first way is to place conditions on the group that looks for specific criteria to be true. A common way to control user navigation is to use conditions together with URL parameters.In the condition above we are checking the URL for a parameter called navigation. If the value of the parameter is edit user the element is visible.Using actionsThe second way to hide and show groups is to use actions. You can choose to instantly show/hide the group by using the Toggle an element action, or you can apply an animation using the Animate an element action.The Toggle an element action toggles the visibility of an element. ​PreviousContainersNextRepeating groupsLast modified 4d agoCopy linkOn this pageUsing groups for navigationUsing conditionsUsing actions









Files - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookFilesThis section covers how Bubble handles uploaded files and images andBubble comes with built-in tools both on the editor side and in your app to upload and store files and images.This feature set can be an important part of your app that comes with different requirements. Some applications need to upload and load public files, such as a photo sharing website or a marketplace with product images. Others need files to be kept as secure as all other data: confidential documents, personal files or employee records for example.Most applications are somewhere in between: they have some public files and some private files, and some files that change their status based on other criteria (such as a photo showing only if a field on the data type is set to public=yes).In this article, we will look at how you can upload, display/download and delete files, as well as protecting them with Privacy Rules.A note on plugins: Some plugins offer ways of uploading and managing files that may differ from Bubble's built-in features and how they are described here. If you use a plugin to upload and/or manage files, we recommend getting to to know the documentation for the plugin and any third-parties used for file storage, conversion and other external services.

The instructions in this article for maintaining file privacy pertain specifically to Bubble's native file management features.How uploaded files are handledThe Bubble database has two field types that support files: file and image.The image and file fields hold the URLs of uploaded images and other files. Let's first look at how the mechanics of those features work:The field in the database does not contain the actual file, but only a URL pointing to that file on another server. In other words, the file and image field types only contain a short string of text: the file's URL.When you or one of your users upload a file using one of Bubble's built-in tools, it goes through the following steps:The file is uploaded to a file storage serverThat server returns a URL to reach that fileThat URL can be saved to the database using a workflowThis logic comes with a few important points to note:The size of your file (while important when the file is downloaded) does not affect the size of your database – it only contains the URL as textWhen you delete the content of that field, you are only deleting the URL – not the fileFiles are spread across Bubble's CDN, ensuring a fast downloadManaging files in the Bubble editorUploadingFiles uploaded through the Bubble editor are not protected by Privacy Rules. You should only upload files that are meant to be public.Files can be uploaded directly in the Bubble editor in two ways:File managerBy navigating to Data - File manager you can see and search for all files that have been uploaded. To upload a file, click the Upload button in the upper right corner, marked in red in the screenshot below:The file manager lets you update files. Click to enlarge.The file manager differs between files that were uploaded in Development and Live. Click the link in the upper right corner to switch between the two.The database managerWhen you edit a database thing that has a file or image field, you can upload a file directly to that field. The file will be uploaded and the URL will be linked to the database thing. Deleting filesDeleting files in the Bubble editor is done by going to Data - File manager. Select the files you want to delete with the checkbox in the list, and then click the Delete button in the upper right corner. Keep in mind that Development and Live are separate.Also note that if you edit a database thing in the database editor and remove the file from it by clicking the Clear link, this only removes the URL saved on that thing – it does not delete the file.Removing an image from the database using the Clear link does not delete the file, it only removes the URL from the databaseManaging files in your appUploadingTo allow users to upload files, you can choose between two Bubble-native elements:File uploaderImage uploaderThe elements both upload files and store their URLs in the database, but each offers a few key differences in their settings:The image uploaderOffers a preview of the imageAccepts image formatsIf an image is larger than 800 x 600 pixels, you can check a box to resize the image to these dimensionsThe file uploaderWill show the filename and allow the user to download the file with a clickAccepts all file typesLets you set a maximum file size in megabytesIf empty, both elements will open the standard operating system file selector.When a file is uploaded by a user, it's immediately uploaded to the file storage server. This means that as soon as a file is uploaded, it technically has a live URL that can be viewed by anyone with the URL, even if you haven't saved the URL in the database yet.To keep files private, see how to use Privacy Rules with files below.Saving the URL in the databaseAfter the file has been uploaded in one of the elements, it's value will return the URL of the image. You then need to use a workflow to save the URL in a field on the relevant data type.​After uploading the file, you need to save the URL to a field on the user.Uploading private filesPrivate files are bound to a database record and shares its Privacy Rules with that data type. For example, if a user uploads a profile photo to their user, that image file will be protected in accordance with the Privacy Rules set on the user data type.A few additional settings are needed to keep a file private:Element settingsTo set a file to be private, you need to first change some settings on the uploader element:1.First, check the box Make this file private 2.A dynamic field will become visible where you can specify what database thing you want to attach the file to. In this example we have set the current user.These two steps will ensure that the file is uploaded as a non-public file. We then need to check the Privacy Rules on the User data type to control who has access to it.Privacy RulesIn the beginning of this article we covered that a file upload essentially consists of two parts: the file itself and its URL. This becomes useful and important when we set up the Privacy Rules.There are two settings that affect the privacy of a file:The field in which the file is saved (visible when View all fields is unchecked)

This setting hides the field in which the URL is saved: in other words, a user without access will not be able to see the URL, but if they were to get the URL somewhere else (for example shared by another user who has access) they would be able to access the file through the URL.

View attached files

This setting makes the file itself unavailable to all users who are not authorized to see it. Even if they had the URL, trying to view the file would result in an error message.It's important to note that the first setting alone is not considered a secure way to store a file. Since it's publicly available, anyone could view it if they had the URL, which means the data is obfuscated but not secure.Only by securing the second setting (view attached files) can you know for sure that no unauthorized users will be able to access it.Deleting filesIf you simply clear a file or image field on a data type, you only remove the file's URL from the database. To delete the file to free up the space make sure it's no longer available online, you need to set up a specific action:The Delete an uploaded file action deletes a file that you specify using its URL. In the example above we are deleting a user's profile picture by pointing the action towards the Current User's Profile image, which is of type image.Not that you should include an additional step of Make changes to a thing and clear out the URL of the file from the file or image field afterwards, to ensure that it returns an empty value if the file has been deleted.PreviousBubble as a backendNextStatic dataLast modified 4d agoCopy linkOn this pageHow uploaded files are handledManaging files in the Bubble editorUploadingDeleting filesManaging files in your appUploadingSaving the URL in the databaseUploading private filesDeleting files









Using Page Slugs - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationUsing Page SlugsUsing Reusable ElementsHandling ConditionalityBuilding Dynamic ExpressionsBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookUsing Page SlugsThe "Slug" is a new built-in field that you assign to any Thing (entry) in your database to act as its URL. Up until Slugs, URLs in Bubble apps would always point to that things unique ID. Our Academy tutorial on how to set up page slugsSlugs in URLsWithout a slug, this is what a page's URL would look like when a thing is sent to the page:With a slug value, the 'Scone' thing becomes this:With Slugs, anything can have its own custom URL making them shorter, more searchable and more memorable.Note: If your app's index page has a Thing assigned to it, that page's URL will be ... .com/index/[slug]. It cannot be ... .com/[slug] because that would interfere with knowing whether the URL points to the index page with a Thing or points to a different page.Setting a thing's SlugYou can set a thing's slug value when creating a new database entry, or modifying an existing one, which can be done from the Data tab or in a workflow. Note that slugs can only include lowercase letters, numbers, or hyphens, and must be less than 250 characters.From the data tabFrom workflowsUnder the Data actions category of actions, you will find "Set a thing's slug" which will let you dynamically set the slug to whatever you like for any given thing.Note that you cannot change the slug value through "Make changes to thing" and while it may be similar in concept, you set it in different action called "Set a thing's slug". With this action, you can dynamically set the slug for any given Thing. In the above image we would be setting the slug for a Product found inside a repeating group.Once a thing's slug is set, then the URL when navigating to a page with that thing will look like the example above.Slug orderThere is a hierarchy to which Bubble will now set your URL.1.Page Slugs2.Backup Fields for URL (Formerly Fields Readable as URL)3.Unique IDIf a slug is set, that is what Bubble will use. If a slug is not set, Bubble will look to see if your page has any Backup fields (formerly known as Fields Readable for URLs). If your page has no backup fields, then it will default to its unique id.Slug duplicationYou can have things share the same slug value if they are of different data types. However, you cannot have two things of the same data type with the same slug value. If you try, it will append slug-1, slug-2, slug-3, and so on and so forth. Slug conditionalsWith Slugs we also have access to two conditionals that you can use in your elements and workflows for finer control. Can Have The Slug Value - This operation tests if the argument is a valid slug value for the Thing. A valid slug value is both unique and correctly formatted with only lowercase letters, digits, and hyphens.Cannot Have The Slug Value - This operation tests if the argument is an invalid slug value for the Thing. An invalid slug value is anything that isn’t made up of only lowercase letters, digits, and hyphens or that is not unique.These conditionals are perfect for when you need to compare the Slugs to something already existing, for example, with User Profiles, you can use these to check if a user name is or isn't already taken.Slugs and Privacy Rules If you are setting the slug for a data type that has a defined privacy rule, confirm that you have checked the "slug" field under the default permissions for "View all fields." This will let everyone see the slug value that you have set in the page's URL. If this isn't checked and the user does not meet the condition for a privacy rule that allows viewing the Slug field, they will see the unique ID in the URL instead.Tip: If your Slug's field is hidden by your Privacy rules (such as "Everyone else cannot see Slug"), your application may allow for duplicate slugs to be added, since it would not be able to locate the original usage of the slug.Rules when using slugs1.Reminder: Special characters will not save to your slug field when entered directly on the Data tab and will show up as blank. (Anything that isn't a lowercase letter, hyphen or number).2.Slugs can update in real-time, meaning if you update the slug on a page that uses the slug, the URL will automatically change.3.The maximum slug length is 250 characters.4.Slugs support all languages. If you notice any language that isn't supported or being incorrectly processed, please contact [email protected]​When a slug that contains special characters is set through a workflow, these characters will remain in the slug, display in the URL, and work correctly.User manual - PreviousStructuring an ApplicationNextUsing Reusable ElementsLast modified 3mo agoCopy linkOn this pageSlugs in URLsSetting a thing's SlugFrom the data tabFrom workflowsSlug orderSlug duplicationSlug conditionalsSlugs and Privacy Rules Rules when using slugs









The Basics - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereThe BasicsThe Application EditorThe Application Editor (Legacy)Building Your First AppStrategies to Learn BubbleApplication & Data OwnershipChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookThe BasicsLearn more about the types of apps you can build in Bubble and how security, privacy, and ownership work.Our Academy course on the Bubble Fundamentals What is Bubble?Bubble is at the same time a visual programming tool and a cloud platform. You use the programming tool to build your applications, while the cloud platform hosts and runs them. You design, build, maintain, and scale your app using the Application Editor, which is accessed in the browser. There is nothing to download. As soon as an app is created on Bubble, it is hosted on Bubble's cloud infrastructure, and it can be accessed from anywhere.What you can buildBubble lets you build web applications. The applications can be accessed in a browser on a computer, tablet, or phone. Applications have a database and users can create an account, save data, retrieve data, etc. Bubble's powerful editor is open-ended, and like a traditional programming language, there's no fixed set of possibilities. By combining different data and logic operations, you can create very simple to extremely complicated applications. Without getting into a detailed list of features, Bubble supports:Creating user accounts;Saving, modifying, deleting and retrieving data;Real-time updates;Connecting to any kind of external services that expose an API (including payments, sources of data, authentication providers, etc.);Building responsive applications, which adjust to the width of the screen.Bubble does not generate native apps for iOS and Android out of the box yet. Some users have managed to successfully deploy apps to both stores. If you are building native first software and want to use Bubble, we recommend you build a web version first as a one-page application, and then convert it into a native app. The Forum is best for this process, since other users have gone through it. We plan to add this to our core functionality in the future, but cannot commit on a timeline for this yet.Example applicationsThousands of web applications are built on Bubble, including startups, internal company tools, and personal projects. Bubble is one platform that does it all for you, which means you no longer have to be a coder or hire a team of engineers to build the app that you want to build. Here are some apps our users have built. Take a look at our Showcase, where we highlight several premiere applications that our users have built, and our How to Build tutorial series, where we demonstrate how to create apps like Instagram and Uber Eats.PreviousNew? Start HereNextThe Application EditorLast modified 1yr agoCopy linkOn this pageWhat is Bubble?What you can buildExample applications









Design - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookDesignAt the heart of Bubble's capabilities is the ability to effortlessly create designs with precision: from basic forms to professional websites and SaaS applicationsIntroductionDesign is about the look and feel of your app, including its visual appeal, the experience it provides, and the emotions it evokes in its users. When you work on design you focus on the aesthetics: the layout of elements, the typography, the colors and effects like borders, shadows and transitions.The design of your app serves several important functions: a good and thoughtful design can provide an intuitive user interface, making it easy and enjoyable for your users to navigate and use the app. It can also help you establish a consistent brand identity that makes your app recognizable and helps it stand out.​Great design solves problemsIf you think about it, most apps are really a pretty layer on top of a machinery that aims to simplify a task for a user that would otherwise be complicated. For example, if you are running a marketplace for finding freelancers, a task management app or an e-commerce store for buying art, none of these tasks would be impossible for the user to solve in the first place – but your app can hopefully make it simpler and more enjoyable. Great app ideas make it easy for your users to solve a problem and store data securely.This is why design is not just about making your app look good: the goal of any well-designed app is to combine appealing visuals with user-friendliness. There are multiple aspects to a successful design and the list below can give you a good starting point for planning your app's user interface. It should be:Consistent
A structured use of colors, fonts and other styling choices gives your app an identity that your users can recognize.Intuitive
An intuitive design makes it easy for users to understand how to use the appEfficient
Thoughtful design can help your users solve their problems efficientlyAccessible
A well-planned design makes your app accessible on different types of devices and to users with disabilitiesBubble's design toolsBubble offers a unique way to build apps: 100% WYSIWYG tools to draw your app on an empty canvas and preview the design immediately. There's no code to write or unexpected results.By combining Bubble's different tools you can create designs that are consistent, pixel-perfect, fully responsive and compatible with all devices and browsers.ElementsYour app's user interface consists of elements: input fields, buttons, images, checkboxes, calendars, images, icons that each serve a specific purpose. Bubble offers a WYSIWYG visual editor that lets you pick and place elements directly on the page instead of writing code and immediately preview it.Our Element section covers the different element types and how they can be combined to build a virtually limitless number of different user interfaces.ElementsStylingEvery visible element on your page can be styled in different ways. You can apply styling on a per-element basis or you can use Bubble's Styles feature to save stylesheets that can be applied to multiple elements and be controlled from one central place. Bubble also allows you to set up Font and Color variables that apply those properties to Styles and elements across your app.StylingResponsive designBubble's responsive engine ensures that your app looks and behaves well on different devices, such as smartphones, tablets, and desktop computers. Settings up a responsive design eliminates the need to create separate versions of a website for different devices.Responsive designAdditional design resourcesIn addition to Bubble's tools for building your own designs, we have different resources that can help you set up the design even faster.TemplatesTemplates are semi-finished apps that can give you starting point when you first set your project up. They contain both design and workflows and serve a wide range of different categories:Read more and see the full list of categories in the article below.TemplatesThe Component LibraryThe Component Library is a collection of pre-built User Interface (UI) components that can be dragged and dropped onto your page to help you build beautiful interfaces faster. These UI components are fully responsive and are made up of containers, visual elements, and form inputs that can be individually customized once added to your page.The Component LibraryImporting from FigmaFigma is a popular and useful tool for the first stage of prototyping and design and Bubble has a tool for importing design from Figma into Bubble.Importing from FigmaPreviousChangelogNextElementsLast modified 21d agoCopy linkOn this pageIntroductionGreat design solves problemsBubble's design toolsElementsStylingResponsive designAdditional design resourcesTemplatesThe Component LibraryImporting from Figma









Dates and time - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersInput formsText and numbersDates and timeFile uploadsSelection controlsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookDates and timeThis section covers elements that accepts dates and time as user inputDate and time elements allow your users to specify a date, a time or both in different ways. Whether you want to save a user's birthday, filter search results or accept bookings in a specific time zone, Bubble offers multiple tools to set it up in a user-friendly way.Designing a UX that handles dates and time opens up for a wide range of different scenarios. While Bubble's built-in tools provide a variety of features, there are also a lot of plugins that offer even more customization.

Check out our plugin store to learn more. How Bubble handles dates and timeBefore starting to work with dates and time in Bubble, it's useful to know the basic facts about how this data is handled by Bubble.How dates and time is savedWhen you look at a date and time in Bubble, it's formatted in an easily readable format such as01/31/2050 - 01:00 pm31/1/2050 - 13:00In your app's database on the other hand, dates and times are saved in a different way. They are stored in a format called Unix time (sometimes called epoch time).The time in the example above would be stored like this if you are in New York City:2527264800Unix time is a way for computers store dates and times as a numerical value. Instead of storing it as human-readable strings (like in the upper examples), Unix time represents them as the number of seconds that have elapsed since January 1, 1970, at 00:00:00 UTC.This is not a Bubble-specific design choice, but is used across most computer systems, making it a universally recognized standard to store and exchange date and time information.The advantage of using Unix time is that it allows a computer to perform simple arithmetic operations with dates and times, such as comparing or sorting them, because they are represented as a single numerical value.Additionally, Unix time is independent of any specific time zone or calendar, making it an absolute value. The time above is 2527264800 wherever you are in the world, but the humanly-readable format of 01/31/2050 - 01:00 pm would change depending on which time zone you are in.Two more points arise as a natural consequence of this design:Both a date and a time is always savedSince all dates and times are stored as a numerical value representing seconds, it follows that this value never represents only a date or only a time: both are always saved. Whenever you save just a date in Bubble, it saves that date at 12 am (00:00) on that date in the provided time zone.You are not saving a time zoneWhenever you provide a date and time to store in the Bubble database, you are not storing a time zone along with it. Keep in mind: time zones are not actual values – they are just the formatting of a unix time value into a readable text that matches the requested time zone. Still, that doesn't mean you don't need to take time zones into account. Let's look at an example to illustrate:1.A user in New York saves the datetime 01/31/2050 - 01:00 pm
The offset from UTC is -05:00 or -18000 seconds

2.A user in Sydney saves the same datetime 01/31/2050 - 01:00 pm
The offset from UTC is +11:00 or 39600 secondsAs the example shows, while they are providing the same date and time respective to their local time zone, Australia time is 16:00 hours ahead of New York.The lesson from this is that Bubble doesn't actually save the time zone, but the logic above would lead Bubble to store two different Unix time values:In New York (IST) the Unix time is 2527264800 secondsIn Sydney (AEST), the Unix time is 2527207200 seconds.Knowing the the time difference is 16 hours, the two unix time numbers should be 57600 seconds apart – which they are.How do I keep track of this complex system?In most regards, you don't need to. Time and dates are complicated to work with because of time zones, leap years, Daylight Savings Time and other inconsistensies, but Bubble takes care of all of these calculations for you.The purpose of this infobox is to give a general understanding of how time and dates are stored and processed as this can make it easier to use Bubble's tools efficiently.Date/time pickerThe date/time picker lets your users pick a date and a time from a visual calendar. It can also be set up to only pick a date, in which case the field to the right in the animation below will be hidden.The date/time picker gives your users a visual interface to pick a date or both.If you set up the element to only ask for a date, the date will be saved at 12 am (00:00) on the chosen date in the current user's time zone. If you have selected a different time zone in the Property Editor, the date will be saved at 12 am (00:00) in that time zone.You can set a minimum and maximum date as well as a minimum and maximum time of day, and you can set the interval for the time picker (which is 30 minutes by default).Input elementThe input element is mainly used for text input, but can be set up to expect a date instead. In this case the user will not see a calendar or time picker, but will instead be able to type the date directly. Note that the input element supports dates but not time. It can be set up to format the date in the US format (mm/dd/yyyy) or the European format (dd/mm/yyyy).PreviousText and numbersNextFile uploadsLast modified 22d agoCopy linkOn this pageDate/time pickerInput element









Case: Stripe notifications - Bubble Docs










Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationThe Data APIThe Workflow APIWorkflow API Privacy RulesWorkflow API endpointsAPI WorkflowsCreating API WorkflowsScheduling API WorkflowsRecursive API WorkflowsCase: Stripe notificationsThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookCase: Stripe notificationsAs the API is a way to let external services connect to your app, each case has a different implementation. Here are 3 different examples of how to use the Bubble API in real-life. Note that each example assumes that the app is on a paid plan and the APIs are activated.Notifying users when a Stripe subscription charge failsHaving your app take some actions when something happens on another service's end is a typical use case of the Bubble API. This will walk through the different steps, both on Bubble's and Stripe's sides. We'll start with an app that already has the Stripe plugin installed, with the relevant keys entered in the Plugins Tab. We also assume that our payment workflows save the Stripe customer ID of the user on the user - we'll need it to go from the ID Stripe provides to the User thing, and get his/her email.We assume for this example the domain of the app ishttps://stripeexample.bubbleapps.ioWe'll start on the Bubble side, in the Backend Workflows page accessed via the page navigator in the topnav. We need to define an API Endpoint that will be called whenever Stripe fails to charge a credit card. This API workflow should have an action that sends an email to the customer with a message prompting him or her to update his card. So let's start by creating a new API Event that we'll call 'chargefailed'.We make this endpoint public, so that Stripe can trigger it via a webhook (see below), and we make it possible to run without authentication for simplicity.Looking at Stripe's documentation shows what Stripe sends when it triggers a webhook. Stripe's server will make a request to our endpoint, and send an event ID in the body in the request. Therefore, we're adding an id parameter to our call of type text.We can now start building the Send Email action. We need to do a few things:1.Use a Send email action to send an email to this user.2.Use the Event ID sent by Stripe to retrieve the Event object. This event contains the charge object and the customer ID.3.Perform a search in Bubble to retrieve the user with this customer ID. 4.Write a friendly reminder.We start by adding the action, and will work on the To field. In this process, it's important to think from what we need and go up from there. Therefore, we start with the search for Users, add a constraint on the Customer ID field, and define the value as the result of an API call from Stripe. Here is the search.To get the Customer ID of the prevent event. The Stripe plugin offers a call to retrieve an Event object from an Event ID. Doing a call to Stripe will validate the Event ID, and will return the Event object. From this object, we can get the Stripe Customer ID. So what we need here is the data source 'Get Data from an API'.The API call is 'Get Stripe event', and the event_id we need to send to Stripe is precisely the one we got from the initial request (the webhook). This parameter is the first entry in the dropdown, we select it.At this stage, we have retrieved the Stripe Event object, we just need to get the Customer ID and our search will be ready.We can get back to the To field of the 'Send Email' search, and get the email of the user. Note that a search returns a list of users. In this case, we know the customer ID is specific to each user, but we need to get the first item of the list, to go from a list of one user to the user, and then get the email.We can now finish the action by adding the message we want to send.We're all set on Bubble's side. Let's summarize what our workflow does:1.Get the Event ID sent by Stripe with the webhook2.Fetch the Event object and get the Customer ID3.Perform a search in the application's database and get the user with this Customer ID4.Send an email to the user that was retrieved by the search.The full endpoint for this workflow is, as described in the reference.https://stripeexample.bubbleapps.io/api/1.1/wf/chargefailedWe're now heading to Stripe to configure the webhook. What we want: whenever a charge fails, trigger a webhook to this URL. We do this in here.And we're all set! Whenever a charge fails, the webhook is triggered, and Bubble will send an email to the user. You can see the execution of such workflow in your server logs.Sending a monthly newsletterThis example shows how you can create a system where your users can opt-in and opt-out for a weekly email. We'll cover the logic and the workflows to set up a weekly action, the content of the email will not be covered.First, we head to the API page of our app and create a new recurring event.Let's call this event 'Newsletter'. A newsletter subscription is attached to a user, so we pick user as a type of thing.This workflow will have one action that sends an email to the user that is sent to this workflow (the 'Current Workflow User')We can now move to the page in your app where we'll offer users the option to opt-in or opt-out from this newsletter. We'll do this in a very simplified 'account' page that shows two buttons.We need to add two workflows to our page. We assume that in this page, the user is logged in, and won't worry about enforcing this in the example-page.The first workflow will let users opt-in. It is triggered when the user clicks on the button 'Opt-in', and will use the 'Set/Cancel a recurring event'.This action takes an event and a thing. In this case, the event is 'Newsletter', and the thing is the Current User. We built the workflow so that the newsletter is sent weekly, starting on the following day at 9am.The opt-out workflow shares exactly the same structure, except that the frequency will be 'none'. Effectively, this will cancel any scheduled recurring event (and won't do anything if no event is scheduled initially).Writing a script to read data from the databaseThe GET/Data API lets you read your data programmatically. This can be done by another application, but can also be used in some scripts to save or print your data. This example shows how you can do this in Python. We're writing this script for an app hosted on the domain yourapp.com, and our goal is to retrieve all invoices. This assume that our app has a type named 'invoice'. We do not add constraints, but it would be easy to add such constraints, as described in the reference.The key concept in such a script is the pagination. When you make a request to the API, you need to define where to start, and a number of items to fetch. Each response from the GET API will return the number of remaining items. In our example, we want to start at the last item of the previous call plus one.#packages to perform the request, handle JSON objects, and encode URLsimport requestsimport jsonimport urllib​session = requests.Session()​#API KEY as defined in the settings tab, so that the script has full access to the dataAPI_KEY = 'XXXX'#base endpoint, see https://bubble.io/reference#API.get_api.Endpointbase_url = 'https://yourapp.com/api/1.1/obj/invoice'​#Query initial parameters. We do not send a limit parameter (default is 100)cursor = 0remaining = 100​#we keep making calls till we have no remaining items to fetchwhile remaining > 0: #data we send with the search. Search constraints would be here    params = {'cursor': cursor, 'api_token': API_KEY}    url = base_url + '?' + urllib.parse.urlencode(params)    response = session.get(url)​ if response.status_code != 200: print('Error with status code {}'.format(response.status_code))        exit()​    chunk = response.json()['response']    remaining = chunk['remaining']    count = chunk['count']    results = chunk['results']​ #we print each object for result in results: print(json.dumps(result, indent=4, sort_keys=True))​    cursor += count​print('No more entries')Such a script can be used (and adapted) to save data instead of printing it, query some data that fits some constraints, etc.PreviousRecursive API WorkflowsNextThe API ConnectorLast modified 1mo agoCopy linkOn this pageNotifying users when a Stripe subscription charge failsSending a monthly newsletterWriting a script to read data from the database









Data - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookDataThis section covers the different ways you work with data in BubbleThis section takes a long-form look at how Bubble manages different types of data.

To see the concise, technical description of data sources, operators, comparisons, search and privacy, you can check out our more concise core reference entry on data.IntroductionWorking with data is the cornerstone of any application. In fact, it's such a central part of app development that it's hard to imagine an app that doesn't rely on it in some way. Whether it's data generated by users, owned by you or imported from other apps and services, the ability to collect, store, and visualize information is why most applications exist in the first place.Think about it: a ride sharing app needs information about drivers, customers, locations and many other details to complete a transaction. A social media app needs user information, photos and user-generated content and a newspaper needs articles and images: they all collect, store and display their data in different ways, but in principle they all work in the same way.The ability to work with data is what allows apps to do what they do best: provide value to users.Not only do most apps by their most basic definition work with data, but they mostly all do it in the same way: by storing the data in a database.In this section, we'll cover many topics related to data in Bubble:How to manage the data in your database​​Managing files uploaded by your and your usersWorking with static data​Working with temporary data and variables​​Managing users and letting them sign up for an account in your appWhat is a database?The database is like the unsung hero of the tech world. It quietly sits in the background, doing its thing, while most users don't know how it works or even that it exists. All they see is a nice-looking user interface that always seems to have their data ready. But without the database none of those apps and websites would be of any use.So how exactly does it work? Imagine a huge spreadsheet that has hundreds, thousands or even millions of rows and columns, with each cell containing a piece of data. You can think of each row as representing a single entity, such as a customer or an order, and each column as representing a specific attribute of that entity, such as their name or order number.In many ways, the comparison is not just a metaphor: a spreadsheet is a kind of database. But the type of database connected to a web application is designed to store data in a secure way and be incredibly efficient at finding and retrieving specific records even with complex queries.That's why great applications are those who put a lot of work into the combination of working efficiently with data and great design. A social media app like Facebook or a video app like TikTok would not be very interesting if all they presented was a spreadsheet of likes and URLs to video clips; the data and design go hand in hand to create a success story.Bubble's databaseSetting up and managing a database is traditionally a demanding job that requires specific training like a degree in computer science and even additional education and certification.One of Bubble's core strengths is its built-in database that's automatically set up when your app is created, removing the need for dedicated employees to operate it.Bubble takes care of most of the database management for you:Creating the database when you first set up your appSetting up and maintaining two separate databases: one for testing and one for live usersKeeping it operational and maintaining uptime​​Encrypting its content to store and transfer it securelyTake point-in-time backups that can be recovered at any timePrivacy Rules keeps user data securely protected, based on who is trying to access itCreating and maintaning user profiles with secure passwordsRegular vulnerability testing​You can read more about Bubble's security on our dedicated security page.

Page: Bubble security​Types of dataAs you develop your Bubble application you'll find that you need to store data in different ways, and we split these into three categories:Dynamic data (the database)Dynamic data is information that the users of your app need to dynamically be able to create, read, edit, delete, search for and aggregate. This covers all kinds of different data that you and your users will find it useful to work with on an ongoing basis: stuff like social media posts, customer information, blog articles, eCommerce products and chat messages.Information like this is stored in the database.Article: The database​Temporary data (custom states and URL parameters)Temporary data is information that your app needs to store while the program is running – in traditional programming you would call them variables. They can be used for all sorts of things: navigation, calculations, remember a list of things that the user selected, remembering user input that you don't need to store permanently – any kind of information that you only need while the app is open.Temporary data is stored in Custom states (a sort of variable connected to an element) or in URL parameters (information stored in the page's URL)Article series: Temporary data
Article: Custom states
Article: URL parameters​Static data (Application texts and Option sets)Static data is information that you want to keep consistent or that's unlikely to change regularly. This could be a list of options like states, countries, colors, or categories, strings of text like headers, menu options, error messages or text translations and settings like membership type, gender or interests.Bubble offers two different ways of storing static data with very different uses:App texts (translations)App texts are static strings of text that you display around your app, such as headers, tooltips, explainer texts, menu options, page titles and metadata.App texts are different from Option Sets in that they are created specifically to hold strings that can be translated into different languages. This gives you an easy way to prepare your app to available to a global audience.Let's say you add the App text "Welcome to my app". You can then add translations of that string in other languages such as German and Hindi and Bubble will automatically use the translated text based on the user's preferences. You maintain full control over what languages you want to let your users pick and how they set their preferred language.App text can be used for translations, but they don't have to: you can also use it to have a simple way to manage all the static strings of text around your app in one place.App texts are meant for public information – they are not encrypted and should not contain any sensitive information.Option setsOption sets let you store any type of unchanging information like in the examples above. It can be single values like a text or number or a list of values that can be used in elements like checkboxes, radio boxes and dropdowns.Option Sets, as the name suggest, allows you to set up a set of options that you can manage in one place, making it easy to maintain and update as needed. They require that your app is deployed before updates are visible to your users, as opposed to dynamic database data that can be changed in real time.Option Sets are meant for public information – they are not encrypted and should not contain any sensitive information.​Article series: Static data
Article: Application texts
Article: Option sets​​PreviousImporting from FigmaNextThe databaseLast modified 1h agoCopy linkOn this pageIntroductionWhat is a database?Bubble's databaseTypes of data









Building Responsive Pages (Legacy) - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingResponsive designBuilding responsive pagesLegacy articlesThe Basics (Legacy)Building Responsive Pages (Legacy)Migrating Legacy PagesTips When Designing (Legacy)TemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookBuilding Responsive Pages (Legacy)This page covers educational material relevant to the Legacy Bubble Editor.Bubble pages are responsive. In other words, they will adjust to the width of the page so that they look great on mobile devices. Since you can position elements to the pixel, you may have to configure a few settings for your page to behave properly as its width changes.Building responsive pagesYou should start designing the page as it should appear on a wide screen, for instance your laptop. Then, once you're done with the wide ("laptop") design, you can start working on narrower designs. That's what the Responsive Viewer is for. The responsive view lets you modify a few parameters that will change how the page behaves when it's being squeezed.Using the Responsive ViewerYou will find a tab above the New Element palette that lets you switch between the Builder View, where you can modify elements, drag new ones, and delete some, and the Responsive Viewer which lets you test your page under different configurations and modify the responsive behavior of each element. In this view, the ruler at the top of the page area defines the current page width. Just click or drag on the ruler to resize the page and see how the page behaves dynamically. You can also use the preset width icons on the left side of the screen to see how the page looks on iPhone in portrait mode, in landscape mode, on an iPad and on a laptop or a desktop. When you click on an element, the Responsive Palette will display the different parameters you can modify to affect its behavior. Modify the different settings and you’ll see how it impacts the page in real time.Understanding the Responsive AlgorithmThe algorithm that controls how the page is rendered follows a few core principles. While you can tweak and see in real time the impact of the responsive parameters, it is good to have an overall understanding of how the rendering engine works.1.In general, as the page gets resized, elements shrink and expand before margins do. Bubble only expands margins if all elements on a line are at their maximum widths, and only shrinks margins if all elements are at their minimum widths and everything that could break to the next line is already on the next line.2.By default, most elements are shrinkable and expandable. You can control this on an element-by-element basis in the Property Editor or the Responsive Viewer.3.Overlapping elements move together: they expand or shrink together (unless one of the elements is set to fixed width or has a maximum width). In other words, overlapping elements both break, or neither breaks, and they are both shown or neither is shown by any show/hide rules.4.Groups (and other containers, such as Repeating Groups) work like mini-pages. Elements can break to new lines inside of them. By setting a minimum width on a group, you can stop that from happening by limiting how far the group can squeeze its contents. And by setting a maximum width, you’ll limit how wide an element can be. For instance, if you want your page to not be as wide as the screen, you can put all your elements in a group and apply a maximum width for that group.Using the Responsive DebuggerBubble offers a responsive debugger, both in Run-mode (if the debugger is on) and in the Responsive Viewer (click on the grid icon in the Top Bar). Activating that mode will let you see how the page is structured, and how the elements on the page are grouped together. For example, this can reveal floating groups that hover over elements and make them unexpectedly unclickable, or why elements have more space than expected between them. To activate this in run mode, when the debugger is on, click "Show responsive boxes" under the "Inspect" button. This is important because behind the scenes, a Bubble responsive page is structured into lines and boxes, and these two concepts will help to refine the responsive behavior of your page.Elements get grouped into boxes. Everything in a box moves together (for instance, overlapping elements are always in the same box). Boxes are the things that can break to the next line, and get shown and hidden. The left-most element in a box is the one that controls its show / hide rules (see below for what these rules are about).Lines are horizontal rows of boxes. Lines are as tall as the tallest thing in them, and everything in the next line is below the line above it. Boxes can break to a new line if there's no space for them on their current line.Responsive parametersYou can tweak how an element/page behaves as the page is resized with the responsive parameters. They are accessible from the Property Editor and the Responsive Palette (when you’re in the Responsive Viewer). Understanding responsive settings is easier when you see the actual impact of the different settings. We strongly recommend watching this 17-minute video, as it will illustrate the different options you can use as you build responsive page.OtherNote: Instagram technically uses its own browser, which is not officially supported by Bubble. Bubble pages will still load in Instagram's browser, but if this is a major use case for you, we recommend you test your pages on this browser first.Note: If you reference a third-party library in the raw Javascript on a page to modify an element, the way the modified element updates responsively (i.e. as the screen width changes) might not behave as expected, so it's always a good idea to test it thoroughly.Note: Elements that are wider than the width of the page it's on can lead to unexpected behavior with the responsive engine. Consider making all elements no wider than the page width.PreviousThe Basics (Legacy)NextMigrating Legacy PagesLast modified 8mo agoCopy linkOn this pageBuilding responsive pagesUsing the Responsive ViewerUnderstanding the Responsive AlgorithmUsing the Responsive DebuggerResponsive parametersOther









Text and numbers - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersInput formsText and numbersDates and timeFile uploadsSelection controlsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookText and numbersThis section covers elements that accept text and numbers as user inputText and number inputs allow your users to provide their own text strings and numbers to your application that can then be saved in the database or used in other ways.There are a few different elements that are useful in various scenarios, and those elements can be set up to handle different kinds of formatting and user experiences.Input elementsThis is the user manual article on the Input Element which gives an overview of how the element works. If you want the technical reference that describes all the settings for this element, check out the Reference entry:Reference: Input Element​Input elements are used for single-line plaintext, but they allow you to specify a content format from a wide range of different options. The Field type returned in the list below specifies what kind of database field format the input will return.How Bubble stores text formattingBubble uses a markup language called BBCode to store text formatting such as bold, italitcs, bullet points etc. The BBCode is generated and applied automatically as you add formatting to your text.BBCode is simpler and safer to use than HTML and because it has more limited capabilities, and only allows for a select number of tags. This stops your users from being able to upload any malicious code such as CSS or Javascript that might break the app.External link: Guide to BBCode
External link: BBCode tags reference​I want to use HTML insteadSometimes it's useful to be able to store formatted text as HTML, such as when you want to pass formatted text to an email sending service that ony supports this format. None of the built-in Bubble text editors supports HTML formatting, but there are multiple plugins that allow you to store text with formatting as HTML instead of BBCode. Searching the plugin store for Rich Text Editor is likely to give you some results that support this.Regular text elements don't support HTML either: if you want to display text formatted with HTML you can use the built-in HTML element.Because of the predictive text functionality on Android devices, some content formats involving masks have a slightly different UX. This applies to US Phone, Percentage, Currency, Date, Euro date, and Text (numbers only).On Android devices, the input allows users to type anything and validates the content against the mask only after the user stops typing.This does not affect the final data generated by the input.TextThe input will accept any text value.Field type returned: text​EmailThe input will only accept text values that are formatted like an email address.Field type returned: textPasswordThe input will accept any kind of text value, but the characters written will be replaced by asterisks.Field type returned: textIntegerThe input will only accept any whole number. Use this when you need to collect numerical values that can later be used for calculations (as opposed to numbers saved as text). You can specify a dynamic minimum and maximum value when this option is selected.Field type returned: numberDecimalThe input will accept any whole number or decimal number. You can specify a minimum and maximum value, as well as the number of decimals to include. You can also set the input to automatically include thousands separators as the user types. This setting is only aesthetic and does not affect the final value.Field type returned: numberAdressA geographic address. With this option, the input automatically validates the address with Google Maps. Note that the input does not automatically search for valid addresses as the user types, so the user has to provide an already valid address (by copy/pasting directly from Google Maps for example). If you want the user to be able to see Google Maps search results as they type you may want to look into using the Search box element instead.Field type returned: address​US phoneThis input will accept correctly formatted US phone numbers. The value is saved as a text.Field type returned: textPercentageThis input will format the user's input as a percentage and accept input such as 20%. Bubble will automatically save it in the correct numerical equivalent of the provided percentage point. For example, 20% will be saved as the number 0.2 and 150% will be saved as 1.5.Field type returned: numberCurrencyThe input will accept any whole number or decimal number and it will automatically format the input in the chosen currency, such as $20. You can specify a minimum and maximum value, as well as the number of decimals to include. You can also set the input to automatically include thousands separators as the user types. The currency and thousands separators settings are only aesthetic and do not affect the final value.Field type returned: numberDateThe input will accept any date, but does not include time. It automatically formats the input's value as mm/dd/yyyy while the user types, guiding the user to provide the date in the right way. You can specify a given time zone for the input and Bubble will automatically calculate any offset from the user's current time zone. If no time zone is provided, the user's current time zone will be used. Dates are saved at 12 am (00:00) on the given date.Field type returned: dateEuro dateThe input will accept any date, but does not include time. It automatically formats the input's value as dd/mm/yyyy while the user types, guiding the user to provide the date in the right way. You can specify a given time zone for the input and Bubble will automatically calculate any offset from the user's current time zone. If no time zone is provided, the user's current time zone will be used. Dates are saved at 12 am (00:00) on the given date. The difference between this content format and the Date format is purely visual.Field type returned: dateText (numbers only)This input will only accept whole numbers and the result will be saved as text. This is useful when you want to save numerical values that need to remain exactly as the user typed (without losing leading zero's for example) and will not be used for any type of calculation, such as international phone numbers, zip codes and order numbers.Field type returned: textStoring numbers as text versus storing them as numbersWhat is the difference between the two?The Bubble database offers two different field types that can both be used to save numerical values: text and number.Why would you ever want to save a number as a text string? There are a few scenarios where it makes sense to do so:When you need to include leading zero'sIn an integer (or number) a leading zero represents no value and is disregarded when saved to the database. After all 045 and 45 are the same thing from a mathematical point of view and the zero only adds confusion and increases the total size of the database. Sometimes leading zero's are necessary: for example a phone number or zip code might start with a zero and they must be stored as text to preserve the complete value.When you need to pass the data as textSometimes when you communicate with an external system through an API, that system may expect a numerical value to be passed as text. In that case it can be useful to store it as text in the database so as to avoid having to convert it later.​When to use whatText should be used when you are working with numerical values that will remain static and will not be included in any kinds of calculations. For example:Phone numbersZip codesPostal codesProduct/Part numbersNumbers should be used when you are working with values that may need to be calculated or aggregated, such as:Year of birthAgeCounts and totals (such as the item cart and total value of a cart)Financial numbersEnumerated values, such as the values used to represent the days of the week (e.g. Sunday = 0, Monday = 1, etc.)​Multiline inputAs the name suggests, the Multiline input element allows you to set up a text input element that allows for multiple lines of text. Like the regular text input, this element supports plaintext only, and does not provide any custom formatting.Use the Multiline input element when you need the user to be able to supply multiple lines of text but you don't want them to be able to add formatting such as bold, italic and headers.Field type returned: text​Rich Text EditorThe Rich Text Editor is a plugin. It's made by Bubble but it needs to be installed in your app before you can use it.

Plugin link: Rich text Editor​The Rich Text Editor is another multiline input element that allows users to type a rich formatted text with formatting such as colors, fonts, bullet points and links.The Rich Text Editor plugin lets your users add advanced formatting to their text.Hidden toolbarThe Rich Text Editor element comes with a setting to give it a more minimalistic design where the toolbar is only visible when you select some text:You can also choose to show fewer format settings than the ones above. The screenshot shows the full suite of available options.AdPreviousInput formsNextDates and timeLast modified 21d agoCopy linkOn this pageInput elementsTextEmailPasswordIntegerDecimalAdressUS phonePercentageCurrencyDateEuro dateText (numbers only)Multiline inputRich Text EditorHidden toolbar









The element tree - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe element treeThe pageVisual elementsContainersInput formsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookThe element treeThis section covers the element tree found in the Design tab of the Bubble editor.As we explored in the section about elements, all objects you place on the page become a part of that pages hierarchical structure. Another way to describe it is as a parent-child relationship: ani elements that you place within a group become a child of that group.The element tree displays all the elements on the current page organized into parent-child relationships. The top parent element is the page, and all the groups and elements you place on that page are its children.Element tree modesThe Element Tree has two modes. You can either decide to show all elements on the page in a tree view, with parents and children, or only show hideable elements. Hideable elements are elements that are hidden on page load (from which you have unchecked the box 'This is element is visible on page load' in that elements Property Editor).Checking Only show hideable elements lets you quickly identify elements that are hidden.In other words, you will only see these elements in the list when the option 'only show hideable elements' is checked. This is a useful feature when editing a page because it lets you quickly show elements that aren't visible for editing purposes, while the other mode is useful to get a full view of the page.Moving elements in the hierarchyThe element tree show an element's place in the hierarchy. If the element is placed within a group, it will be displayed in the tree as a child of that group.The blue line shows you where in the hieararchy you are.You can drag and drop elements in the element tree to change their place in the hierarcy. For example, you can drag it from one group into another. If you drag a group that contains other elements, all those elements will be moved along with it.Dragging and dropping elements in the element tree is only supported if the page is built with the responsive engine.​PreviousThe element hierarchyNextThe pageLast modified 22d agoCopy linkOn this pageElement tree modesMoving elements in the hierarchy









As an admin - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationHow to authenticateNo authenticationAs a UserAs an adminThe Data APIThe Workflow APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookAs an adminThis section covers how to authenticate API clients making incoming requests with full administrative access using a Bubble API token.Help us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​What is token authentication?Token authentication means that the client making a request is authenticating using a token that has been generated under Settings - API using the Generate a new API token button.This gives the client unrestricted access to the database.Token authentication gives the client the broadest possible access to your database and API workflows. It should be used with caution.How to set up admin authenticationTo set up admin authentication, navigate to Settings - API and scroll down to the button that says Generate a new API token:When you click the button, Bubble will generate a unique, cryptographically secure 32-character string that serves as the token for any API requests that you want to make. You can create multiple tokens if you have more than one external system connecting to your application. We recommend creating one token per system so that you can revoke them one-by-one if needed.The token is the same in all versions of your app, but any changes made to it (including creating and deleting a token) needs to be deployed in order to update.What privileges does admin authentication give?In principle, it gives the same privileges as an admin would get in the Bubble editor, which means there are no limitations to what you can search for, view, create, edit and delete in the database, and you can run all API workflows.There are a few exceptions:In the Data API, only data types that you have exposed in the Data API settings will be accessibleIn the Workflow API, only Workflows that have the Expose as a public API workflow box checked will be accessibleLabelling admin authenticationEach token you create can have its own label to be easily identifiable. We recommend giving each one a label that clearly indicates what the token is used for. The label does not affect the functioning of the token in any way and is not visible to the client or in your application's client-side code.Revoking an admin authentication tokenTo revoke a token, scroll to the relevant token and click the delete icon in the upper right corner.There is no warning message – the token is deleted by a single clickYou cannot undo this actionThe change does not apply to your Live version until you deployHow long is the token valid?An admin token is valid until it is revoked.PreviousAs a UserNextThe Data APILast modified 1mo agoCopy linkOn this pageWhat is token authentication?How to set up admin authenticationWhat privileges does admin authentication give?Labelling admin authenticationRevoking an admin authentication tokenHow long is the token valid?









Static data - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseFilesStatic dataApp texts (translations)Option SetsTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookStatic dataThis section covers different ways of saving static data in BubbleStatic data in Bubble is defined as data that:Requires your app to be re-deployed to updateCannot be changed by your application's users (unlike dynamic and temporary data)Static data is typically used to store any kind of structured information that doesn't change regularly, such as:Text strings used around the appLists of static choices such as countries, colors and other optionsIt can also be useful to save app data like the brand name, legal name, contact information and other pieces of information that you want to to be able to change from one place if necessaryBubble stores static data in three different ways:The data that you store directly on elements and in workflows, such as the text on a button or list of texts for a dropdownApplication texts, used to display strings like headers, labels and short texts with the option to offer translated versionsOption sets used to store different kinds of data in a database-like mannerWhat all three have in common is that they become part of your application's source code. This means that:They load very fast, since they are downloaded on page load and don't need to be loaded from the databaseThey are cached on the user's device until a new version is deployed, meaning the don't need to be downloaded on each page loadThey are all unencrypted and should never contain any sensitive informationContinue reading these sub-articles to learn more about application texts and Option Sets:App texts (translations)Option SetsPreviousFilesNextApp texts (translations)Last modified 6d agoCopy link









Using Reusable Elements - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationUsing Page SlugsUsing Reusable ElementsHandling ConditionalityBuilding Dynamic ExpressionsBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookUsing Reusable ElementsReusable elements are a way to create groups of elements that can be used in more than one page. If you want to access a sign-in popup from many pages, you will want to build it only once and reuse it. Similarly, if you want a footer and header that are uniform across pages, you should only build them once. You should, as much as you can, build elements as reusable elements, as it will make the app lighter and easier to maintain. Once a reusable element has been built, it will become another type of element that you can add to your page. Reusable elements are also a good way to create reusable workflows.Creating reusable elementsTo build a reusable element, open the Application Menu and click on 'New reusable element'. This will take you to the element page where you will edit it. You will design the element similarly to a page and define the relevant workflows.In the PAGES menu in the top left corner you will find all your reusable elements. Click Add a new reusable element.... to create a new one.Working with reusable elementsReusable elements are container elements, and work similarly to Groups and Popups. From a data standpoint, a reusable element is similar to a group or a popup. You can change its content type, send data to it, or hide and show it, just as you would with a group. The key difference is that a reusable element that is a popup will have a modal behavior – in other words, if the popup doesn’t get closed, the user won’t be able to click anywhere else outside of the popup.Note that the outermost group is extremely important, because its custom states can be accessed and set from workflows on the page that the reusable element is added to.Adding reusable elements to pagesThe way you add a reusable element to a page is similar to other elements. Just pick on the element you need in the New Element Palette, and draw it on the page.Modifying their dimensionsReusable elements' dimensions are defined when you edit the element itself. However, these elements are responsive (except if you make them fixed width), and if you need to resize them in the destination page you can do so, and the content will adjust as defined with the responsive settings of the inner elements.Converting existing elements to reusable elementsOur Academy course includes how to convert groups into reusable elementsIt is possible to convert a group of elements into a reusable element. If you found that you built a group of elements that you'd like to use in more than once place, using this option will both save you time and ensure consistent design across your application's pages. Use the context or top menu options to do so.Reusable workflowsA particular use case for reusable elements is to gather workflows that you want to reuse in more than one page. Doing so ensures that exactly the same flow of actions is used in more than one place, which minimizes chances for mistakes, and makes debugging and modifying your app much faster.To do this is create a reusable element without elements inside and add the workflows you want to share among your pages. Once you've added this reusable element to your page (and make it invisible if you prefer), you can use the 'Trigger custom event from reusable element' action to access the workflows you added in your reusable element.PreviousUsing Page SlugsNextHandling ConditionalityLast modified 2mo agoCopy linkOn this pageCreating reusable elementsWorking with reusable elementsAdding reusable elements to pagesModifying their dimensionsConverting existing elements to reusable elementsReusable workflows









Styling - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingColor variablesFont variablesStylesCustom FontsResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookStylingThis section covers the different styling properties that can be applied to elements, such as colors, borders, shadows and fonts.Each element that you add to your page has a default styling applied to it. In short, styling refers to what your elements look like, and this is done by changing styling settings:Background color or imageBorderShadowFontTransitionsThe settings above open up for a wide range of different looks where to elements that perform exactly the same task can look very different.These two input element serve the same purpose, but their styles are different. The bottom one seems to hover above the page – an effect often used to draw attention to a particular element.Each element can be styled individually by opening the Property Editor and making changes to the settings in the Appereance tab:You can tweak the style settings of each individual element, but Bubble also offers tools to set up stylesheets that you can manage from one place.But Bubble also has several different tools for efficiently managing and updating the styles of your app's elements. They are split into three different sections:Color variablesThe Color Variables feature in the Styles tab enables you to establish a palette of colors that you can apply throughout your app. Making changes in a Color variable automatically  applies those changes to every Style and element connected to that variable.Article: Color variables​Font variablesThe Font Variables feature in the Styles tab enables you to establish a collection of fonts that you can apply throughout your app. Making changes in a Font variable automatically  applies those changes to every Style and element connected to that variable.Article: Font variables​StylesThe Styles tab in Bubble provides you with a centralized place to define and manage all of your app's style settings.Styles create a consistent, visually appealing design for your app while making it easier to update that design in the future. Making changes to a Style automatically applies those changes to every element connected to it.

Article: Styles​PreviousSelection controlsNextColor variablesLast modified 25d agoCopy link









Strategies to Learn Bubble - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereThe BasicsThe Application EditorThe Application Editor (Legacy)Building Your First AppStrategies to Learn BubbleApplication & Data OwnershipChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookStrategies to Learn BubbleHow long does it take to learn?Learning Bubble can take a few hours to a few days, depending on how familiar you are with thinking about an app in an event-driven way. We recommend starting to use Bubble with a learning mindset, instead of jumping directly to building and expecting to have an app that works a few minutes after signing up. Once you understand the basics and the tool well, you will realize how much you can do without code, and how fast.Academy resourcesYou can learn Bubble in several ways, including:This Manual, which includes Help Guides and Core Reference. Help Guides cover the basics you need to build an app, while Core Reference documents each feature and property.Our Academy, which includes video courses, written documentation, and how-to guides.Our interactive lessons, which range from creating a sign-up system to connecting to external APIs, and only take a few minutes each to complete. Our forum, which is a great place to ask questions and get advice on your application from expert Bubble users. It is always more fun to learn with others!We recommend starting to build anything, even a clone of a popular application, to get familiar with Bubble’s features. Once you understand the concepts and the tool well, you will realize how much you can do without code, and how fast.Getting helpIf you have questions that pertain to the use of the Bubble platform, such as billing and account questions, best practices when building your app, and bug reports, our team is also able to help. You can email us at [email protected], where our team responds to all incoming requests.If you use the forum, here are a few things you should do to increase your chances of getting an answer:1.Start with a clear question, so others know what you're trying to solve.2.Describe what you have already tried; that will help others narrow down possible answers.3.Share your app as an open app, so that others can access it. If your app is sensitive and private, use some clear screenshots to show what you have done so far.If you file a bug report, please include thorough reproduction steps so that our team can best assist. Watch our Academy quick tip on what to include in a bug reportIn general, you'll always have more help when users can see the current state of your app.PreviousBuilding Your First AppNextApplication & Data OwnershipLast modified 1yr agoCopy linkOn this pageHow long does it take to learn?Academy resourcesGetting help









Creating, saving and deleting data - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookCreating, saving and deleting dataThis article covers how to work with the data in your database by creating, changing and deleting thingsBubble comes with a range of different ways to work with the data in the database to:Create new thingsMake changes to existing thingsDeleting thingsManipulating data in the database is done in three different ways:You can set up workflows that trigger on specific events, such as the user clicking a Save changes buttonYou can use auto-binding to save changes in the database every time the user provides some input to an input field​You can edit data directly in the database using the database editor. This option is only available to users who have that access in the Bubble editorWorkflowsA workflow is a collection of actions that run in sequence whenever an event happens. You can choose between many different types of events, such as a button click, an input field being updated or when a specific condition is true.ActionsThere are few different actions that make changes to the database. You can click the links below to see the core reference entry for that action:​Create a new thing: creates a new record of a specific data type and optionally saves information in the fields of that data type​Make changes to a thing: saves new information to a thing, replacing whatever was in the field before​Make changes to a list of things: same as above, but works on multiple things at once.​Make changes to the current user: the same as above, but works directly on the user that started the workflow​Delete a thing: deletes a thing from the database​Delete a list of things: same as above, but for multiple records​Copy a list of things: creates an identical copy of a list of existing thing with a new unique ID and  updated Created date and Modified date fields. You can copy up to 50 things in one operation.By combining these actions in various ways, you can work with new and existing data in a flexible manner, and even include additional actions that are related or unrelated to the database.ExampleLet's say you have set up a form that lets a user edit their own profile. In that case we would have some different input fields that let the user provide information. We could then have a button that triggers the workflow:In this example, we have a list of input fields where the user can provide some information and then click the button element to save those changes. Click the image to see a bigger version.The setup above would mean that no changes are saved to the database until the user actually clicks the button.Note that some information, like email and password, has to be changed using a different action from the Make changes to thing. Because of the sensitive nature of user credentials, it's necessary to handle them differently to ensure their security and protect user privacy.

Article: User accounts​Here we are combining the An element is clicked event to trigger the Make changes to the current user action. Together these two steps make up the workflow.Using workflows let you set up additional actions after the first one to perform other relevant tasks. For example, we could use the Alert element to display a message that the operation was successful:In this example we're setting up an additional step to show a message to our users that the changes have been saved. Note that there needs to be an Alert element on the page for this action to become available.As we can see in this example, workflows are useful when you want the user to be able to decide when to save the changes, and if you need to chain more than one action in the workflow.Auto-bindingAuto-binding means to bind an input element to a specific field on a data type. When this is set up, Bubble will automatically save any changes made in that element to the database. This means that you don't need to set up any actions to make the changes.Auto-binding is connected to a field, meaning that the data format of the input element and the data field must match: for example, a field containing a date must be connected to an input element that expects a date from the user.Also, auto-binding will only work if the parent of the input element has a data type loaded into it and it cannot create new things: only write to things that already exists.Auto-binding is set up in the element property inspector. By checking the Enable auto-binding on parent element's thing you can select what field to modify and optionally to show an alert each time the operation is succssful.In the example above we have set up a text input element that automatically saves the input to the field Name on the user. The user is loaded into the parent, which either a container element or the page itself.The data is saved whenever the element loses focus, meaning that the user has clicked or tabbed away from the input field. Bubble will display the loading bar for a brief time to show the user that the data is being saved.Note: Auto-binding on an input will run immediately, rather than waiting for the "next step" when using the step-by-step feature in the debugger.Showing an alert on successWhen auto-binding is active you can show an alert to notify the user that it was successful. To use this feature, you need to first place an alert element on the page. Checking the Show an alert on success lets you select which Alert element to use and what message to show.In the screenshot above you see we have created an alert element and checked the Position the alert at the top box to make sure it's displayed as a full-width bar at the top of the page.On the input that has auto-binding activated we pick the alert element we just created. We also created a custom alert message that coincides with the field that was changed.Comparing workflows and auto-bindingThere are some key differences when choosing to work with workflows or auto-binding:UXThe first is simply how it affects the user experience. In some forms it makes sense to let users review their information and not save anything until they click a button. In other cases it's more efficient to save the information as soon as the field has been edited. It's up to you as the developer to decide what's best in each case.SecurityBubble handles security on actions and auto-bind a bit differently:WorkflowsWorkflows are not affected by privacy rules and need to have their own conditional expressions set up to control who can do what. As an example, in the action below we have set up an expression that dictates that a user can only edit a profile if it's his own:The expression above will check that the user being edited is the current user. This ensure that users can only save changes to their own profile.Auto-bindingAuto-binding has a dedicated privacy rule which dictates under what circumstances changes to the field will be saved. The field will still be editable, but when it loses focus it will generate an error message if the privacy rules doesn't allow for the user to save changes via auto-binding.In the screenshot above we have set up a privacy rule that allows the Name field to be edited if the user being edited is the same as the current user. If someone else tries to edit this user with auto-binding, it will generate an error message.PerformanceWorkflows and auto-bind also has a slight difference in how they behave from a performance perspective:Workflows sends all the changes that need to be made in one big chunk to the server. This means you will have fewer slowdowns, but the one you have may be longer, depending on how much data is transferredAuto-binding sends the updated information to the server immediately when a field is edited. This means you will have more, but possibly shorter data transfersThere's no right or wrong answer to what the right approach is. Also, it's important to note that the difference can be very small, often negligible. While the difference is there, it's important to weigh the pros and cons in terms of the total user experience to decide what method is best.The database editorBubble also lets you edit data directly in the built-in database editor. This works both for the Development database and the Live database.You access the database editor by going to the Data – App data tab and selecting the data type you want to edit. You can search for specific things and edit them by clicking the edit icon.Clicking the pencil icon next to a thing lets you make changes to it.Editing directly in the database is useful when you need to make a quick update, but as a long-term solution we recommend setting up your own forms to edit data. FAQIf I use auto-binding, can I still run additional actions when something is saved?Yes. You can set up a workflow using the An input's value has changed event and place additional actions there. It's worth noting that the auto-bind operation may or may not have finished in time for the action to register the change. In other words, if any of the actions in that workflow rely on the data having been saved to the database, you may want to save it in a workflow instead of auto-binding. That way you can ensure that the process has completed by using the Result of step X data source. Can I create new things with auto-bind?Auto-bind only works on existing things, and cannot create new ones. If you try to write something in a container that has no data loaded, the operation will fail without showing any errors.PreviousData types and fieldsNextFinding dataLast modified 4d agoCopy linkOn this pageWorkflowsActionsExampleAuto-bindingShowing an alert on successComparing workflows and auto-bindingUXSecurityPerformanceThe database editorFAQ









Recursive API Workflows - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationThe Data APIThe Workflow APIWorkflow API Privacy RulesWorkflow API endpointsAPI WorkflowsCreating API WorkflowsScheduling API WorkflowsRecursive API WorkflowsCase: Stripe notificationsThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookRecursive API WorkflowsThis section describes what recursive Workflows are and how to set them upHelp us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​API workflows can be set up to be recursive, meaning that they reschedule themselves as part of the workflow.This is not a Bubble feature per sé but a method of combining Bubble’s backend features to unlock some powerful behaviors.If you are coming from a programming background, you may know this as a “for” loop or a “do while” loop.By having an API workflow reschedule itself, you can open up for:Looping a workflow to perform processing on a list of thingsSetting up workflows that automatically run at set or flexible intervals

Processing a list of thingsRecursive workflows are useful to repeat a set of actions multiple times, such as when you want to apply some processing on a list of database records. The reason you may want to do this rather than use the Make changes to a list of things action is that you have a lot more control over your server resources. Database operations spend your server's resources, and if you are trying to write to hundreds or thousands of database records simultaneously or in very short intervals things may start to slow down or even time out.By using a recursive workflow, we can instruct Bubble to go over each item one by one and we can set up a customizable delay in-between each iteration to make sure we don't overconsume server resources.Imagine that you have a list of items that you need to process one by one. You could use a recursive workflow to process the items.1.First, set up an API Workflow with a parameter containing the data type you want to process. Make sure to check the Is list/array to tell Bubble that we are passing a list of things rather than a single record.

For this example, we’ll call the parameter rentalunits and set the data type to Rental Units.

2.Now add the action that you want to perform. For this example we’ll simply generate a random string for the name of the rental unit. Set the Thing to change to rentalunits:first item. This way we’ll make the change on the first item in the list.

3.Now we’ll change the Unit name field by using the Calculate Randomstring feature

4.Our next step is what makes this a recursive workflow. We’ll now use the Schedule API Workflow to make the workflow run again. Three points are important to include:

1.First, we schedule the workflow slightly into the future. This is to avoid the looping happening so fast that we spend too much of the server capacity. We’ll schedule the next iteration at the Current date/time + seconds: 1 to tell Bubble to wait for one second in-between each cycle.

If you have a complex workflow with many actions you may want to increase the waiting time.

2.Secondly, we need to pass the same list as was originally passed to the request, but remove the first item. This way we make sure that it goes on to work on the next item in the list in the upcoming loop.

We do this by passing the parameter rentalunits:minus item:rentalunits:first item

3.Then, we need to add a condition that checks whether there is a next item. We do this by counting the number of items left after the first one has been removed: rentalunits:minus item:rentalunits:first item:count > 0.

This condition makes sure that the workflow doesn’t loop forever but stops when the count is zero.Running at intervalsTo set up a Workflow to run at set or flexible intervals, you simply set the rescheduling action to user the current date/time + any value that you want in-between the cycles. For example, setting the schedule action to use the current date/time + months:1 will ensure that the cycle runs exactly once every month from the time it is scheduled.​PreviousScheduling API WorkflowsNextCase: Stripe notificationsLast modified 1mo agoCopy linkOn this pageProcessing a list of thingsRunning at intervals









Gallery Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookGallery AppsBy Zeroqode TeamVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!Speaking about gallery type of apps will surely lead you to apps like Instagram, Facebook, Pinterest, and many others.Gallery apps often come with features like image management by categories, comment threads for each image, likes/dislikes from other users, and others. We can use Instagram as an example of such an app.The following article will show the recommended data types and option sets that can be a good starting point when developing the database of your gallery application. An app built with such data types will allow users to efficiently upload, manage and share images in a user friendly way.Data types recommendedThe key data type is GalleryImage, which corresponds to the type of item being displayed in the gallery. Users upload GalleryImages, sort them into Categories and can create Comments on anybody’s Images.GalleryImageThe key data type that is used in this kind of application. Images can be stored both within the app itself or on third-party storage (to lower the database storage costs).Suggested fields on this typeimage (image): most important field, where the image file itself is storedtitle (text): a title can help other users better understand the imagedescription (text): in addition to the title, a short description can be useful toocategories (list of Category): stores one or multiple Categories that the image is attributed toOptionalfavorite (yes / no): lets a user mark certain of their own images as favorites, e.g. so that they can be displayed at the top of that user’s profile pageNote: if you want to build the feature to allow other users to “like” another user’s image, that would most likely be its own data type and is beyond the basic starting point of this guide; see this documentation for guidanceviews (number): saves how many times the image has been viewed by usersPrivacy rules for this data typeAssuming this is a public gallery, where anybody can see the images in the gallery, we might not need any privacy rules on image since none of the fields are particularly sensitive. You may want to consider allowing the creator of an image to use auto-binding to modify some of the fields within their control, like the title, description, categories or favorite.CategoryFor better image management and UX, our app will be able to assign one or more categories to an image. This is conceptually similar to an “albums” feature or a “tags” feature.Suggested fields on this typename (text): the category’s nameimages (list of images): stores the images assigned to this categoryNote: here we are choosing to both save the assigned categories on an image as well as save the assigned images on a category; this is effectively double-writing the data and this decision comes with its own advantages and disadvantages; see documentation to learn morePrivacy rules for this data typeSince this is not sensitive information, we likely do not need privacy rules on this data type.CommentPublicly available images often come with a comment thread where any user can leave a comment. This data type stores each comment as its own thing in the database.Suggested fields on this typecontents (text): stores the comment textgalleryimage (GalleryImage): attributes the comment to a specific image in the databasehidden (yes/no): a useful field to have in case you want the ability to moderate commentsPrivacy rules for this data typeGenerally our assumption is that all comments can be viewed by anyone, so again we probably do not need privacy rules here. If you want to build a moderation feature, you can create a privacy rule to not find any Comments in searches if ‘hidden’ is yes.UserAll apps come with the User data type. We’ll assume that there are different ‘levels’ of users in this app with different privilegesSuggested fields on this typedisplayname (text): stores the name the user wants to be publicly seen asrole (User Type): stores whether the user has special permissions like moderator or admin rightsPrivacy rules for this data typeUser information tends to be sensitive, so privacy rules are a good idea here. You likely want to create privacy rules so that only the user can see their own email address, for example, while the displayname field is what’s public to everyone. If you want admins to be able to see users’ emails too, that would be another privacy rule on User to allow that. You likely also want to hide the role of the user from anybody except themselves, moderators and admins. Note that if you have the role here, you can create privacy rules on previous data types we’ve seen (e.g. the hidden field on Comment) so that moderators and admins can update that field as needed.Option sets recommendedCategoryFashionCarsSportHealthYou can extend this list to include any categories that fit your app and audience. It is also a decision you have to make as the app creator whether to have Categories as an option set or a data type - here is some documentation to help you with that choice.User TypeAdminModeratorUserThis option set is used to define the available user types. Different user types can have different permissions in the app.Example uses in your appOn the homepage of the app, you could show all images in the gallery by using a repeating group doing a simple search for GalleryImage with no filters.For each user’s profile page, you can fill a repeating group with a search for all GalleryImages with the filter that the creator is the page’s user​When you ‘click into’ a GalleryImage, you might have a page that just features that one GalleryImage with a repeating group that is filled with a search of all Comments where the galleryimage is the GalleryImage of the pageAdditional notesTo make your app attractive, it would be nice also to integrate the possibility of image editing, adding short videos like Tik Tok, as well as receiving push notifications and following/unfollowing other users.The suggested data types and option sets are just a recommendation, so feel free to build your app in your own style!About the author: ZeroqodeBTW, good examples of ready-made gallery Bubble apps are the Clonegram and Flicky templates from Zeroqode.They also have built a great range of 🔌 Plugins to boost the development of your Bubble app, as well as 🎓 Lab courses to improve your Bubble skills.PreviousPortfolio AppsNextOnline Store / Ecommerce AppsLast modified 11mo agoCopy linkOn this pageData types recommendedGalleryImageCategoryCommentUserOption sets recommendedCategoryUser TypeExample uses in your appAdditional notesAbout the author: Zeroqode









Directory & Listings Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookDirectory & Listings AppsBy Gaby Román, Co-Founder of Coaching No Code AppsVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!Directory apps are typically designed as user-friendly databases that make it easy to find a specific listing or profile. For example, TripAdvisor is a directory of businesses that can be easily searched, where search results appear in a list or map format. Users can then select a business and view more details about it.The following data structure is recommended for applications where users are generating listings or profiles for other users to find. These listings or profiles can help users hire for services, purchase products, book reservations, network with others, etc. Typically, these listings or profiles can be reviewed and rated by other users. Popular examples of this type of app include: Yelp, Airbnb, TripAdvisor, Amazon’s product search, LinkedIn, etc.These suggested data types and option sets should help you build common functionality for directory apps in a way that keeps things scalable.Data types recommendedThese data types will allow users to create their own listings, categorize them, and upload images. The app’s front-end design would dynamically display this content in a single layout. Users would first search for listings with any relevant filters, select one from the results, and then view the full details of their selection. The layout would look the same for all listings, but the content would be different.Users can also create reviews of any listing they see. The listing or profile page would then display all related reviews with an aggregated score or star rating.Search is typically a core feature for an app like this, so the following types and option sets create powerful filtering flexibility. Users should be able to select multiple filters in different combinations to find the exact results they’re looking for. This is possible by relating listings to specific categories, aggregating their review ratings, and saving helpful properties like location, dates, statuses, etc.UserThis is Bubble’s only built-in data type. Anyone who needs to be able to log into the app should have a User record.Suggested fields on this typeFirst Name (text)Last Name (text)Favorite Listings (list of Listings): This is a relationship field that links the User to a list of Listing records, which are organized under a separate “Listing” data type.Type (list of User Types, an option set): Users can be more than one type of user, which will help you create conditions and/or privacy rules around what data or features they have access to in the app.For example, a “Listing Owner” should have the ability to manage their own listings whereas “Consumers” can only search, view, and review listings.Airbnb has Hosts and Guests. While a user can technically be both, it’s important to know what kind of interaction they’re coming to the app for. Hosts have the ability to create listings, whereas Guests have the ability to book listings. Hosts can view payments received, whereas Guests can view payments made, etc.System Admins typically refer to you, the app builder, to create global access to all parts of the app.See how this field influences privacy rules for the Listings data type, belowPrivacy rules for this data typeThis type of application is structured to make Users and/or separate Listings easy to find, so there isn’t as big of a need to restrict this type. With that said, we do have a few minimum recommendations: only allowing the user to auto-bind on their own record and “view” their own sensitive field values. System admins may get these abilities as well.Current User is This User > all accessCurrent User is not This User and Current User’s Type doesn’t include System Admin > find in searches, view all fields except sensitive fields (home address, emergency contact, etc.), no auto-bindingCurrent User’s Type includes System Admin > all accessListingThis is the heart of a directory app. Users will search all Listings, so make sure you include fields for any details that need to be displayed to the user or which can help filter search results.Suggested fields on this typeTitle (text)Description (text)Location (geographic address)Owner (User): While Bubble has a built-in “Creator” field for all data types, having a custom Owner field like this will allow you to change owners. If you make this a list of Users, then you can create multi-owner / multi-editor capabilities.Categories (list of Categories): This field will help any search functionality filter Listings by Category.‘Featured (yes/no): This field can help you sort results by showing any Listings where “Features = yes” at the top of the list.Status (Listing Status, an option set)Average Rating (number): This value can be re-calculated every time a new review is created for the Listing. It will also help users filter their searches based on a rating minimum and/or sort by rating.Privacy rules for this data typeGiven that this is the heart of the application, you can create many rules around the type to specify access rights. Here are some suggested rules that allow Listing Owners to modify their own Listing, System Admins to access everything, and Users unrelated to the Listing to view but not edit it:Current User is This Listing’s Owner > find in searches, enable auto-binding on all fields except the “Status” and “Featured” fields since those are reserved for the System Admin to update.Current User’s Type is System Admin > all accessCurrent User is not This Listing’s Owner and This Listing’s Status is Published > find in searches and view all fieldsReviewReviews are common in directory apps to help users find the most popular entities by seeing how other Users have rated them.Suggested fields on this typeRelated Listing (Listing): This field ties the Review back to the Listing it’s about.Rating (number): Whether review ratings are on a specific scale or not (e.g. 0-5 stars), saving any kind of number to each review will allow you to calculate Listing Review averages by aggregating on this field.Comment (text)Images (list of images): If it makes sense to allow consumers to upload images alongside their review (think Amazon product reviews), then this field will support that.Privacy rules for this data typeReviews should only be modified by the user who created it. This also applies to the System Admin to maintain integrity:Current User is This Review’s Creator > all accessEveryone Else (Default Rule) > find in searches, view all fields, no auto-bindingImageDepending on how important images are for your directory app’s Listings, you may want to store any related images in a separate data type. For example, Airbnb listings contain many images for the accommodation, and organizing those in a separate data type allows you to save separate captions per image or indicate which ones should be the featured image; as opposed to an internal company staff directory where the only image might be the person’s headshot which can be saved directly to the Listing itself.Suggested fields on this typeRelated Listing (Listing): This field ties the Image back to the Listing.File (image): This is the uploaded image itself. We’ve labeled it “File” so that your expressions can read “Image’s File” even though technically the field type is an image and not a file.Caption (text)Featured (yes/no)Privacy rules for this data typeImages should follow nearly the same set of rules as their parent listing to allow creators to manage them only:Current User is This Image’s Creator > all accessEveryone Else (Default Rule) > find in searches, view all fields, no auto-bindingCategoryIf your users should be allowed to create categories or you plan on having dozens or even hundreds of categories, use a separate data type to organize them. Otherwise, if your app’s category list is more contained and users can’t create new ones, then an option set might be more convenient.Suggested fields on this typeName (text)Parent Category (Category): This field will help you create an infinite hierarchy of categories and sub-categories. Any Category without a parent will tell you that’s the top of its hierarchy. Any Category with a parent will tell you it’s a sub-category of another Category.Privacy rules for this data typeThe privacy rules here can vary depending on how much control you want your users to have over them. Let’s assume that while users can generate categories, they can only modify their own. Some of the logic around editing conditions may need to be set up within the workflows and element design. For example, users can only edit if there are no listings attached to their category.Current User is This Category’s creator > all accessEveryone Else (Default Rule) > find in searches, view all fields, no auto-bindingIf the System Admin is the only person who should be able to edit Categories, then these rules are more appropriate:Current User’s Type includes System Admin > all accessEveryone Else (Default Rule) > find in searches, view all fields, no auto-bindingOption sets recommendedListing StatusDraftUnder ReviewPublishedArchivedMany directory or listings applications will have content creators (in this case, listing owners) create the entity as a draft first and then submit it to the platform for review. If accepted, the platform will change the status to Published so that only Listings where “Status = Published” appear in search results.User TypeSystem AdminListing OwnerConsumerIf your application has different types of users where access to data, pages, even workflows are specific to that type, an option set is a great way to identify who the users are. By making the “Type” field under the User data type a list, Users can be more than one Type (if necessary).Example uses in your appSearch for Listings within 10 miles of a selected locationIf this app is meant to connect a user with home renovation professionals, then they may want to do a search with a location constraint (and sort by best rated).The following expression can generate the appropriate listings in a repeating group:Search for Listings (Status = Published; Location is within radius input’s value of location input’s value; Categories includes category dropdown’s value; sorted by Average Rating)Search for Listings that are at least 4 stars or above and are the newest in the systemSearch for Listings (Status = Published; Average Rating >= 4; sorted by Creation Date)Additional notesKeep in mind that your directory app will have customizations not covered here. Whenever you need to store a unique combination of values, consider creating a new data type. For example, the Review data type is the unique combination of a User (consumer), a Listing, and the User’s rating for that Listing.You might also notice that we don’t have very many list fields to create one to many relationships. We recommend using list fields when the number of items in the list is going to be relatively small. For example, a Listing may have up to 5 Categories whereas it could have hundreds of Reviews. So, for better performance, we chose not to have a list of Reviews under the Listing data type. Instead, as long as the Review has a “Related Listing” field, we have everything we need to find that Listing’s Reviews.About this author: Coaching No Code AppsYour database structure creates the entire foundation for your app as a whole, and because of its importance, it's one of the first things we focus on with our own clients before moving onto broader functionality. For help putting all the right pieces into place and creating a scalable app using Bubble, join a free workshop focused on scoping, building, and launching your no code app at https://coachingnocodeapps.com/workshop.PreviousMarketplace AppsNextSocial Network AppsLast modified 11mo agoCopy linkOn this pageData types recommendedUserListingReviewImageCategoryOption sets recommendedListing StatusUser TypeExample uses in your appAdditional notesAbout this author: Coaching No Code Apps









The Basics (Legacy) - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingResponsive designBuilding responsive pagesLegacy articlesThe Basics (Legacy)Building Responsive Pages (Legacy)Migrating Legacy PagesTips When Designing (Legacy)TemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookThe Basics (Legacy)This page covers educational material relevant to the Legacy Bubble Editor.The Bubble Visual Editor is based on the What You See Is What You Get (WYSIWYG) principle. You can position elements where you want, down to the pixel, and your app will look like that in Run-mode. These are the basics to keep in mind when you are building an interface.Parent-Children relationshipSome elements can be containers (found in the container section of the New Element palette), and all elements in Bubble belong to a parent. The page itself is the top parent, and all elements on the page will have the page as their parent. To draw an element inside a container, move your mouse over the container, and you'll notice the borders turn red. Once an element is inside a container, its behavior will follow the parent's behavior, both in Edit and Run-mode. For instance, if you move an element in the editor, the children will stay at the same place relative to their parent. In Run-mode, if you hide a parent, any element inside the container will be hidden as well and, if you show a parent, any element inside it will become visible too. Dragging an element lets you change its parent.The Elements Tree on the left lets you see the structure of your page, and also show/hide elements to better edit and organize them. Many elements will be hidden by default, and you will be able to access them clicking on the eye icon (this will show all parent elements that are also hidden, if necessary).The Element Tree has two modes. You can either decide to show all elements on the page in a tree view, with parents and children, or only show hideable elements. Hideable elements are elements that are hidden on page load (from which you have unchecked the box 'This is element is visible on page load'). In other words, you will only see these elements in the list when the option 'only show hideable elements' is checked. This is a useful feature when editing a page because it lets you quickly show elements that aren't visible for editing purposes, while the other mode is useful to get a full view of the page.Absolute positioningElements in Bubble are positioned absolutely, using coordinates (X, Y) that position the element relative to its parent. That way, you have full freedom to position elements wherever you want on the page. This is different from many visual HTML/CSS editors that constrain you to position elements inside some boxes on the page. While it offers more freedom, it also means you need to be careful to have a clean design, and will need to understand Bubble's responsive page settings.Responsive designBubble pages are responsive. In other words, they will adjust to the width of the page so that they look great on mobile devices. Since you can position elements to the pixel, you may have to configure a few settings for your page to behave properly as its width changes.Editing elementsYou add a new element on the page by clicking the type of element you want to add on the visual element panel on the left-hand side (the New Element Palette), and then drawing that element on the page. Once an element is drawn on the page, you can move it by dragging it around, and edit its properties by double-clicking on it. With a few exceptions, most elements are draggable and resizable; Popups are modal containers that appear on the top of the page, and are always centered on the page. Therefore, they are not draggable. When you double click on an element, it reveals the Property Editor, which lets you modify the element fields.Naming elementsWatch our Academy quick tip for recommendations on naming your elementsYou can edit the name of your element in the top of its Property Editor. Select the existing name and start typing. Conventions for naming your elements is entirely up to you. For example, you could simplify each element name and write what it does next to it, such as “btn submit," or you could capitalize the first word all together or use underscores. Whichever convention you pick, make sure to use it throughout your app. The consistency will help you locate your elements and debug your design as your app grows.By default, Bubble names new elements by its type. If we add a button, Bubble will name it "Button A" if there are no other buttons on the page, or "Button B" if there is a button already. If you change the contents of that element to include text, Bubble will take that text and change the name of the element for you. For example, if we change this button's text to "Submit," the name will update to "Button Submit." You might have several "Submit" buttons throughout your application, so it's a good practice to name your elements as you go along so that you can keep track of each. Types of ElementsThere are three main types of elements: Visual elements, Containers, and Input forms.Visual elements are elements that display some information, or UI elements that users can interact with by clicking. However, users will usually not be able to type any information into them.Containers are elements that contain other elements. Their visibility will impact the visibility of their children, and they can have a defined type of content.Input forms are elements where users can enter information. The most common case will be an input form where one can type some text.While each element has its own fields (for instance, input elements have placeholder colors), most Bubble elements have some shared styling properties. These properties can be used to change the background, borders, shadows, font style, etc. Most of these general properties will be modifiable in the Styles tab too.PreviousLegacy articlesNextBuilding Responsive Pages (Legacy)Last modified 8mo agoCopy linkOn this pageParent-Children relationshipAbsolute positioningResponsive designEditing elementsNaming elementsTypes of Elements









The API Connector - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIThe API ConnectorAuthenticationCase: Google TranslatePlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookThe API ConnectorThis section covers Bubble's API Connector. The API Connector is used to make outgoing connections to external applications and use it as a data source or trigger actions.Help us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​In the Bubble API section we covered API requests that are incoming – they are initiated by an outside system and Bubble takes some kind of action based on their credentials, endpoint and parameters.This is our in-depth manual article on the API Connector.

If you are familiar with APIs and want the shorter technical reference go to the API Connector reference entry.In this section we’ll look at requests that are outgoing – when your Bubble app sends a request to an external system. When you use the API Connector, your Bubble app is the client and the API service is the server.You can read more about the client/server relationship in our Introduction to APIs.

Article section: The client/server relationship​​The API Connector handles calls that come from your Bubble app to another application.​By pointing the API Connector to different URLs (Universal Resource Locator) you can access specific resources that the API provider offers.Just like incoming requests these calls can ask for some data to be returned or for an action to be performed.Structurally, you’ll recognize what they look like: they also use an HTTP request that includes a method like GET, POST, PATCH and DELETE.Bubble's plugin store offers thousands of plugins both made by Bubble and the community. Many plugins let you connect to well-known API services quickly and effortlessly without having to set it up in the API Connector.

Link: Plugin store
Article: Plugins that connect to APIs​The API ConnectorThe API Connector is a special plugin built by Bubble's development team that lets you connect to any service that exposes a JSON-based, RESTful web API. You can use this to add API calls to fetch data from an external service, or post data to trigger some actions on the service's end.Our long-form video course gives you an introduction to how APIs work and how to use the API Connector.Installing the API ConnectorThe API Connector is a plugin created by Bubble and needs to be installed in your application before it can be used.To install the plugin:1.Navigate to the Plugins section of the Bubble editor and click Add plugin.2.Search for API Connector3.Click the Install buttonClick the Install button to use the API Connector in your application.External API documentationEvery API service is different and to make it possible to connect successfully to their platform, most providers offer API documentation. Using the external documentation is critical to understand how to authenticate and make calls to that specific service, so we recommend you get to know it before you start.API providers like Stripe offer detailed documentation on how to set up API connections.If this is your first time working with APIs, the documentation may seem fairly technical at first, but you’ll find that with the RESTful API style most providers follow a similar standard.Most APIs will go through three steps before they can be used:1.First set up the authentication for the API service2.Secondly we set up the different call(s) we want to use3.Then we initialize the call to make sure it works and to see the server's responseTest accountsMany API providers such as Stripe offer a demo account that you can use to test your API calls without making any actual changes (or payments in the case of Stripe). Check whether the service you want to connect to offers this kind of testing environment to be able to properly test all your calls with no risk.Naming API providersThe first part of setting up a new API request is to give the service a name. This will typically be a descriptive name (often the same as the provider’s name) such as Stripe, Google Cloud and OpenWeatherAPI.Giving your API a descriptive name makes it easier to organize the different providers.The name is used around the Bubble editor to organize the different calls that we’ll add later. It’s therefore a good idea to use a name that makes the relevant call easy to find later.The API name becomes part of your application’s client-side code and should not contain any sensitive information.AuthenticationAs we covered in our general guide on how APIs work, many API services will require authentication. This is the process of identifying who the client is in order to determine what resources it should have access to.Authentication methodsThere are many different ways to authenticate. Most API providers will have documentation available online that specifies their authentication method and many require you to generate a unique API token.The list below represents the most common authentication types. You can read more about each type in the article below:

Article: Authenticating with the API Connector​MethodDescriptionNone or self-handledNo authentication requiredPrivate key in URLThe private key is included as a parameter in the URLPrivate key in headerThe private key is included as an HTTP header in the requestHTTP Basic AuthThe client sends username and password in plain textOAuth2 Password FlowThe client sends username and password and receives an access token in returnOAuth2 User-Agent FlowSimilar to OAuth2 Password Flow, but for user-agentsOAuth2 Custom TokenThe client sends a custom token to the server for verificationJSON Web Token (JWT)The client sends a JSON web token to the server for verificationClient-side SSL certificateThe client presents a SSL certificate to the server for verificationAPI tokens and securityIf you are new to APIs it’s important to emphasize here the importance of keeping your API token secret. API tokens in principle serve the same function as a username and password, but they add security and flexibility that is useful to an API provider:1.They can be easily generated and revoked: Unlike a username and password, which are typically created and managed by an actual person, API tokens can be easily generated and revoked by the API provider. This makes it easy to control access to the API and limit the impact of any security breaches.2.They are more secure: API tokens are generally more secure than username and password combinations, because they are typically harder to guess or brute force. They can also be rotated regularly to further improve security.3.They are more convenient: API tokens are generally easier for developers to work with than username and password combinations, because they do not require any special handling. This can make it easier for developers to use your API and can increase adoption of your API.Just like a username and password, a token is only as secure as the one who manages it. Tokens to important services like Stripe should be handled with the utmost confidentiality.API keys/tokens should never be stored in Option Sets or in on-page elements and/or workflows, since that makes them visible in your application’s client-side source code.Shared headersSometimes you'll need to add the same header to all your calls. This can be related to authentication, but it doesn't have to be. Another typical key and value included in the header section is the content-type, which specifies the expected format of the call.Consult the external API documentation to see if they require any specific headers.Shared parametersShared parameters, like the headers described above, will be added to each and every call in the relevant API. Shared parameters are added to the body of the request rather than the header. It doesn't make any technical difference whether you add headers and parameters directly to each call or use the Shared headers/parameters feature.

Adding them to this section will simply save you some time and make the headers and parameters easier to set up and manage.Adding callsNow that we have 1) given our API service a descriptive name and 2) authenticated as a client (if necessary) it’s time to add the actual calls.To add a call, click the Add another call buttonAgain we need to name the call before doing anything else. Give it a descriptive name that can be combined with the name you gave earlier to the API provider. For example, you might name the API Provider Stripe and the API Call Create payment.Secondly, we need to tell Bubble what this call will be used for in the Use as dropdown.Use asThe Use as dropdown lets you select whether to use that particular API call as a data source or an action:DataUse as data means that Bubble will treat the API call as a data source. Use this for calls that you set up to retrieve data that you want to display in your app. You will find API data sources in the Get data from external API in the dropdown list of data sources.Setting the API call to be of type Data allows you to use the call as a data source. That way you can use it to populate Repeating Group for example.ActionUse as action makes the API call available as an action in your Workflow editor. You will find API action calls in the workflow editor under Plugins. Setting an API call to type Action lets you run that call from a workflow in your application. The label (RentalSoftware - Create Unit) is a combination of the name you gave the API provider and the name of the call in the API Connector.The HTTP methodWhen a call is made to a specific resource, we need to specify an HTTP method that tells the server what kind of action we want to initiate. The five most used HTTP methods are:ActionDescriptionGETRetrieve dataPOSTCreate dataPUTUpdate dataPATCHReplace dataDELETEDelete data
HTTP methods are sometimes called HTTP verbs. Generally they are used as illustrated in the table above, but to find the correct HTTP method for the resource you want to access, check the API providers documentation.Setting the HTTP method in the dropdown in red tells the external app what kind of action you want to take. GET usually means you want to return data.The URL and endpointIn our general article on APIs we explored how a RESTful API call uses a URL to identify a specific resource.For example, when we were looking at Bubble’s Data API (used to give external systems access to the database) and Workflow API (used to give external systems access to workflows) we looked at how Bubble generates a unique URL for each data type you choose to expose in the Data API and each API Workflow you choose to expose in the backend workflow editor.External RESTful APIs work in the same way: you direct your Bubble application to a specific URL in order to reach the resource that you want. Together, the HTTP method and the endpoint form a unique API endpoint that defines the specific action that is being requested.For example, a GET request to a "/users" endpoint might be used to retrieve a list of users from an API, while a POST request to the "/users" endpoint might be used to create a new user.In the example above, we have found the correct endpoint to translate a text using the Google Cloud Translation API. The documentation also Finding the correct endpointThe endpoint is the combination of the HTTP method and the URL (resource locator). What method to use and what the URL is differs between different API services, and you can usually find the correct endpoint by consulting the documentation of the API provider.Case: Setting up Google Translate in the API ConnectorTo have a closer look at how the API Connector works in practice, you can check out our guide on how to connect to Google Cloud to utilize the Cloud Translation API.

Article: Case: Connecting to Google Translate with the API Connector​PreviousCase: Stripe notificationsNextAuthenticationLast modified 1mo agoCopy linkOn this pageThe API ConnectorInstalling the API ConnectorExternal API documentationTest accountsNaming API providersAuthenticationAuthentication methodsAPI tokens and securityShared headersShared parametersAdding callsUse asThe HTTP methodThe URL and endpoint









Option Sets - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseFilesStatic dataApp texts (translations)Option SetsTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookOption SetsThis section covers Option sets, used to store a static list of options in a database-like structureOption sets let you set up different types of static options in a database-like structure, but without using the database. This is useful to store information like days of the week, marital status, colors, states, countries and other data that you want to load quickly and that's rarely updated.Option sets can be used to store static options and use them around your app. In this example we have saved a list of colors as options in a setOption sets become a part of your application's source code meaning that they are downloaded as part of the JavaScript file that makes up your application. As such, they don't require a database lookup and are cached on the user's device until you deploy a new version of your app, making them fast-loading and lightweight.This also means that Option sets cannot be added, edited or deleted by your users and require you to re-deploy your application before options become available in Live.Option sets, unlike the database, are not encrypted and become a part of your application's source code. Option sets should never contain any sensitive information.How Option sets are structuredAn Option set, as the name suggest, is a set containing options. To each set you can add a list of attributes that are similar to the fields on a data type. Attributes can be set to be one of the following types:textnumberdatedate intervalyes / nofileimagegeographic address[other Option sets]To summarize, each Option set consists of a collection of options that share the same attributes of one of the types above.Just like data types, Option sets can be linked. For example, you could set up two Option sets called State and City and create an attribute on the City that links to the State option set.In the example above, you see the Option sets on the left-hand side (1) and the attributes on that Option set on the right-hand side (2). The Display attribute is a built-in text field that identifies each option in the set.Bubble doesn't require the value in the Display attribute to be unique, but it can still be a good idea to make sure that they are in case you need to filter the options by their Display value later. If you have duplicate values you may not get the results you want.Creating Option setsTo create a new Option set, first access the Option set tab by going to Data - Option sets. The list on the left-hand side will be empty and showing only the New Option set box. To create a new set, provide a name and click Create.After creating the new Option set (such as State), you can set up attributes on that set: in many cases you can use the built-in Display attribute to store the main identifier of each option. In this case this would be the name of the state, such as Massachusetts. You can create as many attributes on it as you need. For example, you could add a second text attribute containing the state code (MA).Adding OptionsAfter an Option set has been created and you have added the attributes you need to it, you can start adding the options. In an Option set like City, the options would be the different cities you want to list, such as Boston and Washington.To create a new Option, pick the Option set you want to add it to, and type in a name in the New option field, then click Create. The name you provide will be stored in the Display field on that Option.Editing attributesTo edit the attributes on an Option set, click the Edit attributes link next to the Option set in the list. This is not visible until you have created at least one option. In the example above we can assign the City we have created to a State – see below on how to link the two.To modify the attributes of an option, click the Modify attributes link in the lists of options.Linking Option setsYou can link Option sets just like data types, by setting up the attribute on one or both of them to reflect the other. If we create an Option set called City, we can link that city to the State Option set:In the example above, we are linking the two by:1.Clicking the Create attribute button on the City Option set2.Picking the State Option set from the list of available typesJust like with data types, the attribute can also be set to be a list, but this won't be necessary in the example with State and City.When the two are linked you can use it to filter a list of Option sets (such as showing all Cities in the State of Massachusetts) or to display information in a page element, such as a text element showing Boston - Massachusetts.Using Option setsUnlike Data types, you don't search for Option sets: they are all loaded on page load and you can reference them in elements and workflows as needed.As a data source on an elementIn the example below, we are using Option sets to display a list of Cities in a dropdown element.1.We've set up a dropdown with the placeholder Pick a city2.In the choices style we pick Dynamic choices, which lets you define the data source​3.In Type of choices we select the Option set Cities4.In the Choices source we define what list we want to display. Note the difference between data types and option sets: we don't search for the options, we simply pick the All Cities to instruct Bubble to load all of them.

If you want to filter the results, you can apply the :filtered operator after the data source, such as All Cities:filtered. In that filter you place constraints such as filtering the Cities by their State attribute.5.In the Option caption setting we set which attribute to use as the option's caption in the dropdown. In our example we have saved the name of the City in the Display attribute. We could also extend it to show the City and State by expanding the expression:
 

The example above would make each City be displaye with their State in the dropdown, such as Boston - Massachusetts.In an expressionYou can also use an Option set as a data source in an expression and then filter or manipulate the result using operators.In the screenshot above we are setting up a conditional expression on the dropdown element. To reference an option set, you can:1.Select it from the list of options that appear at the top of the dropdown. Bubble knows that the Option set is City since we are referring to the value of the dropdown (which is set to be a City)2.You can use the Get an option data source to access all Option sets and use operators to find the right valueOption set FAQWhat are the main differences between an Option set and a database data type:Option setsData types... are part of your app's codebase and are cached in the user's device... are part of your app's database and need to be fetched from Bubble's server every time... are unencrypted and should not contain any sensitive info... are encrypted can store private data... are not protected by Privacy Rules... are protected by Privacy Rules... can link to other Option sets... can also link to Option sets... cannot link to a data type... can link to another data type... cannot be edited by your app's users... can be edited by your app's users... needs to be deployed for changes to be visible... are dynamic and any changes are immediately visible... can be referenced directly in an expression (such as referencing the Boston option without having to search for it)... can only be referenced by way of a search or a field on another data typeTo summarize, Option sets are insecure, static values that can only be changed by the app developer and data types are secure, dynamic values that can be changed by any user with access.Does Bubble only download the Option sets that are used on a pageAll Option sets are downloaded on all pages (or the cached file is used if the file has already been downloaded to the User's device). This means two things:To avoid having to download a lot of data, you shouldn't let your collection of Option sets grow too bigYou should never store any sensitive information in an Option set, even if it's not in use on the page, as it's still part of your app's source code fileHow do I search for Option sets?You don't search for Option sets in the same way as data types, since they are already downloaded the user's device and not part of the database. You can list and filter Option set options or reference one option directly without having to search for it. You can read more about that here.​performanceFiltering is done client-side​​​​PreviousApp texts (translations)NextTemporary dataLast modified 4d agoCopy linkOn this pageHow Option sets are structuredCreating Option setsAdding OptionsEditing attributesLinking Option setsUsing Option setsAs a data source on an elementIn an expressionOption set FAQ









Marketplace Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookMarketplace AppsBy Daniel Abebe, co-founder of HuggyStudioVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!Marketplaces connect multiple sellers of goods or services with buyers. Most of the time, a marketplace is created to bring more transparency into a market or make the buying process more efficient. While they can differ vastly from managed marketplaces to niche and B2B marketplaces, the standard business model is to capture value from each transaction. Famous examples include Airbnb, Amazon, Upwork, AliExpress.In this guide, we take you through the creation of the data structure for a home rental marketplace like Airbnb.If you are not familiar with Airbnb, here is a quick introduction into our use case with an overview of the basic functionality:Airbnb is a leading online marketplace that connects people who want to rent out their homes with travelers who are looking for an accommodation.Basic functionality includes:For both homeowners and travelersSignup / Login for homeowners and travelersEdit profile informationFor homeownersUpload/edit place (Pictures, Address, Price, Description, Amenities, …)Set place availability / unavailabilityManage bookingsReceive ratingsMessaging with travelers who booked the placeFor travelersDiscover and filter places based on location, type of place, price, rating, amenities and/or facilitiesBook a placeMessage with the homeowner after booking the placeRate placeData types recommendedUsers will upload and edit places. On the other hand, users will book and rate places. A messaging function will be possible for each booking. Places need to hold structured data so that users can easily filter places based on different criteria like price, location, type of places, …Good to know: In our use case, bookings are immediate and do not require a confirmation by the homeowner.User (default)The Data Type “User” is by default already available on Bubble.io. It helps you handle user authentication. Both sides of our marketplace (homeowners AND travelers) are users. In our example, the same user can upload places and/or book a place.Suggested fields on this typeemail (text) - this is a built-in field, i.e. it’s already there for youModified date (date) - also a built-in fieldCreated date (date) - also a built-in fieldSlug (text) - also a built-in fieldFirst name (text)Last name (text)My places (list of Places): Places uploaded by the user for rent; see this article on linking data typesMy trips (list of Bookings): Bookings made by the user (as a traveler)Admin? (yes/no): this defines the users who can access the platform’s admin dashboard where you can approve new places or review the overall platform activity. For your information, this is not a standard Bubble page - this page also needs to be built.Privacy rules for this data typeThis User is Current UserView all fields (checked)Find this in search (checked)View attached files (checked)Allow auto-binding (unchecked)Everyone elseView all fields (unchecked)First name (checked) → Our marketplace only displays the user’s first name, the last name is hidden.My places (checked)Find this in search (unchecked)Allow auto-binding (unchecked)PlaceThis Data Type is used to manage all data related to a property on our home rental marketplace. A User can upload multiple places.Suggested fields on this typeCreator (User, built-in)Modified date (date, built-in)Created date (date, built-in)Slug (text, built-in)Title (text): Name of the place like “Beautiful house in the mountains”Description (text): Description to get more information about the placePrice/night in USD (number)Pictures (list of images)Number of beds (number)Number of guests max (number)Bookings (list of Bookings): All bookings made for this place are saved back in this list to keep track of the place performance and availability. It also helps to pull all relevant data faster for the homeowner.Unavailability (list of date ranges): In our use case, we assume a place is always available except if a new unavailability was added to this list. This is a more scalable approach than requiring the homeowner to enter availability each month.Privacy rules for this data typeNo privacy rules required as Users need all information when browsing through or searching for places. Even the Bookings should be visible so that Users can see the ratings and the actual Place Availability. Under the Data Type “Booking”, we will add Privacy Rules to make sure only public information is accessible.Depending on the experience you want to offer to your Homeowners when creating/editing their place, you could create a Privacy Rule just for allowing auto-binding to homeowners. With a “Save” button, auto-binding is not necessary.BookingThe Data Type “Booking” is used to manage all data related to a booking on our home rental marketplace. A User can make several bookings of different places over their lifetime.Suggested fields on this typeCreator (User, built-in)Modified date (date, built-in)Created date (date, built-in)Slug (text, built-in)Homeowner (User): We can assume the creator of a place is the homeowner. Anyhow, by adding this “Homeowner” field, we have more flexibility when it comes to HOW a place is created. As an example, admins will be able to create a flat and simply add the rightful homeowner.Booked place (Place): We connect the booking back to the place to avoid orphaned entries (a booking with no place)Date range (date range): This will indicate the check-in and check-out of this trip.Number of nights (number): The number of nights is already available when we extract that information from the booking date range. Anyhow, saving it as a separate value will make it easier to display or calculate total costs for example.Total costs in USD (number)Chat (list of Messages): A chat is as simple as a list of messages that show chronologically. As a chat is only relevant to a booking, we store this list of messages directly under the booking.Rating stars (number): As a rating is connected to a single booking, we store the value directly under the booking.Rating comment (text): Same as rating stars.Privacy rules for this data typeThis Booking’s creator is Current User OR This Booking’s Homeowner is Current UserView all fields (checked)Find this in search (checked)View attached files (checked)Allow auto-binding (unchecked)Everyone elseView all fields (unchecked)Creator (checked)Date range (checked)Rating starts (checked)Rating comment (checked)Find this in search (unchecked)Allow auto-binding (unchecked)MessageThe Data Type “Message” is used to store text messages sent between users. A message doesn’t need to hold much information besides its content as it is stored in a list of messages under the booking already. This booking holds all relevant information like users in the chat, the booking dates and the specific place this chat is about.Suggested fields on this typeCreator (User, built-in)Modified date (date, built-in)Created date (date, built-in)Slug (text, built-in)Text message (text)Booking chat (Booking): We link this message back to the booking to avoid orphaned messages (a message saved in the database with no link to a booking chat). This also makes it possible to create privacy rules linking back to the booking.Privacy rules for this data type:This Message’s creator is Current User OR This Message’s Booking’s Homeowner is Current UserView all fields (checked)Find this in search (checked)View attached files (checked)Allow auto-binding (unchecked)Everyone elseNo permissionOption sets recommendedType of placeEntire placePrivate roomShared roomHotel room“Type of place” is a classic example of an option set. We use options to store different predefined types. Those types rarely change and users are not asked to create new types.Good to know: We can also use a standard Data Type for “Type of place”. The rule of thumb is that if users do not have to create entries themselves, an option set is a better choice as it improves the app performance.Place statusIn reviewApprovedRejectedSimilar to a “Type of place”, a “Place status” is another good example of an option set. We use options to store different predefined statuses. Those statuses rarely change and users are not asked to create new statuses.AmenitiesWifiHeatingTVAir conditioningIndoor fireplaceWasher…We use option sets to standardize the amenities. Users should not be able to enter free text and create new amenities. This helps avoid fantasy amenities or duplicates. It also makes filtering places easier.FacilitiesFree parkingGymPoolHot tubSimilar to amenities, we use option sets to standardize the facilities. Users should not be able to enter free text and create new facilities. This helps avoid fantasy facilities or duplicates. It also makes filtering places easier.Additional notesWhen naming your options sets, data types and fields, we recommend using simple terms you will remember over time. Also, avoid repetition in your names as it will make it difficult to work efficiently when building your workflows. Finally, keep in mind that working with data is an ongoing process. Start small, adjust when necessary and improve as your product grows in terms of users and/or complexity.About HuggyStudioWe believe entrepreneurship is about positive change, not code. HuggyStudio helps entrepreneurs and intrapreneurs validate their ideas. We specialize in building new product ideas into functional MVP through our no-code education platform and our no-code agency.PreviousDatabase structure by app typeNextDirectory & Listings AppsLast modified 9mo agoCopy linkOn this pageData types recommendedPlaceBookingMessageOption sets recommendedPlace statusAmenitiesFacilitiesAdditional notesAbout HuggyStudio









Structuring an Application - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationUsing Page SlugsUsing Reusable ElementsHandling ConditionalityBuilding Dynamic ExpressionsBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookStructuring an ApplicationIn this guide, you will learn how to create a page and data structure for your app. You'll also learn about the other tools and concepts that are used when structuring. Here are the sections in this guide.Broken linkBroken linkBroken linkBroken linkUsing Page SlugsUsing Reusable ElementsPreviousCookies set by BubbleNextUsing Page SlugsLast modified 2yr agoCopy link









The database - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookThe databaseThis section covers different aspects of how the Bubble database worksThe database is the cornerstone of most applications. It handles all the dynamic data, meaning data that you and your users can create, change, view and delete as frequently as needed.The database works in tandem with your app's design to give your users the combination of being able to work with complex data efficiently, without being burdened by the mechanics of how it actually happens under the hood. Most of your users don't know how it works and indeed don't even know that it's there – they just know that the information they stored in your app yesterday is still there today for them to interact with.Your app's user interface is all your users will ever see while the database rests underneath the stage silently doing its job.The database is of course where you store data, but it comes with its own set of commaCommunicating with the databaseWhen you and your users interact with your Bubble app, two computers are involved:The device that the user is accessing the app from (such as a laptop or cell phone)Bubble's server (located in a server park)Whenever an action is needed that involves the database, such as reading, writing or deleting data, that command is sent from the user's device to the server, where the job is completed and a confirmation and any requested information is sent back to the device.As such, working with data in your app is an ongoing stream of communication between the user's device and the Bubble server. This doesn't just happen on page load, but continually as the user provides your app with actions and input. Even for a single user, small packets of data can be sent back and forth several times per second.As the developer of the app, you can set it up to send all sorts of different commands to the server:Create thingsMake changes to and delete thingsSearch for things and return the result as a listFind one specific Thing and return its contentAny data sent between the user's device and the server is encrypted at all times, ensuring that it stays private. Let's say a user provides input about himself such as name and date of birth: when that data is being sent to the Bubble server, it's encrypted and can't be read by anyone else. It's also encrypted during storage on the server itself. You can read more about the encryption in the infobox below.Encryption during rest and transitThe data in and sent from the database can be in two states:Rest means when the data is stored on the server's hard drive. In this state the data is encrypted using the industry standard AES-256 encryption. Transit means when the data is moving from the server to the user's device through the interoptic cables that make up the internet. During this state the data is encrypted with the TLS protocol, which ensures three important points:The data has been encrypted, rendering it unreadable in case of interception by unauthorized parties.The source of the data, i.e. the Bubble server, has been authenticated, which guarantees that the data originated from a verified source and not an imposter.The data's integrity has been maintained throughout its transmission, ensuring that it has not been tampered with or altered in any way during transitPrivacy RulesPrivacy Rules are rules that govern what users can access what data. It's the most important part of your databases security, and we strongly recommend that all apps that host any kind of private or sensitive data set up Privacy Rules to protect it.To learn more about Privacy Rules, read our dedicated article.Additional resourcesProtecting data with Privacy RulesTechnical information about the Bubble databaseServerThe Bubble database is hosted on Amazon’s Relational Database Service (RDS) which is a part of Amazon Web Services. The database is encrypted using the industry standard AES-256 encryption.Database technologyBubble uses PostgreSQL – an open source database management system. In other words, we have not invented a new kind of database system, but use one that has been in development for decades and is thoroughly tested and audited for stability and security.This is one of the most widely used systems on the internet, and since it's based on the SQL standard (a very common database format), Bubble can communicate with other databases without worrying about compatibility.How the Bubble database is different from traditional databasesTechnically, Bubble uses the same technology as the majority of other web servers: SQL, and specifically PostgreSQL.Still, the way the database is visualized in the Bubble editor can be a bit confusing if you come from a traditional database background.The major difference is that Bubble automates the use of primary and foreign keys. When creating a relationship between two data types (tables), Bubble uses a custom data type field to represent a reference to another record in a different table.For example, let's say we have a "User" data type and a "Post" data type, and we want to create a relationship between them such that each post is associated with a user. In Bubble, we would create a field in the "Post" table with the data type "User", which would represent a reference to a user record in the "User" table.While Bubble doesn't expose the use of foreign keys to developers, database relationships still technically rely on them. The Unique ID field serves as the primary key for a record and is used to retrieve data, but this part of the process is hidden to make database setup and management easier for users without a database background​​​User manual - PreviousDataNextData types and fieldsLast modified 4d agoCopy linkOn this pageCommunicating with the databasePrivacy RulesAdditional resources









Custom Fonts - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingColor variablesFont variablesStylesCustom FontsResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookCustom FontsBubble uses Google Web Fonts for text types. This is a big library of open-source fonts that can be freely used, and the font files are stored on a Google server. Your easiest option when designing in Bubble is to use one of the fonts available in this library.The Google Web Fonts library is so widely used that there's a fair chance that fonts you use are already cached in the browser of many of your users. In essence, this means that another website already has loaded the font for you and the user doesn't need to download it again.This leads to a faster page load and smaller total page size.Sometimes you will want to install your own font. For example, you might need the design to adhere to a style guide for a particular brand and use a commercial font that they have licensed.This guide shows you how to install a custom font in your app. Once a font has been installed in your app, you will see it at the top of the list in the font dropdown.Our Academy tutorial on how to install your own custom fontInstalling a custom fontThe Custom Font section for your app is in the Settings tab, General & Design section. This is where you can add new fonts, and remove the existing ones if you do not need them anymore. In general, having fonts that are not used in the app will slow down page load, so we recommend only keeping fonts that are actually used in your pages.You add a custom font by entering the path of the CSS file that represents the font. This assumes that the font file is accessible on a web-server. Note that if the resource is not served over HTTPS, your application may not be able to load the file if it is itself on HTTPS. In general, using the raw font files and uploading them to Bubble's storage is the safest way to ensure proper loading.Adding a custom font from the raw font files can be a little technical, as you will need to upload the different files, create some CSS files and upload them as well. Here is how you should do this.First, get the font files (for instance, download this one http://www.fontsaddict.com/fontface/free-sans.ttf4 and upload it to Bubble. To do that, just use a file uploader in Bubble, draw it on the page, and upload the file as the initial content. Once this is done you'll see a link below, just copy this link. It should look like //s3.amazonaws.com/appforest_uf/f1482852801693x129632627358660100/FreeSans.ttfThen, create a .css file in a text editor and copy the code you got from the site that offers the font.@font-face {  font-family: 'Free Sans';  src: url('http://www.fontsaddict.com/fontface/free-sans.ttf');}and replace the URL by what you got in 1.@font-face {  font-family: 'Free Sans';  src: url('https://s3.amazonaws.com/appforest_uf/f1482852801693x129632627358660100/FreeSans.ttf');}Note that we added https: in front of the URL.Save this file font.css (for instance, the name does not matter), and upload it to Bubble as well, doing the same thing you did for the first step. It will return you a link that will look as well like//s3.amazonaws.com/appforest_uf/f1482852801693x129632627328660100/font.cssThis is what you enter in the Settings tab. The name is the font name, and the path is the result of 3.Note: Special characters in fonts are not automatically added and will default to Times. They can be manually added however, when adding your custom font as a <link>. For example, lets say you are adding the following Google Webfont to your Bubble app:<link href="link href="https://fonts.googleapis.com/css2?family=Inter:[email protected];700" rel="stylesheet">It is recommended that you add a second link with any special characters you'd like to include using the '&text=' parameter:<link href="https://fonts.googleapis.com/css2?family=Inter:[email protected];700&text=%E2%86%90%E2%86%92%E2%86%96%E2%86%97%E2%86%98%E2%9C%93" rel="stylesheet">PreviousStylesNextResponsive designLast modified 21d agoCopy link









Professional Services Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookProfessional Services AppsBy Chris Strobl, Founder & Co-CEO of No Code GermanyVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!Professional services experts spend 80% of their time on back-office tasks. The digitization of business processes around project- and client management, forms & templates, invoicing, scheduling, automation and reporting allows professional services experts to focus on revenue and profitability.This guide suggests a database setup for an application for professional services firms that handles basic booking and invoice needs. In detail, this app helps manage the lifecycle of an engagement and lets users manage projects, book clients, sign contracts online, send invoices and handle payments.Data types recommendedA Project represents some unit of work for the professional services firm. Projects are related to Clients that the firm has. The first step in a Project is usually receiving an Inquiry.UserEvery Bubble app comes with the concept of a User. In this case, we assume that the tool is mostly going to be used by employees of the professional services firm, meaning the app is an internal tool for the firm.Suggested fields on this typeName (text): the name of the personAdmin (yes/no): whether this person is an admin of the toolPrivacy rules for this data typeSince this is an internal tool, in general for all data types, you will want to create a privacy rule so that only users who are logged in can find any data in searches or view any of the fields. This way, nobody external to the company who doesn’t have an account with the tool will be able to see the data. Since this is an internal tool, the app should not have a publicly accessible signup page; instead, for any new employee who needs access to this system, you can manually create an account for them via the App Data tab of the editor.ProjectWhether it is the design of an advertising campaign, the development of an app or the implementation of a consulting project, the core activity of a professional service firm is the implementation of projects.Suggested fields on this typeProject name (text): the name of the projectHourly rate (number): pricing for invoicesClient (Client): which Client this project relates to; see documentation on connecting data typesInquiry (Inquiry): the original Inquiry that this project came fromProject stage (project_stage): the status of this project, out of a set of optionsPrivacy rules for this data typeAs noted above, you will want a privacy rule to only allow logged in users to find this data type and view its fields. If one of the fields is particularly sensitive (like hourly rate), you could consider creating another privacy rule to only show that to users who have the ‘admin’ field set to ‘yes’.InquiryPrior to starting a project, the client submits an Inquiry via an online form that governs the specifications of the project.Suggested fields on this typeProject description (text): you can use a “multiline input” element to give the prospect more space to describe their business problemProject type (project_type):  one out of a set of options to consider (see below)Target budget (number): useful information for you to know as you assess whether to take the projectInquiry date (date): information on when the Inquiry was submitted.Privacy rules for this data typeAs noted above, you will want a privacy rule to only allow logged in users to find this data type and view its fields.ClientMaster data about the client is the foundation for a good customer relationship. You can keep building out new features in this app to eventually turn it into a CRM!Suggested fields on this typeFirst name (text)Last name (text)Email (text): note that Bubble’s database does not automatically enforce uniqueness (i.e. nothing is stopping the app from having two Clients with the same email, yet), but you can implement uniqueness through workflow logicCompany name (text)Number of employees (number): To get a feeling about the budget and service levelPhone number (text): because this is just stored as text, you may want to do some data sanitization and even validation in the workflows that save this fieldBilling address (text)Privacy rules for this data typeAs noted above, you will want a privacy rule to only allow logged in users to find this data type and view its fields. If any of the fields are particularly sensitive, you could consider creating another privacy rule to only show those to users who have the ‘admin’ field set to ‘yes’.Option sets recommendedProject_stageThe client relationship can be divided into different stages. This is especially relevant to keep track of activities such as invoicing. The methodology of each Professional Services firm guides the customer along the Project Stages.InquiryQualificationProposal sentContract signedProject Kick-OffProject DeliveryProject Hand-overInvoice sentProject_typeAn option set for project type helps to organize the portfolio of work of a professional services firm.MarketplaceSocial NetworkProductivity ToolCRM SystemAnalytics ToolSomething ElseExample uses in your appYou will likely have a page (for logged-in users) that shows all current active projects. This page would have a repeating group with a data source that’s a search for all Projects where the project_stage is or isn’t certain stages that you do or don’t want to consider “active”.With such a list, you may also want to build the capability to filter by certain project_stages or project_types. If you have dropdowns for these, you can update the repeating group’s data source to include a new filter on project_stage or project_type depending on the value of those dropdowns.About the author: Chris StroblI’m Chris Strobl, Founder and Co-CEO of my own company No-Code Germany. We have a free Youtube channel for Bubble tutorials and provide IT consulting.PreviousCRM AppsNextOn-demand AppsLast modified 11mo agoCopy linkOn this pageData types recommendedUserProjectInquiryClientOption sets recommendedProject_stageProject_typeExample uses in your appAbout the author: Chris Strobl









Color variables - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingColor variablesFont variablesStylesCustom FontsResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookColor variablesThis section covers Color variables, used to set a palette of colors that can be applied throughout your appThe Color Variables feature in the Styles tab enables you to establish a palette of colors that you can apply throughout your Bubble app. Each color variable contains:A hex code that determines the color valueAn alpha value that controls its transparencyBy incorporating both color and font variables, you can establish a consistent design system for your app. Utilizing a color variable in the styling of an element creates a connection to the color value specified in the Styles tab.You access the Color Variable editor from the Styles tab.As a result, if you need to modify the color, you only have to make the change in one place and it will automatically be reflected wherever that color variable is used, saving you the hassle of adjusting each element or style separately.Do Color variables apply to Styles?Yes, Color variables apply to Styles, meaning that if you update a Color variable it will automatically be updated on all Styles that use that variable. By combining the two you can set up a highly flexible color system that lets you control the color appearance of your elements from one place.​​PreviousStylingNextFont variablesLast modified 28d agoCopy link









Building responsive pages - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsStylingResponsive designBuilding responsive pagesLegacy articlesTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookBuilding responsive pagesVideo lessonsWe have several video lessons that can help you learn about designing responsive pages.​Recorded Webinar: Responsive design in Bubble​Column and Row layout​Understanding the column container layout​​Understanding the row container layout​​How to build a sidebar layout​​How to build a responsive navigation bar​​Dragging and dropping elements in the element tree​​Layout and sizing properties in Conditionals​​Padding in a container element​​Scrolling overflowing content​​Gap spacing for row and column layouts​​How to use the align to parent container layout​You'll find our full Youtube playlist about the responsive editor here.Parent-child relationshipsAs we explored in the section about Bubble elements, the design of your app consists of a hierarchy of parent-child relationships. The page itself is the parent of all other elements, and on that page you can place Containers that become the parent of elements inside it.In this example, the group that contains all the other elements is the parent and the input fields and button are all children of that group.Containers can also contain containers, making the former the parent of the latter and you can build as many levels of this parent-child relationship as you need. This makes up the basis for the building responsive pages.In this guide we will illustrate the parent container with a dashed border, as exemplified below:The parent container will be highlighted with a dashed line throughout this guide.Parent settings and element settingsSetting up the responsive behavior of a given element is done by mixing the settings on the parent container and the element itself. If the element is placed directly on the page, that page is the parent container, but if you place it into a container element, the settings on that element will affect all its child elements.The settings on the parent container determines where the elements are positioned relative to the container and each other. For example, they can be positioned vertically (in rows) or horizontally (in columns). The settings on the container is also used to determine the alignment of the overall layout (such as determinging whether a row should start on the left or right side of the container),  the total dimensions of all the content and the spacing between rows and columnsThe settings on the child elements determines the layout settings to that element in particular: how tall and wide should it be? How much room should the element maintain around and inside of itself (padding and margin) relative to the parent element and sibling elements?Container layout settingsEach container element (including the page itself) has a Layout setting, and this setting controls the behavior of all the elements inside of it. You can see the different Layouts as a set of rules that tells the children inside of it how to position themselves.The container layout is located in the Layout tab of the Property Editor for the container (parent) element.Their position then is based on three factors:The layout setting of the parent containerThe layout settings on the element itselfThe settings and position of its sibling elements (the other elements inside of the same container)There are four types of layouts on the container elements:FixedAlign to ParentColumnRowFixed layoutFixed layout lets you move and place an element freely within the parent container and it will position itself on that point. The position is set in an absolute X and Y pixel value, and the size of the element in a W(idth) and H(eight) value.The position is relative to the parent element: in other words, the element will be positioned exactly X and Y pixels from the top left corner of the parent container.In the animation below you can see that the button can be positioned freely in the parent element. The red outline on the parent group container indicates that the element will be (remain in this case) a child of that group.Fixed layout lets you set an absolute X and Y position using drag and drop.The use of fixed layout can be useful in certain scenarios but can be a bit more challenging to manage on different screen sizes and resolutions.The four values highlighted above determine the element's width, height, X position and Y position .Parent and child layout settings (fixed layout)Parent Layout ControlsNoneChild Layout ControlsWidth and HeightAlign to parent layoutAlign to parent divides the parent element into a nine-cell grid and lets you align child elements to any of the cells. In the illustration below you can see how a rectangular group is divided into upper-left, upper-middle, upper-right and so forth. The Align to parent layout lets you align child elements to one of the cells in a nine-cell grid.If you create a new child element or drag and drop one, it will automatically snap to the nearest cell:You can also control the position of the element by opening the Property Editor for the child element. Each of the arrows below represent the different cells of the parent container:Multiple elementsIf you want to place multiple elements in the same cell, such as the top left, you may find that the elements overlap. If you want them to align themselves relative to each other, you can place them within a second group and set a different layout for that group.Parent and child layout settings (align to parent layout)Parent Layout ControlsNoneChild Layout ControlsPin to specific cellWidth and Height.Row layoutChild elements in a row container are aligned one after the other horizontally. The child elements will wrap as the screen is resized or the total width of the elements exceeds the parent containers width.Each element added to a row layout will be positioned at the end of the row, and wrap if the total width of the child elements exceeds the width of their parent container.New child elements drawn inside the container will be added to the end of the list by default but can be re-ordered using the order controls or by dragging and dropping. Elements can be reordered by dragging and dropping or by using the buttons in the Property Editor.Parent and child layout settings (row layout)Parent Layout ControlsContainer AlignmentRow gapColumn gapChild Layout ControlsVertical AlignmentOrder SelectionWidth and Height.Column layoutChild elements in a column layout will be place on top of each other, regardless of the width they take up:Each element will be placed at the bottom of the column.In the example above, the parent group is set to stretch as the content of it expands. As more and more elements are made visible, the height of the group increases automatically:For the Fit height to content setting to work as expected, the minimum and maximum height must be set accordingly.Parent and child layout settings (column layout)Parent ControlsRow gapChild ControlsHorizontal AlignmentOrder SelectionWidth and HeightAlignmentIn row and column layout, you can set the alignment of child elements: where should the row or column start? For example, in a column layout the child elements stack on top of each other: should that stack start at the bottom or at the top of the container element?Alignment is used both to determine the element's starting position, and how they should be spread out across the parent container.You can read more about each individual layout setting in our core reference article about row and column layouts.

You'll find the section about rows here and columns here.Element layout settingsIn the above section we covered how a container's layout settings affect its child elements. In this part we'll have a look at how the settings on each individual child element is used.An element's alignment properties determine how the element should be positioned within the constrainta set by its parent container.In short the element settings are used to control the behavior of that specific element, as opposed to the container layout settings that affect all child elements. On the element you can set stuff like:How wide should the element be?No restrictionFixed widthMinimum/maximum widthStretch with contentHow tall should the element be?No restrictionsFixed heightMinimum/maximum heightStretch with contentHow should the element be aligned relative to the parent containers layoutShould the element collapse its width/height when its hidden?Margin/PaddingAs you can see from the settings, this gives you the freedom to control how individual elements behave within the constraints you have set on the parent container.The container's layut setting is column, making the child elements stack vertically. But their width is set on an element level, as illustrated in the example above.Using the Responsive ViewerYou will find a tab above the New Element palette that lets you switch between the UI Builder view, where you can modify elements, drag new ones, and delete some, and the Responsive Viewer which lets you test how your page behaves as the screen width changes. In this view, the ruler at the top of the page area defines the current page width. Just click or drag on the ruler to resize the page and see how the page behaves dynamically.You can also use the preset width icons on the left side of the screen to see how the page looks on iPhone in portrait mode, in landscape mode, on an iPad and on a laptop or a desktop.When you click on an element, the Layout tab in the Property Editor will display the different parameters you can modify to affect its behavior. ​PreviousResponsive designNextLegacy articlesLast modified 21d agoCopy linkOn this pageParent-child relationshipsParent settings and element settingsContainer layout settingsFixed layoutAlign to parent layoutRow layoutColumn layoutAlignmentElement layout settingsUsing the Responsive Viewer









URL parameters - Bubble Docs










Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseFilesStatic dataTemporary dataCustom statesURL parametersUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookURL parametersA URL parameter is a piece of information that you place in the browser's URL. They follow a key-value-pair structure and can hold many different types of data.How URL parameters are structuredEvery page in your application (except for the index page) has its own URL that follows a regular pattern:https://my-bubble-application.bubbleapps.io/mypageor if you have connected to a domain:https://www.mydomain.com/mypageThis points the browser to the right domain and to the right page. The information in that URL is actually an instruction to the server to send the correct page back to the browser. In other words, your browser sends that URL to the server, which responds by sending back the files needed to display the page.URL parameters also serve a function, but instead of talking to the server they can send messages to the current page. In other words, your Bubble app can write and read URL parameters in the browser's URL bar and use that information for different purposes.URL parameters are listed after the complete page URL, and are separated from that URL with a question mark (?). If there are multiple parameters, they are separated from each other with an ampersand.Each URL parameter consists of a key and a value:The key identifies the parameter with a unique string of text such as nameThe value is the data that the parameter holds, such as JohnThe structure would then look like this:name=JohnIf we place that in the full page URL (and separate it from the URL with a ? as we explored earlier) we get:https://www.mydomain.com/mypage?name=JohnNow to add slightly more complexity, let's change the name parameter to firstname and add a second parameter called lastname.https://www.mydomain.com/mypage?firstname=John&lastname=DoeIn this last example, Bubble would be able to identify the full name John Doe from the URL bar. Let's have a look at how that happens.Reading URL parametersNote: There are some plugins that can manipulate the browser's URL bar, including its parameters. It's worth noting that Bubble does not always catch updates to parameters if they are not made with the Go to page action.

Recognizing the change may require a page reload or the plugin may be able to return an updated value.As we've covered, the URL parameter consists of a key and a value, and we need to instruct Bubble what key to look for in order to get the value in return.To do that, we set up an expression where we use the Get data from page URL data source.After picking the data source, Bubble will ask for some additional parameters:1.The first one is the key to identify our parameter. We want to fetch the first name (John), so we'll set that to firstname.2.Secondly, we need to tell Bubble what kind of data to expect. We can set this to text.As soon as you set the key, you can see on the right side that Bubble updates the expression to say Get firstname from page URL.If the parameter name=John exists in the URL, the text element will show the name John to our users. If the URL parameter can't be found or has an empty value, it will display nothing.Reading different data typesIn the example above we used the text data type to read a simple piece of information: a name. But URL parameters can also be used to read other types of data.Bubble's general data types (text, numbers, dates, etc) need particular formatting in order to ensure compatibility with all browser.Bubble automatically applies the correct formatting in most cases, but if you have hardcoded links or want to learn more about how the different data types are formatted, check out the info-box below.Formatting Bubble's general data types in a URL parameterText/numbers/Geographic address/file/imageText and numbers can for the most part be added just like you want them to appear when you read the value, but special characters may give you problems with some browsers. To ensure compatibility, you can include characters that are not normally valid in a URL by encoding them using percent-encoding.In percent-encoding, characters are converted into a sequence of characters. For example, the character / is converted to %2F, and the character ' is converted to %27.Let's say we wanted to encode the product header O'Donnel t-shirt in white/blue. We have three special characters: space, ' and /.https://www.mydomain.com/mypage?productname=O%27Donnel%20T-shirt%20in%20white%2FblueWhen you use the Go to page action to add a URL parameter, Bubble automatically encodes the string as needed. If you set up hardcoded links, you may need to add percent-encoding manually. You can use Bubble's format as URL operator to convert a text to the right format.Files and images contain the URL string, and also needs to be formatted with percent-encoding.Numeric rangeNumeric ranges can't be passed as a single data type. Instead, you should break the range into its minimum and maximum number into to separate number parameters. For example, you can add a parameter called min with the value 1 and another called max with the value 5.Then when you need to reference the range you can use the range operator to combine the two values into a valid numeric range.DateDates have the following format:Format: Month Day, Year Hour:Minute am/pm or M/D/YYYY h:mm am/pmExample: Jan 1, 1970 8:50 amDates also need percent-encoding, which Bubble will automatically apply:Jan%201%2C%201970%208%3A50%20am%2C represents a comma (,), %3A represents a colon (:), and %20 represents a space.Date range Date ranges, like number ranges, need to be passed in two separate values, such as startdate and enddate and then combined with the range operator. Dates need to be passed with percent-encoding as described in the Date section.Date intervalDate interval is passed as the number of milliseconds between to datetimes.Yes/ noYes/no values are passed as written out: yes or no.Custom data type thingsYou can also link to a custom data type in a URL parameter. To read and retrieve the correct thing, that thing's Unique ID needs to be present in the parameter. The name (key) of the parameter does not affect the result, but when you use the Get data from page URL data source you need to set it to the correct data type, as exemplified below:1.First we set the name (key) that identifies the right parameter2.Then we set the type to the data type of the thing we want to retrieve3.Bubble then lets you add operators to the Get data from page URL data source relevant to that thing. In the example we are getting the name of the Task.The URL in this case would look like this:https://www.mydomain.com/mypage?task=1676895495518x833172344879202800Option setsYou can also retrieve an option from an Option set. Option sets do not have Unique ID's but are identified by the value stored in the Display field. Just like with data types, you can give the parameter an arbitrary name, but you need to set the type to the Option set you want to retreive.1.First we set the name (key) that identifies the right parameter2.Then we set the type to the Option set we want to retrieve3.Bubble then lets you add operators to the Get data from page URL data source relevant to that Option set. In the example we are getting the abbreviation of the State.The URL in this case would look like this if we included the state name in the Display field:https://www.mydomain.com/mypage?state=TexasSetting URL parametersThere are two ways to pass URL parameters to a page:1.The first is to include it with the URL when the page loads, for example by linking to the page with a URL that includes the parameters. Simply copy/pasting the URL into a link will have Bubble recognize the parameters on page load.2.The second is to use the Go to page action and checking Send more parameters to the page. This will apply the necessary encoding to whichever information you provide and send the parameter.The Go to page action lets you send the parameters by adding them in a list as illustrated above. The left-hand input field is the key and the right-hand field is the value. If you remain on the same page, the page will not be reloaded, but the parameters will be instantly updated.The Go to page action does not reload the page if you are going to the same page that you are already viewing. This means you can set and change URL parameters as much as needed without the page having to be reloaded.​FAQ: URL ParametersCan you pass a list of Things in a URL parameter?You can only pass one value at a time in each URL parameter (but you can create as many parameters as you need, within the maximum URL length supported by the browser). There may be workarounds to pass lists, but it's not officially supported by Bubble at this point.Are URL parameters secure?URL parameters are not insecure by and of themselves, but they can require that you understand the potential vulnerabilities associated with using them. For example:They are fully editable by your users, meaning that they can add, remove and change URL parameters as they want.They are of course also fully visible in the browser's URL bar, meaning that they should never contain any sensitive dataWhen used for navigation, keep in mind that a tech-savvy user can pay attention to the URL parameters and understand their structure: if you don't secure your navigation in other ways the user may be able to access sections they are not supposed toWhen including custom data types in the URL, you are revealing the Unique ID of that thing. Again this is not a vulnerability on its own, but can lead to vulnerabilities. Someone could for example replace the Unique ID in the URL to see a record that's not their own: the things needs to be protected with Privacy Rules​​PreviousCustom statesNextUser accountsLast modified 5d agoCopy linkOn this pageHow URL parameters are structuredReading URL parametersReading different data typesCustom data type thingsOption setsSetting URL parametersFAQ: URL Parameters









Displaying data - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookDisplaying dataThis section covers how to display data from the database in your appAfter your users submit information which becomes data, you can use page elements to display it.Container elements don't display the data per se, but load the data so that all of its child elements can easily reference it. This lets you easily load a thing into a container, and then use that as a data source to display and let users make changes to the data.Things are displayed either as a single instance (for example viewing the current user) or a list of things (such as a list of products, contacts or tasks). The info-boxes below provide more information about these two scenarios:Displaying a single thing in a containerIn order to display data, it's often useful to load that data into a container such as a group. You can read more about the different ways to do that in our article in our article on containers:

Article: Container elements​Displaying multiple things in a listWhenever Bubble returns a list of results, such as when using the Do a search for operator, you can display the results in a list. Lists can be designed flexibly and responsively just like other elements, meaning you can show the results in an Excel-like table, as cards or as a masonry grid or any other way you can think of in our responsive engine.We cover displaying data in lists in our article on Repeating Groups.Displaying data using expressionsTo display data in an element such as a text, we need to set up an expression that tells Bubble what data we want to display. The expression consists of a data source and optionally one or more operators that further instructs Bubble what to do with the data. In the example below, we're using Do a search for as the data source and then adding the first item operator to load the first entry in the list of results that the search returns:This loads the Product into the container element, in this case a group, but doesn't actually show anything to the user. To show some information, such as the name of the Product, we'll need to add another element inside of that group. We can then set up an expression on that element that refers to the thing loaded into the parent element:The Parent group's product is the data source in this expression, and the Name is the operator that tells Bubble which field on the Product data type we want to display.We could also set up the entire expression on the text element itself: Do a search for Products:first item's Name – but it would be cumbersome to do that for every element where we want to refer to that product.By setting up a parent container and loading the data into it we speed things up and make sure that all elements inside refer to the same database thing.The same logic can be applied to other things than text. We could for example set up an image element and load the correct Product image by again referring to the parent group's thing and the custom field Image.In this example we are fetching an image URL from the database instead of text. The field on the data type is of type image.By combining different element types and fields saved on a data type we can design our app to show info from the database in a way that our users hopefully find appealing.In this example we are pulling the name, description, price and image for two different products from the database.Displaying data using auto-bindAuto-bind is used to automatically save changes to a thing whenever an input field changes, but it alse serves another purpose: it automatically loads the existing data into the field to which it's assigned. Let's say we didn't just want to display the name of the Product, we wanted users to be able to edit it.By assigning a field that the element is auto-bound to, Bubble will automatically load any existing data from that field when the page is loaded:By auto-binding the input element to the Name field on the Product, Bubble automatically loads any existing data into that field when the page loads.​PreviousFinding dataNextProtecting data with Privacy RulesLast modified 4d agoCopy linkOn this pageDisplaying data using expressionsDisplaying data using auto-bind









Building Block Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookBuilding Block AppsBy Airdev, creators of the Canvas building frameworkVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!Using a building-block framework to create your custom app can help to save time and improve quality. The basic premise is to start with a simple base app, pre-configured with standard things like login/admin/account pages, and then add pages and blocks from a library of assets. By piecing these pre-fab’d components together like Lego pieces, you can avoid reinventing the wheel and focus your efforts on the parts of your app that need to be truly custom.Building-block frameworks can be used to create literally any kind of web application, including:Marketplaces and ecommerce stores like Airbnb, Etsy, or UpworkProject management, CRM, or productivity tools like Trello, Asana, or PipedriveSocial media, forum, or messenger platforms like Twitter, Reddit, or WhatsAppAnalytics & data visualization dashboards to support a processAnything else – the world is your oyster!There are typically a few user experiences that are consistent across platforms (and included in a building-block framework):A homepage and supporting marketing pages to entice and inform potential usersA login page where users can enter credentials to access personalized content (this is often available as a popup too, in case other pages require signup)An account settings page, where users can update their credentials and technical settingsAn admin dashboard, where app owners can access key metrics, users, and other key data objects to manage their platformBelow is an overview of the data structure that may be useful in a base template. From there, you will add the data objects and fields that are custom to your app (e.g., connecting a user to their upcoming rentals, or the candidates vying for their gig, or their outstanding projects, or new unread messages).Data types recommendedThe core of any app is the User, which can come preset with data fields that are useful across all app categories. The App settings object is independent from users since it is at the app-wide level, helping to store general variables that could be accessed by different users at different points in their user journey.UserSomeone who can access the application by logging in.Suggested fields on this typeEmail (text): the email address the user signs up withName (text): alternatively, you can separate first and last into two fields, and have a third representing full nameProfile picture (image): a nice mugshot to be displayed with their profileRole (Role - an option set): role within the application (member, admin)Suggested privacy rules on this type:Users can access their own infoAdmins can access any user’s infoEveryone else can’t find or access any user info (this can always be opened up later depending on the app’s purpose, but it’s best to start conservative)App settingsThis is a handy way to store all sorts of information about the app itself that you’ll need to reference throughout the app. You’ll only have one entry in this table, since there is only one app. Keeping these in the database rather than hard-coding them in the app allows you to change them on the fly and have the change permeate throughout the app (e.g., if you change your app name from AirBnB to Airbnb).Suggested fields on this typeApp name (text): the name of the applicationApp description (text): a short description of the app, to be used for SEO purposesLogo (image): the official app logo (you may want to have a separate field for light/dark versions, or for a favicon)Terms (file): the legal terms to be accepted by users (this could also just be a text field)Privacy policy (file): same as abovePrimary color (text): the hex code for the app’s primary branding color, which can help dynamically define buttons and other assetsSuggested privacy rules on this typeAnyone can find and access this record, since its data is often used in marketing pages (i.e., for logged-out users)Specific fields may be deemed sensitive and can be protected to just administratorsOption sets recommendedRoleStandardAdminHaving an option set for high-level application roles is useful for any application. This might be buyers vs. sellers, participants vs. owners, or other distinctions (and every app has an admin). This will affect what data the user has access to, and what they can see and do in the app. This is primarily used with the User data type.Example uses in your appExamples of data searches will vary widely depending on the use case of the application, but the admin dashboard will likely come preloaded with some key searches:New users this week: Search for Users where Date created > Current date/time + -X days : count. Note: other common Users searches include:Users waiting for approval (if the app is invite-only)Inactive users (no activity in the past X days)Users of a certain type (e.g., buyers, sellers, trainers, students)To get any app setting: Search for App settings : first item, then use the field of the particular setting you want. This search is trivial because there is only one entry in the database, which contains all the needed fields.Additional notesThere are building-block frameworks out there that Bubble users have created. Using one of these can give you a jumpstart on building your own application. Selecting a building-block framework to work with involves a certain level of commitment. Below are some factors to consider:How many people have used the framework (i.e., social proof)How extensive the library of assets isHow well the library covers the types of features your app is likely to needThe feature set included with the base applicationHow easy it is to learn to use the system, and the level of support you can getHow its design conventions fit to generally accepted standardsAbout the author: AirdevAirdev (airdev.co) is the original and largest Bubble development agency, and creators of Canvas (build.airdev.co/canvas), the #1 Bubble template and building framework.Headquartered in San Francisco, we have spent the past 7 years developing a unique process for bringing ideas to life using Bubble. This includes:A globally distributed network of the best Bubblers in the worldA building framework (Canvas) that provides best-in-class design and functionality to every app at 10x the speedA custom process facilitated by our Bubble-built project management toolWe have served hundreds of clients ranging from sole non-technical entrepreneurs to funded fast-growing startups to Fortune 50 enterprises. Our mission is to eliminate the technical barriers to bringing great ideas to life, and to provide great no-code careers to a new breed of product builders (see our Partners program).PreviousDashboardsNextBubble as a backendLast modified 11mo agoCopy linkOn this pageData types recommendedUserApp settingsOption sets recommendedRoleExample uses in your appAdditional notesAbout the author: Airdev









File uploads - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersInput formsText and numbersDates and timeFile uploadsSelection controlsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookFile uploadsThis section covers elements that lets your users upload files and imagesFile upload elements let your users upload any kind of file to the Bubble server. Bubble has two different elements for uploading files: one for general file uploads and one specifically for images.File storage and the databaseIn the Bubble Data Type editor you can add two types of file upload fields:fileimageWhen you upload a file to the Bubble database, the database doesn't actually store the file itself. The process is actually two-fold: first, Bubble uploads the file to the AWS server and then it saves the URL to the file in the database. In other words, both the file and image fields in the database only contain a URL pointing to a file, and not the file itself. From a performance perspective, this means that your database only holds a short text value (the file's URL), and the file is not downloaded until it's needed.Deleting uploaded filesAs we explored in the infobox above about File storage and the database, the database doesn't actually store the file – only the URL to the file.As a consequence, if you delete the content of the image field in the database, it will remove the URL, but the file itself is not deleted.To actually delete the file from the server, you need to use the Delete an uploaded file action in a workflow. Keep in mind that you need the URL of the file to delete; as such you should delete the file before you clear the URL from the database.

Video tutorial: Deleting uploaded files​Uploaded files are public by default, meaning that anyone with the URL can access it. If you want your files to be securely private, you need to check the Make this file private on the uploader element and set up your Privacy Rules correctly. This applies both to images and other files.

You can read more about these settings in the core reference articles below:Reference: Uploading files to be private
Reference: Protecting uploaded files with Privacy Rules
Video tutorial: Setting up Privacy Rules​File uploaderThe File uploader element is used for uploading non-image files. It also supports uploading image file types, but the Image uploader element offers some additional features for that.The File uploader element will show the filename after the user has selected a file to upload.You can set a maximum size for the uploaded file. The File uploader element introduces a new action that lets you cancel an ongoing upload.Image uploaderThe Image uploader element is used for uploading images and will give you a preview of the image after the upload. If you have set an image as its initial content it will also show that image, making it useful for images that are sometimes updated, like profile pics.The Image uploader element will show the image after it has been uploaded. In the example above we have styled the element to be circular.​Multi-FileUploader (with drop area)The Multi-FileUploader is similar to the regular file Uploader, but with two key differences:It allows uploading multiple filesIt allows you to set up a drop area where your users can drag-and-drop filesIt allows you to set a maximum number of files to upload and an initial list of files to display upon page load.The Multi-FileUploader element is a plugin. It's made by Bubble but it needs to be installed in your app before you can use it.

Search for Multi-FileUploader in the plugin store to install it.PreviousDates and timeNextSelection controlsLast modified 21d agoCopy linkOn this pageFile uploaderImage uploaderMulti-FileUploader (with drop area)









SaaS Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookSaaS AppsBy Gaby Román, Co-Founder of Coaching No Code AppsVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!SaaS app data structures are unique in that almost all of the data needs to be organized under an account hierarchy. For example, every user that signs up might represent a company, so they may have a team, customers, and other resources that should all link back to that parent company.The following data structure is recommended for companies that need a project management tool for internal operations. Users of the app can create and organize projects with related tasks. For example, a manufacturing company with product design and marketing teams would be able to manage the various to-do items within their departments while company managers can track company-wide project statuses and assignments. Overall, this would streamline communications between teams, better visualize company metrics, and help management make more intuitive business decisions.Data types recommendedThese data types are designed from the perspective of one company. Every company that signs up to your app will have a single “Company” record in the database, one or more “Users” (team members, managers, etc.), and related resources that are unique to the Company, such as “Customers,” “Projects,” and “Tasks.” The “Subscription” and “Plan” data types will help you manage each Company’s subscription with you, the app owner. The more Companies that sign up, the more records are created, but the key is to relate Company specific records like Customer or Project back to the parent Company for data security.UserThis is Bubble’s only built-in data type. Anyone who needs to be able to log into the app should have a User record.Suggested fields on this typeFirst Name (text)Last Name (text)Related Company (Company): This field is important for knowing which data the user has access to and can be leveraged in many different privacy rules.Privacy rule example under Customer: “When This Customer’s Related Company is not the Current User’s Related Company” > disable all checkboxesRole (User Role, an option set): By assigning users with specific roles, you can control their access to pages, visual elements, and workflows. For example, a User whose Role is Company Admin can have the ability to create other Company Members, whereas Company Members themselves cannot.Privacy rules for this data typeThe User’s “Role” and “Related Company” will be the starting point for creating privacy rules both for the User data type itself and all other Company-specific types.For the User data type, we suggest creating a rule that only allows users to access other user records within their same company, not other companies. You can do this with the following rule: “Current User’s Related Company is This User’s Related Company.”You can break this down one step further by only giving Company Admins the ability to view more fields and/or edit other Company users; in addition, allowing the current user to have full access to their own record:Current User’s Related Company is This User’s Related Company and Current User’s Role is ‘Company Admin’ > view all fields, allow auto-bindingCurrent User’s Related Company is This User’s Related Company and Current User’s Role is ‘Company Member’ > view selected fields, don’t allow auto-bindingCurrent User is This User > allow everythingCompanyThis is a very important data type for SaaS structures because it’s the most parent entity that will help you segment the rest of your app’s data in a single application. Sub-app structures don’t require this as much if each sub-app is created per company, in which case, they’re already given independent databases. Whether this data type represents a “Company” or an “Account,” make sure all other data types whose records are unique to their parent have a field that ties back to this record.Suggested fields on this typeName (text)Admin (User): While this field isn’t necessary (as long as you can identify Users by their role and related Company), it’s a very handy “shortcut” to the Company’s Admin, especially if you need to reference that user often.Related Subscription (Subscription): This is a reference to the custom Subscription record created for this Company. It’s another shortcut field that is typically helpful if you have multiple pricing plans that tier off features. Having quick access to the “Company’s Related Subscription’s Plan” can make it easier to create conditional expressions.Privacy rules for this data typeUsers should only be able to access their own Company’s record, which you can do with the following: Current User’s Related Company is This Company > allow full accessIf you have a User Role for a System Admin (i.e. yourself, the app owner), then you can create a more global rule to give you access to all Companies, like this: Current User’s Role is System Admin > allow full accessThe default “Everyone Else” rule should have all access options disabled. If the user is not a part of the Company nor a System Admin, then they cannot access the Company record in question.PlanThis is a helpful data type to organize all your subscription plan levels. Our example includes an ID field for a payment gateway (e.g. Stripe, PayPal, etc.) so you have an easy reference to the equivalent entity on the gateway’s side. Note that this is not unique to a Company.Suggested fields on this typeName (text)Description (text)Amount (number): This would be the amount charged for every billing cycle. E.g. 50 if frequency is set to “Month” vs 500 if frequency is set to “Year” for a discounted annual plan.Frequency (Plan Frequency, an option set)Privacy rules for this data typeThis data type doesn’t need a privacy rule because it’s not tied to any specific Company and holds no sensitive information. It’s a general system table that describes Subscription Plan options. These need to be available to everyone, including logged out users.SubscriptionThis record saves the unique combination of a selected plan for a Company and any details about the Subscription itself such as the active date and status.Suggested fields on this typeRelated Company (Company)Related Plan (Plan)Active Date (date)Canceled Date (date)Status (Plan Status, an option set): This is a helpful field to keep track of which Companies are active or not and what kind of access they should have.Payment Gateway ID (text)Privacy rules for this data typeCreate rules that give the System Admin and Company Admins access to this record:Current User’s Role is System Admin > allow full accessCurrent User’s Role is Company Admin and Current User’s Related Company is This Subscription’s Related Company > allow full accessCustomerThis is an example of a Company resource they might need in a SaaS app. Each Company would have their own Customers to build out their CRM. Again, don’t forget to include the “Related Company” field so that Company users can only have access to Company Customers.Suggested fields on this typeRelated Company (Company)First Name (text)Last Name (text)Phone Number (text): While it might be tempting to create this as a number, you’ll be able to format phone numbers better for different countries if it's text. Plus, you never need to do math with phone numbers, so you’re not losing any capability.Email Address (text)Notes (text)Privacy rules for this data typeOnly System admins and Company users should be able to access Customers that are tied to their same Company:Current User’s Role is System Admin > allow full accessCurrent User’s Related Company is This Company > allow full accessIf you want to split up access to fields and auto-binding by Company Role, you can create separate rules per Role to break that down.ProjectThis is another company-specific resource record.Suggested fields on this typeRelated Company (Company)Title (text)Manager (User): This is a shortcut field to the Company User (whether their role is Admin or Member) that is responsible for this specific project.Team Members (list of Users): This is a shortcut field to any Company Users that might be assigned Tasks for this Project.Due Date (date)Privacy rules for this data typeFollow the same rules you created for the Customer data type.TaskThis is another company-specific resource record and is seen as a “child” of the Project data type. Meaning, a Project is made up of a list of Tasks, but notice how we didn’t include a List of Tasks field under the Project data type. Since a Project could be long-term and potentially have hundreds of tasks, it’s better to have a one-way relationship on the Task side for performance. See this article.Suggested fields on this typeRelated Company (Company)Related Project (Project)Title (text)Due Date (date)Completed Date (date)Assigned To (list of Users): Here, we chose to make this a list in case a Task should have the ability to be assigned to more than one person.Privacy rules for this data typeFollow the same rules you created for the Customer data type.Option sets recommendedUser RoleSystem AdminCompany AdminCompany MemberIf your application offers different roles where access to data, pages, or even workflows are specific to that role, an option set is a great way to identify who the users are.Plan StatusActiveInactivePlan FrequencyMonthYearExample uses in your appViewing Projects Assigned to MeOnce the user logs into the app and opens up their “dashboard” page, they should be able to see a list of projects with tasks that are assigned to them.The following search expressions can be used to show the user relevant projects:Search for Projects (Team Members contains Current User)Search for Tasks (Assigned To contains Current User) ‘s Related ProjectsViewing My Tasks filtered by Completion statusThe user should be able to see Tasks assigned to them and filter the list to view which ones are completed, which ones are due, and which ones are overdue.The following search expressions can be used to show the user their tasks with various filters:Completed Tasks: Search for Tasks (Assigned To contains Current User; Completed Date isn’t empty)Upcoming Tasks: Search for Tasks (Assigned To contains Current User; Completed Date is empty; Due Date > Current Date/Time)Overdue Tasks: Search for Tasks (Assigned To contains Current User; Completed Date is empty; Due Date < Current Date/Time)About the author: Coaching No Code AppsYour database structure creates the entire foundation for your app as a whole, and because of its importance, it's one of the first things we focus on with our own clients before moving onto broader functionality. For help putting all the right pieces into place and creating a scalable app using Bubble, join a free workshop focused on scoping, building, and launching your no code app at https://coachingnocodeapps.com/workshop.PreviousSocial Network AppsNextProject Management AppsLast modified 2mo agoCopy linkOn this pageData types recommendedUserCompanyPlanSubscriptionCustomerProjectTaskOption sets recommendedUser RolePlan StatusPlan FrequencyExample uses in your appAbout the author: Coaching No Code Apps









Containers - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersGroupsRepeating groupsPopupsFloating groupsGroup focusInput formsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookContainersThis section covers the container elements, used to group and control the behavior of other elementsThis section takes a long-form look at what containers are and how you can use them in different situations.

To see the full list of settings available on container elements, you can check out our more concise core reference entry on containers.All elements on your page are part of a hierarchy with the page as the top parent.Containers are used to contain elements and control how they behave on the page. You can place elements inside of a container, making it the parent and the element(s) its children. The element tree will display the hierarchy of the parent-child relationship. Bubble has five container types that behave in different ways. Knowing how the different types behave is the key to mastering design in Bubble, so we recommend spending some time getting to know their behavior.Click on each container type for more information and a link to the full article:Groups – placed directly on the page to build the page hierarchyGroups are the most basic container type and can be placed directly on the page to build a hierarchy of parent-child relationships. They are used to contain elements, control responsive behavior, navigation and to hold data.Article: Groups​Repeating Groups – used to display lists of things (i.e. list of users or products)Repeating Groups are similar to Groups, but will repeat its content once for each item in a list of things such as database records. Repeating Groups are used to display lists such as (but not limited to) a list of users, a search result, product cards and photo masonry grids.

Article: Repeating Groups​Popups – display a group above all other elements (i.e. a message or signup form)The Popup group type is a a group that is displayed above all other elements and is centered on the screen regardless of the scrolling position of the page. They can be set up to hide or blur the page below. As such, they are a useful way to bring an important message or forms to the user's attention immediately.Article: Popups​Floating Groups – hovers above page attached to a screen edge (i.e. navigation bar)Floating Groups are a group type that can be set up to hover above other elements on the page and they can be attached to any side of the screen and stay there regardless of whether the user scrolls up and down.Article: Floating Groups​Group Focus – remains visible as long as it's in focus (i.e. dropdown menu)The Group Focus has two main characteristics:It will remain visible only for as long as it is in focus. Focus in this context means until you click anywhere else on the page.They are displayed relative to another element by a set number of pixelsThis makes the Group Focus very useful for things like dropdown menus, contextual menus and tooltips.Article: Group Focus​​Styling containersContainers can be set to be invisible, but they can also have a background style, roundness, borders and shadows, just like other elements.Groups can be invisible, like on the left, or they can be styled. The right group has a white background color, rounded corners and a shadow.You access a group's styling settings by double-clicking it or by clicking on it in the element tree.Loading data into containersContainers are not just visual elements; they can also be used to hold different kinds of data. For example, if you are working on a form that lets you edit a user (with input fields for name, phone number and address), you can set the containers data source to User and load the user data into the container.The data loaded into the container is then made available to all of its child elements. This allows you to load specific data into parts of a page, such as in the example below where we are loading the data about a user into the container:You can load data into a group to easily reference it in other elements and workflows.Referencing data in elementsIn the example above, we have loaded the current user into the container, and it lets us easily reference the user in the input elements in the form:By loading data into a group we can reference that data in the group's child elements. In the example above we're loading the user's name into an input field.In the illustration above, the container is loading the current user, and we can use that information in the container's child elements. In the screenshot, we're looking at the settings for the input field. We're referencing the Parent groups's User's name.Referencing data in workflowsThe same can be done with workflows. In the example below, we want the Save changes button to save the data from the input fields to the database. By referencing the parent group's user, we can save it easily:If an element like a button is placed within a group that holds data, we can reference that data in workflows connected to that element. In the example above we're referencing the user loaded into the parent group f the button.Referencing the parent group's data in a workflow requires that the event that triggers the workflow is connected to one of the container's child elements. For example, a Save button inside of the container could trigger a workflow that saves changes from the form.Referencing data in elements and workflows can be done on all group types, including the cells of a Repeating Group.Different ways of loading dataThere are two different ways to load data into a container:You can set the Data source of the container to load data. In the example above we are loading the Current user, but you can also fetch it in other ways, such as performing a database search using Do a search for.

Setting the Type of content to User and the Data source to Current user instructs Bubble to load the data about the current user into the containerYou can use a workflow to push data to the container. This is useful when you want the loading of data to be the result of a user action.In this example we are using the Display dara in group/popup action to search for a user and load its data into the group. We'll then be able to reference the loaded user in elements and workflows contained within the group.The first method will load the data as soon as the page is loaded, while the second will await a trigger to execute the workflow. You could also use the latter method to allow the user to select which user they want to edit.​Resetting a containerYou can reset a container to wipe the thing that is displayed in it. When you use a reset group action, the thing will be reverted to what was defined as the datasource. This is useful to note since reset doesn't mean empty – it means reset to its initial state.Whenever you change the content of a container, it's effectively being reset and displaying the new thing. This means that all child elements (such as input fields containing text) will update their content to reflect the data being loaded into its parent container.Note that whenever the content of a group changes, the group effectively is being reset and a new thing is being displayed in it.Groups and responsive settingsYou can use groups to control the responsive behavior of the elements inside of it. For example, if you have three input fields that you want to never be more than 200 pixels wide, you can set the maximum width on the group that holds them. That way, the max width are applied to all of the elements and you don't need to apply it one by one.You can read more about responsive design in our Responsive design article series.

Article series: Responsive design​Using groups to control responsive behavior is the key to efficiently set up a responsive design.In this example, we have set the max width of the group to be 480 pixels. This way, we also control the width of the elements inside of that group.​PreviousVisual elementsNextGroupsLast modified 4d agoCopy linkOn this pageStyling containersLoading data into containersReferencing data in elementsReferencing data in workflowsDifferent ways of loading dataResetting a containerGroups and responsive settings









Temporary data - Bubble Docs










Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseFilesStatic dataTemporary dataCustom statesURL parametersUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookTemporary dataThis section covers temporary data, which is different types of variables that you can use to store data temporarily.Sometimes you'll need to store some information temporarily in your application. They can be considered variables and are not in any permanent storage like the database, but live for as long as they are needed.Bubble offers two different types of temporary data that have different properties:Custom statesCustom states are a sort of variable that you can store on any element on your page, including the page itself. A custom state can be set up to contain any kind of elementary data (such as text, numbers and dates), static data like an Option set or dynamic data from your database. You set the type of data the custom state should hold, and whether it should holda single valua or a list of values. You can then populate the custom state with data using workflows (or in some cases set a default value). You can create as many custom states as you need.Custom states are reset when the page is reloaded.Custom states​URL parametersURL parameters are strings of text that you can add to the URL of your application to store information. You can specify the type of data they are holding, and the data will be a visible part of the page's url. URL parameters are structured in key-value pairs and are separated from the main URL with a question mark (?). Additional parameters are separated with an ampersand (&).https://www.mydomain.com/page?parameter1=value1&parameter2=value2In the example above , everything after the ? makes up the URL parameters. URL parameters are great for navigation, since they let your users use the browser's back button to go back one step.URL parameters​The difference between Custom states and URL parametersCustom statesURL parameters... are reset when the page is reloaded... are not reset on page reload, but may disappear if you modify the URL with a workflow or the user deletes it from the URL... are "invisible" to the user (but not encrypted or meant to hold any sensitive data)... are visible to the user in the browser's URL bar... can hold a list of values... one parameter can only hold a single value... can have a default value at page load (depending on the type of data)... has to be set by a workflow from the same or another page, or be set by the user... cannot be changed by a user unless you set up workflows for it... can be edited by the user at will by making changes to the URL or using navigation gestures like clicking the browser's back buttonPreviousOption SetsNextCustom statesLast modified 5d agoCopy linkOn this pageCustom statesURL parametersThe difference between Custom states and URL parameters









The database editor - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookThe database editorThis section covers Bubble's built-in database editor that lets you manage all the data in your app from one central placeBubble comes with a built-in database editor. The App Data section in the Data Tab shows the application database, i.e., the actual data that you or your users have entered. It also has a few key tools to help you manage your data.Note that Live and Development have different databases.Database viewsThe App Data tab is structured around the concept of database views, that are listed on the left side of the screen. A database view is a combination of three things:1.The fields that are shown in the view (the columns in the table).2.A sorting order.3.Some optional search constraints to filter out some entries.By default, Bubble adds a view for each data type that is defined in your application. They will show all entries (things) for each type, sorted by creation date.When you click on the pen icon on the right of the list, you can modify the view. If it's a default view, a new view will be created and will be modified. You can then add/remove constraints. When a view is selected, the table will update and show things that meet the constraints (if any).Run asWhen you are debugging your app, it can be useful to run your application as a specific user and see exactly what the user experience is for that user. When looking at the User data type in the database editor, each row has a run as link. Clicking this button will open a new tab and you'll see how the app looks and functions as if you were this user.Note that until you log out, you'll be using the app as this user, so make sure you do not make changes that should not be done. New viewClicking this button displays a popup that creates a new database view, which defines the fields that are seen on the right side of the screen. Constraints can be added to create a smaller list. By default, each type has a view that shows most fields with no constraints. The number of views is unlimited, and these views are shared between the Live and Development versions. It is recommended to use new views to build your own admin panel.Primary fieldsClicking this button opens a popup where you define which field is best to describe a thing in the table. For example, a user may be represented by their email, an apartment, an address, etc. This is for display purposes only within the App Data tab. If you were to generate a CSV from a view in App Data with primary fields, you would see that chosen field in the appropriate column. This does not apply to workflow actions such as "Download data as CSV." Ideally, you'll want to pick a field that uniquely represents a thing. For the user type, the email is a great choice, but for other types it depends on your data. As a last resort, the unique ID is always a safe choice as it is unique to the thing.SearchEnter something into the input box, and the things in the current view that contain the entered text or unique ID are listed. Use this for a quick search of the app data. Note: When searching in App Data, some common words called “stop words” will be ignored based on your application’s default language.Search does not cover any fields which are linked data types (not even their primary fields). For example, if you have Projects, each with a field for the data type Company, and a particular Project is tied to Acme Corp, searching Projects for Acme will not return that result (unless "Acme" is in one of its other, non-data type fields).New entryClicking this button displays a popup where you create a new database entry. Choose the type of thing and enter information into the predefined fields. This is equivalent to using a 'Create a new thing' action in a workflow.Note that the data editor currently does not allow modifying a list of things. If you need to modify such fields, building a data admin page in your app is a better option.Importing dataClicking the Upload button displays a popup where you upload a comma-separated CSV file of data. The type of data and relevant fields should be defined in the app before importing the file. This feature is available to users with a paid Bubble plan.Select the type of data and file to upload. Map the columns from the file to the fields of the data type and then validate and upload the data. This feature was recently improved and is now in a Beta testing phase.Important: The first row of your CSV file must be a header row containing the names of the fields for the data. Here's a sample file for reference.Data should be valid to be uploaded (a yes/no field should only have yes/no values). Bubble validates all data prior to any upload, if one row is failing, nothing will get created and uploaded to the database. Note that if you are uploading repeatedly large amounts of data, we recommend working with the Bubble API and use some scripts to create data, as it's a more scalable approach.Type of dataSelect which type of data to upload. The type of data and relevant fields should be defined in the app before importing the file.Data delimiterCommas are typically used to delimit entries, but different delimiters are possible. Tab or pipe delimiters are useful when working with text that includes commas. Choose the delimiter in the application creating the CSV file.Pick a file to uploadSelect a CSV file to upload.Map fieldsThis very important step is where you map the columns of data to the fields in the application database.Custom fieldSelect a data type field in the dropdown menu for each column of data. These fields should be defined in the data type before the upload.Composite fieldIf the field you're matching the column with is a custom type, then specify which field of the subtype should be used to match the text entry. For example, let's say you're uploading a list of apartments, and one of the fields is an owner. If the owner is represented by a last name in the CSV file, choose 'Last name' as the composite field. The entries should exist in the database before you upload the file. If two entries in the Bubble application database match the same value, an error will be returned.List delimiterThis is the delimiter to use when a field is a list of things. It should be different from the main delimiter. For example, if ';' is used as the delimiter, the data should be in this form: 12;54;32;67.Note: When importing data for type list, optionally enclose the list in '[' and ']', and then separate the individual items with the delimiter. For example, "[kitchen; bedroom; bathroom]", or "kitchen; bedroom; bathroom".Validate dataClicking this button does a quick analysis of the data to be uploaded, to make sure the first couple of rows are valid.Upload dataClicking this button uploads the data. First, it uploads the file to our servers. Then, it processes the upload in the background using your server capacity. While this happens, you are free to close the webpage and come back. An email will be sent on completion, or if there is an error while uploading.Note: Only one upload or modify can occur at a time for a given application.ModifyYou can bulk-modify data via a CSV upload. To do so, you should have a file with a column containing the unique ID of the things you want to modify, and enter the values that should be modified in subsequent columns.ExportThis button generates a CSV file with the data of the current view. The file is exported to the Download folder of your browser. This file can be edited. Because the app owner performs this operation, no privacy rules apply, and all fields chosen in the current view are exported. This feature is available to users with a paid Bubble plan.At this stage, the CSV file generation is done on the client; if you are exporting a large amount of data, we recommend using the Bubble GET API to read your database content with a script.Tip: Make sure your Scheduler is not paused before you export a CSV.Switch to live/dev databaseClicking this displays the Version dropdown menu to switch between the Development and Live versions of the app. Remember that each version has a separate database.Cleaning dataIt’s important to keep your database clean from time to time, especially as you scale. Here are some tips on how you can easily and efficiently keep your database in good shape!If you’re no longer using a data type, you can delete the data type in the Data types section in the Data Tab of your app. Click on the trash icon next to the data type. This will delete all database things of that data type throughout your database. Please note you cannot recover the data after it’s deleted.If you’d like to delete individual database things, you can navigate to the relevant database view in the App Data section in the Data Tab of your app. If you’d like to filter the things you’d like to delete, you can create a new database view with the “New view” button and add constraints to filter the data. You can either individually click on database things one-by-one to delete, or you can use the checkmark at the top of the first row to select all database things in the view and bulk delete. Additionally, you can run a bulk action that calls an API workflow to delete database things iteratively.PreviousProtecting data with Privacy RulesNextWorking with Location DataLast modified 4d agoCopy linkOn this pageDatabase viewsRun asNew viewPrimary fieldsSearchNew entryImporting dataType of dataData delimiterPick a file to uploadMap fieldsCustom fieldComposite fieldList delimiterValidate dataUpload dataModifyExportSwitch to live/dev databaseCleaning data









Installing & Using Plugins - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsWhat Plugins Can DoInstalling & Using PluginsSpecial PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookInstalling & Using PluginsInstalling pluginsYou install and manage plugins in the Plugins tab. This tab shows the installed plugins on the left, and details for each plugin on the right. At the top right, you'll find the 'Add Plugins' button that lets you search for plugins and install new ones. You can sort plugins by rating, usage or submission date. As the Ecosystem grows, ratings are important to maintain the health of the plugin ecosystem.Once you've installed a plugin, click DONE and you'll see the newly installed plugin in the Plugins tab. When you subscribe to a plugin, you're not immediately billed. Your next monthly bill will contain a retroactive charge for any time on the previous billing period that was spent with the plugin in the app.Note: If you are on a free trial and you add a plugin subscription, this will modify your subscription and you will get charged for that plugin & a month of the paid plan immediately. Consider waiting until after your free trial is over to add a paid plugin if this is undesirable. If you choose to remove the plugin, you get credited for the remaining time, so you're only paying for the time that the plugin is actually active in your app. You can change to the one-time license fee at any time by cancelling your plugin subscription and purchasing the plugin license.Plugins are subscribed to on the same billing frequency as your application's paid plan, so if you subscribe to a plugin while on an annual plan, you will also be subscribed to the plugin at its annual rate.Configuring pluginsMany plugins, based on external services, require you to enter some keys to identify your app with them. For instance, for analytics plugins, the key will be used to identify your app. You can enter these keys in the Plugins tab.Keys are usually shared among the Development and Live versions of your app, but if you need to use different keys (for instance so that development sessions don't interfere with production analytics), you can enter a development version of your key. If a development key is provided this one will be used in the development version of your app, otherwise the live key will be used.This view also shows the different items that the plugin is adding to your app. Elements, API calls and actions will be listed. In general, you'll find API calls in the API provider dropdown in the 'Get data from API' palette, you'll find elements in the New Element palette, and actions will be in the Plugins section of the New Action element.Lastly, you can uninstall the plugin from your app. Note that adding plugins adds some code to your app and can make pages heavier and slow page loads down. Try to keep the list to the necessary plugins you need when running your app.Reviewing pluginsAs a way to moderate the marketplace, ratings and users' feedback are very important. You can rate plugins in the App Editor (and please do so!). Ratings are communicated to the Plugin Builder via the Statistics tab in the Plugin Editor, and will be useful for them to improve the plugin.Getting helpAs each plugin is different, we recommend using the support of the Community through the forum for help to use a plugin. You can also contact the plugin developer directly.PreviousWhat Plugins Can DoNextSpecial PluginsLast modified 1yr agoCopy linkOn this pageInstalling pluginsConfiguring pluginsReviewing pluginsGetting help









Group focus - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignElementsThe element hierarchyThe pageVisual elementsContainersGroupsRepeating groupsPopupsFloating groupsGroup focusInput formsStylingResponsive designTemplatesThe Component LibraryImporting from FigmaDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookGroup focusThis section covers the group type Group Focus. This group will remain visible for as long as it is in focus, typically used for dropdown menusThe Group Focus has two main characteristics:It will remain visible only for as long as it is in focus. Focus in this context means until you click anywhere else on the page.They are displayed relative to another element by a set number of pixelsThese features gives it several typical use cases:Contextual menusFloating Action ButtonsDropdown MenusTooltips​Group Focus is useful for setting up dropdown menusIn the example above you can see a typical use case for the group focus. The white rectangle with the shadow is the Group Focus, and we are using the Animate an element action when the icon is clicked to give it a smooth transition. As soon as a click happens outside of the Group Focus it's automatically hidden without any actions needed.Taking a look in the Bubble editor, we can note a few things:The Reference element is set to the icon. This means that the Group Focus will be displayed relative to the icon.We have given it an offset of -150 pixels to push it to the left side of the icon. This is simply an aesthetic choiceWhen the icon is clicked, the Animate an element action displays. Notice that no action is needed to hide it again.We chose the SlideDownIn animation to display the dropdown menu, and give it a slightly shorter duration than the default. Both of these options are also purely aesthetic.Using Group Focus in Repeating Groups​Repeating Groups behave a bit differently than other group types because the contain multiple cells. As a consequence, you can't directly reference an element inside of a Repeating Group cell, since Bubble can't know which cell you are trying to reference.This creates a challenge when using the Group Focus, because it depends on being able to reference another element to know where to display it. There's a way to get around this however: if you place the Group Focus and the element it should reference inside of a Reusable Element, and then place that Reusable Element inside of the Repeating Group, it will work.This is useful in scenarios where you want to place a contextual menu in a Repeating Group. In the example above, both the clickable icon and the Group Focus is contained within a Reusable Element. This Reusable Element is then duplicated for each cell of the Repeating Group. To make sure that we can apply actions to the dropdown menu that are relevant to the user in the current row, make sure to set the Reusable Element's Type of content to User:This setting is set when you edit the Reusable Element and open the Property Editor for the Reusable Element itself. Then, when selecting the Reusable Element you have placed in the Repeating Group, you set the Data Source to the Current Cell's User:By setting the Data Source of the Reusable Element to the content of the current cell, we are passing data from that specific cell into the Reusable Element, where you can bind it to actions in the dropdown menu.PreviousFloating groupsNextInput formsLast modified 22d agoCopy link









Introduction to APIs - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsWhat is a RESTful API?The Bubble APIThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookIntroduction to APIsIn this section we will go over what an API is and how you can use it in your Bubble application.Help us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​This chapter covers how RESTful APIs work in general. If you want to skip to the section where we cover Bubble’s API features, you can click the link below:Article: The Bubble API

Throughout the API section you may also find our API Glossary useful.There are many different kinds of API calls but they mostly follow the same kind of pattern. The most simple definition of an API call can be summed up in two steps:The client will send a request to another systemThe server sends a response back.Introduction to APIsOur in-depth API course gives an introduction to what APIs are and how to use the API Connector​When you want to connect your Bubble app to another application or data source, you use an API.An API is a set of principles that allows two applications to speak a common language, allowing them to establish a connection securely and exchange information and trigger workflows. The technology has been around for several decades. going as far back as the 1960s and 1970s, when computer programs were first being developed for commercial use. While the technology and security has evolved since then, many of the basic principles still apply.Bubble is set up to take care of a lot of the technical stuff for you. This lets you set up both incoming and outgoing connections securely and efficiently. Still, it can be useful to know what's going on under the hood to understand what the different settings and values in an API call mean.Example of API call in action:Imagine you have built a travel planning software in Bubble that displays the weather forecast for a specific location at some time in the near future. In order to get the weather data, your app (the client) must send a request to the server of a weather service (the server). The server processes the request, retrieves the weather data, and sends it back to the app in a format that your app can understand. You take this data and display it in a user-friendly way. The whole process is usually finished in a few hundred milliseconds.APIs allow you to request specific information or execute commands within very specific constraints in the external application, but they don't provide access to how the application actually works. For example, contacting a weather service doesn’t give you any say over how the weather data is stored and processed – it only gives you a short piece of text data in response to your exact request. In other words, APIs provide a line of communication without revealing the inner workings of the external application.Showing up-to-date weather predictions is one use case where your app would be likely to depend on an external API service to get accurate data.In a way, it’s like ordering food at a restaurant: the menu presents you with a static set of options and whatever you pick it will be prepared to you out of sight. You don’t have access to the kitchen and the chef gets to keep their secret recipe secret.Incoming and outgoing connectionsSince two systems can communicate with each other, it follows that connections can go in both directions. This means that your Bubble app can connect to a third party, and that a third party  can connect to your Bubble app.We sort these two types of connection into two categories:Incoming connectionsIncoming connections means that another system can initiate a connection and have your Bubble application:Send data backMake changes to your database (create, modify or delete one or more records)Run a specific API Workflow​Being able to share data and commands across apps opens up a world of possibilities where you can use different technologies and services together in creative ways.In many ways, the API standard is powering a big part of the web as we know it today.When you activate the Data API or Workflow API, Bubble automatically sets up your app to be ready to accept incoming connections, making it quick and easy to expose your application’s data to other systems in a secure and controlled way.Setting up incoming connections to a Bubble appTo send data requests to a Bubble application, you activate and use the Bubble API. You can read our in-depth article on the Bubble API here.Outgoing connectionsOutgoing connections means that your application initiates a connection with another system to:Retrieve data from that systemSend data to that systemAccess functionality or features provided by that systemUsing outgoing connections you can do things like:Fetch data like weather reports, stock prices, animated GIFs and social media profilesSend data like adding a calendar event to Google Calendar, creating an invoice in Freshbooks or adding a new contact to Hubspot CRMSigning the user in using an existing account in another system (such as Google, Facebook and LinkedIn)Start a workflow like sending an email with SendGrid, making a payment with Stripe or Paypal and sending an SMS with TwilioMaking outgoing API requests from a Bubble appThere are two ways to make outgoing API requests from a Bubble application. You can use the API Connector or you can browse for a plugin in our plugin store.Client, server and resourceClient and serverWhenever an API connection is established there are two parties involved: the client and the server. The client is the one that sends the request, and the server is the system that responds.If you are connecting to a third party using the API Connector or a plugin, your app is the clientIf another system is connecting to the Bubble API in your app, your app is the serverAPI calls consist of a request sent by the client, and a response sent back by the serverResourceA resource is a specific piece of data or functionality that can be accessed through the API. Many APIs expose multiple resources, which means that the client has to specify what resource they want to access. For example, a third-party system might connect to your Bubble application to fetch a list of users, create a new database record or start a workflow: each of these would be considered a resource that this client can access.If your app is connecting to an external system like a CRM to create a contact, fetch a list of calendar events or send a customer email, each of those operations would also be a separate resource.Resources are typically accessed through a specific URL that points to that resource. Bubble offers two kinds of resources, and URLs are generated automatically whenever a resource is set to be exposed in your app’s API:Data types in your database can be exposed to allow other systems to read, create, modify and delete records. Each of your exposed data types and each action (create, edit and delete) connected to that data type is a resource that can be accessed from the outside. This is done with the Data API.Workflows can be exposed to allow other systems to trigger them. Each workflow that you set up and expose is a resource. This is done with the Workflow API.Authentication and authorizationWhen we discuss APIs, we need to make a clear distinction between two similar-sounding words:Authentication is the process of verifying the identity of the client that is trying to access the server. You can compare this to a passenger wanting to board an airplane. At some point the passenger will reach a security checkpoint where they have to present valid credentials to confirm their identity, usually in the form of a passport. In other words, authentication is about asking who the client is.Authentication identifies who the client is and authorization determines what they should have access to.Authorization happens after authentication, and is the process of determining whether a client has the necessary permissions to perform a particular action or access a particular resource on the server. Returning to our airport example, after we know who the passenger is, we can determine whether they have access to board the plane and the VIP lounge. In other words, authorization is about asking what the client is allowed to do.Whenever a third-party system attempts to connect to your app, you can use these two security processes to have complete and secure control over who can connect and what they can access. Whenever the connection goes the other way, your app may be asked to go through the same steps.WebhooksSometimes two applications need to exchange some sort of info in real-time – that is, when a specific event occurs in one app, another app should be notified of the event.This kind of call is often called a webhook. Even if the term webhook is used, it's not technically different than any other API call, except that it's created with the specific purpose of being made when a specific event occurs.Webhook examplesA payment gateway such as Stripe may inform your app whether a payment attempt was successful or notAn inventory platform (such as Shopify's inventory module) may need to notify your app when the inventory of an item is running low or outA CRM may send a webhook whenever a new lead is createdA booking platform like Calendly may send a notification whenever a new appointment is bookedAs you can see from the examples, webhooks can be considered time-sensitive API Calls that keep systems in sync. Just like any other API Calls they can contain parameters that carry important information about the event about which they're reporting. For example, a payment webhook call from Stripe may contain information such as the sum captured, the payment ID and the customer ID.A webhook is an API Call that's made as a result of a specific event. For example, Stripe may send a webhook to your app to confirm that a payment was successful.Also just like other workflows, webhooks can connect to your Data API to make changes in the database or to the Workflow API to trigger a workflow in your app.RecapWe’ve covered how an an API is a common language for apps to be able to exchange information and give each other commands. You can set up your Bubble app to initiate outgoing connections to other systems, and you can offer an incoming connection for other systems to speak to your app. By using online tools you have most likely already witnessed the use of a long list of APIs without knowing it: your local newspaper getting updated weather reports, sports statistics and showing Google maps, an eCommerce website accepting payments through Stripe, Paypal and Authorize.net and a social media marketing platform scheduling posts on Twitter, LinkedIn and Instagram are all examples of apps working together by use of APIs.Bubble automates a lot of the work that goes on behind the scenes to make it easy and safe to make connections that go both ways.In the next section we'll take a more in-depth look at what exactly a RESTful API is.What is a RESTful API?The Bubble APIThe API ConnectorUser manual - PreviousAPIs: Connect to other appsNextWhat is a RESTful API?Last modified 1mo agoCopy linkOn this pageIntroduction to APIsExample of API call in action:Incoming and outgoing connectionsIncoming connectionsOutgoing connectionsClient, server and resourceClient and serverResourceAuthentication and authorizationWebhooksWebhook examplesRecap









Data types and fields - Bubble Docs










Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookData types and fieldsThis section covers what data types are and how you can set up custom types of data with fields holding different kinds of informationWe also have multiple guides on how to set up your database structure based on what kind of app you are building. You can take a look at these in our article series on Database structure by app type.Data typesThe database consists of different data types that you as the developer plan and set up. Data types are like containers that hold specific types of information and each data type is made up of fields where that information is stored.For example, in a sports league management system, one data type might be used to hold information about teams, such as their name, coach, and roster of players. Another data type could be used to hold information about games, such as the date, location, and final score.With our visual editor, you have complete freedom to structure, manage, and connect data types as you want.Let's first have a look at how you create new data types: Creating data typesYou can create as many data types as you need. To create one, follow the steps below:In this example we have added two custom types already: Cart and Product. The User data type is built into Bubble.1.First, navigate to the Data tab in the Bubble editor2.Then, go to Data types3.In the field labelled New type, provide a name. Don't worry, you can change this at any later time.4.Click the Create buttonThe new data type will be added to the Custom data types list.Naming Data TypesBubble lets you name your Data Types as you please, even using characters such as space. While you are free to name them as you please, it can be useful to follow a few guidelines:Use unique names: While Bubble does support duplicate names, giving your data types unique names makes it easier to identify the correct one. Keep in mind that this can affect Option sets as well, as Option sets and data types will often show up in the same lists.Use singular names: Bubble automatically pluralizes names. For example, if you name your data type Event, Bubble will automatically refer to it as Events whenever it's appropriateFieldsEach data type consist of fields that hold different kinds of information. These fields are formatted in specific ways and can only hold the type of information that they are set up to contain.To illustrate, think of a phone book: a Contact has different fields for name, date of birth and email address and the format of these fields remains constant: name and email address will always contain text and date of birth will always contain a date.The field is where the information saved to a data type is actually stored.Bubble has the following built-in field types:text
A string a text that can contain any kind of characternumber
A numerical value, which can be a whole number or a decimalnumeric range
A range consisting of a low and a high value, such as 5-10date
Contains a date and timedate range
A range of dates, such as 1/1/1970 - 1/15/1970date interval
A Date interval quantifies the difference between two dates. It/s the number of days/hours/minutes/etc between themyes / no
A value that can be true or false (sometimes called a boolean)file
The URL of a fileimage
The URL of an image filegeographic address
A Google Maps formatted addressData type
Any data type that you can set up can also be a field typeThis is where the flexibility of Bubble's database becomes apparent: by creating custom data types and populating those types with custom fields, we can set up a structure for almost any thinkable scenario.The last item on the list above is particularly significant. That's because every data type we create can be used to format a field in a different data type, which is how we interconnect them.Storing a list of valuesEach field can also be set up to store a list of values. For example, if you want to store more than one text value you can check the box labelled This field is a list (multiple entries). This lets you add new values that make up a list, such as Red, Blue, Green, Yellow.Checking the option above lets you store a list of values instead of a single value.Any type of field can contain lists, including custom data types. This way you can reference multiple things, such as the tags connected to a blog post or the products in a cart.Built-in fieldsIn addition to the fields that you choose to add to a data type, Bubble will also set up the fields below:Unique IDThe Unique ID is a 32-character alphanumeric string that identifies a specific thing in your database. The Unique ID (sometimes shortened to UID) is generated automatically when the thing is created and cannot be edited.A Unique ID looks like the example below:1651238619517x600101118159717500Date created and Date modifiedThese two fields are also automatically populated by Bubble and are stored in the date format. The Date created field never changes, and the Date modified field automatically updates any time any changes are made to the Thing.SlugThe slug field lets you set up a user-friendly and search engine optimized URL for the thing. When you load data onto a page, you can instruct Bubble to use this string of text as the last part of the page's URL, to give each thing a unique URL.For example, if the name of a Product is "A Beginner's Guide to Bubble," the corresponding slug might be "a-beginners-guide-to-bubble". The slug is then appended to the page URL such as:https://www.myapp.com/products/la-beginners-guide-to-bubbleThis lets you set up user-friendly and search engine optimized URLs for different data types such as articles, blog posts, products, and other types of content.Changing the slug on a thing cannot be done with the Make changes to a thing action, but needs to be done with the Set a thing's slug action.Custom field typesAny data type that you create can also be used as a field type. For example, say you have a data type called Cart, and to this cart you should be able to add Products. You can set up a field on the Cart data type, check This field is a list and choose the Product data type as Field type:For instance, we can use a data type for a shopping cart to connect it to a data type for a user. By doing that, we can determine who the owner of that particular cart is.Creating fieldsAfter you have created your data type, you can set up the fields you need:Click the image to see a bigger version1.First, select the data type on which you want to create a new field (Cart)2.Click the Create a new field button at the bottom of the existing fields3.Give the field a fitting name4.Choose the type of data you want to store in that field from the list above or from your existing data types. In this example we have selected User since we want the owner of the Cart to be a registered user5.Pick whether the field should contain a list of the selected data or a single item. In this case we want each cart to just have one owner, so we don't check the box.Let's look at some examples of how varying app types may require different data types:ExamplesData typesWe'll go over three different examples to see how you can set up data types that cater to different applications. Note that the examples aren't intended to be a blueprint or the best practice for these categories. Instead, they serve to demonstrate the versatility of data types in various scenarios.Example 1: eCommerce storeIn an eCommerce store, we might need three data types to handle basic functionality. We want Users to be able to add Products to a Cart:ProductCartUser (built in)Example 2: Sports league management appManaging a sports league could require a bit more complicated setup: a league consists of different Clubs, that each have a few Teams with Players. The players play Games.

The Player data type is actually the built-in User data type. Since Bubble already provides this data type that allows users to log in and use the app, it makes sense to use it. Keep in mind that the User data type cannot be renamed. Therefore, we're simply clarifying that it's referred to as a Player in this particular context.LeagueClubTeamGamePlayer (user - built in)Example 3: BlogA blog can have a very simple setup consisting of blog posts, tags that let you search for posts of a specific type and authors. Again, the Author type is the User type but to better convey its intended purpose, it's referred to as "Author"Blog postTagsAuthor (user - built in)Adding the fieldsExample 1: eCommerce storeProductName (text)
Description (text)
Image (image)
Price (number)CartOwner (user)
Products (list of Products)User (built in)NameExample 2: Sports league management appIn our Sports league management app we can really see how data types are referenced downward in the hierarchy: a Player is a part of a Team, which is a part of a Club, which is a part of a League.LeagueName (text)ClubName (text)
League (League)TeamName (text)
Club (Club)Player (user - built in)Name
Email (built-in)
Team (Team)Example 3: BlogOn our blog website we can return to a simpler structure. We have the blog posts, on which we need to store 1) the header and post content, both texts, 2) The User who wrote it (the author) and the list of Tags (such as Politics and Tech).Blog postHeader (text)
Post (text)
Author (User)
Tags (list of Tags)TagNameAuthor (user - built in)Name
Email (built-in)As we've explored, setting up custom data types and fields lets you adapt your database to suit your project. In simple terms, data types are the containers that define the type of data you want to manage, while fields contain the various types of information stored within that data type.If we were working on a phone book, the data type would be Contact and the fields would Name, Email address and Phone number.PreviousThe databaseNextCreating, saving and deleting dataLast modified 3d agoCopy linkOn this pageData typesCreating data typesFieldsStoring a list of valuesBuilt-in fieldsCustom field typesCreating fieldsExamplesData typesAdding the fields









Protecting data with Privacy Rules - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookProtecting data with Privacy RulesThis section covers how to use Privacy Rules to protect private dataThis section takes a long-form look at what Privacy Rules are.

To see the more concise and technical documentation you can check out our core reference entry.Privacy Rules are an essential part of your app's security. Any database data that is private or sensitive needs to be protected with Privacy Rules to be considered secure. Always stay on top of your app's Privacy Rules to let your users safely entrust their data to your app.Privacy Rules are conditions that you set up on each data type in order to protect the data from being viewed and edited by unauthorized users.What are Privacy Rules?All the data that you store in the database is hosted on a server. Privacy Rules are rules that instruct the server to only send data to the browser or write to the database if certain conditions are met.For example, we could allow our Products to only be viewable by people who are logged in. The Privacy Rule in humanly readable terms would be:Only return the data if the current user is logged inThe logic in this case would be that we ask the server for some information by using a data source such as Do a search for and an operator like Name to show a Product name. If the Privacy Rule above is active, Bubble will only return the data if the query came from a user that is logged in.The reason this is so essential to app security is that it's stopped on the server-side, and the data remains in an encrypted state in the database instead of being sent to the browser where it could be viewed.As illustrated above, the Privacy Rules make up a sort of firewall for your data – every request to the database goes through a process of authentication and authorization before it's completed or rejected.Client-side dataBefore we explore Privacy Rules, it's important to understand that all data that reaches your user's device is by definition no longer secure. As a developer, you need to be aware that the as long as the data has been downloaded to the user's device – even if it's not displayed anywhere in your app – the user of that device can access it by looking at the data traffic being sent to and from the Bubble server.This is fairly technical subject – suffice it to say that the only way data remains truly inaccessible is ensure it is not sent from the server in the first place. And Privacy Rules are the way to do that.It's also important to stress that in most cases, we want the data to reach the device. If not, we wouldn't be able to work with data at all. The important task is to ensure that only the intended information is sent and no unauthorized data.In an eCommerce store we would likely find data in the database that has different security requirements:All Products should be viewable by anyone (if not, no one will be able to buy anything)All Shopping carts should only be viewable by the user who created it (to keep the user's purchase history private)The Products are known as public data and the Shopping cart is private data.How Privacy Rules workUsing the Bubble API introduces some new settings in the Privacy Rule tab. You can read more about those special settings in the article below.Article: Data API Privacy Rules​Article: Workflow API Privacy Rules​Bubble features a Privacy Rule editor that lets you control the privacy settings on all your data types in one central place. You access this by going to the Data tab and then clicking Privacy.Privacy Rules protect your data types in the following ways:You can stop specific fields from being viewedYou can stop the data type from being found with Do a search forYou can stop users from viewing uploaded filesYou can stop users from making changes with auto-bindingManaging the security of private files requires configuring specific settings within both the Privacy Rules and the element responsible for uploading the file.You can learn more about this in our dedicated guide below:Article: Files​Article section: Uploading private files​Privacy Rules are built using two pieces of information:What are the attributes of the database thingWhat are the attributes of the current userBy combining the attributes of these two, we can flexibly set up rules that determine who the user is and what the user is trying to access. Let's look at another rule written out as a sentence to illustrate:Only return the data if the thing's Creator is the current userHere we are involving both the thing in question and the current user. If the current user and the creator of the thing is the same, then Bubble will return the data. If they are not, the data stays securely on the server.Privacy Rule settingsEach Privacy Rule consists of different settings, and the easiest way to understand how they work is to simply read them from left to right like you would an English sentence:Instead of viewing at a complex dashboard with different settings, it can be useful to simply read it out from left to right as a sentence.The sentence above says "When the current user is logged in, users who match this rule can view all fields". Since we are working on the data type Product (visible in the header of the form), we could extend that sentence to "When the current user is logged in, users who match this rule can view all fields on the product".The settings and their labels are meant to be taken literally. For example, View all fields means View all fields – it does not stop making changes to the field in a workflow. Likewise, Find this in searches applies to Do a search for specifically – but the record can still be referenced in other ways.We recommend playing around with the settings and viewing the results on a page to learn how they affect what users can see and do.Privacy Rules and workflowsDo Privacy Rules affect your app's workflows? The answer is yes and no.View all fields does not stop you from Making changes to a thing and updating that field in a workflow. However, it can stop you from correctly checking a condition if the current user is unable to view the field on which the condition is basedDo a search for does not stop you from making changes to a thing, but it can stop you from getting the search results that you want in a workflow. In other words, if you are using the Do a search for data source in a workflow, the search will only return the data that the current user has access to.Allow auto-binding stops the user from making changes through auto-bound elements – but it does not stop them from making those same changes in a workflow.There are two important lessons we can take in:You need to view the workflow as being run by the current user – the same restrictions will apply to the workflow as in any other scenario in your appTo protect workflows from performing tasks you don't want it to, you'll need to use conditional expressions in the Only when field on the workflow or specific actionCan I override Privacy Rules in a workflow?Sometimes you'll have a need to override Privacy Rules when a user takes a specific action. For example:1.User 1 does not have permission to search for any other users2.When User 1 runs a specific action, you may need to perform a search for all other users to make a changeIn other words, you need to override the Privacy Rule that stops User 1 from searching for other users. This is done by using an API Workflow and checking Ignore privacy rules when running the workflow.This lets you run workflows that perform an important task with full access to data, without compromising your security by opening up the access for the current user. The operation is performed purely server-side, meaning that your users cannot see it or even know that it's running.Using an API Workflow, we can override Privacy Rules to get access to data that the current user is prohibited from seeing. It all happens securely on Bubble's server and never reaches the current user's deviceExamplesExample 1: Shopping cartFirst, we'll set up the example from earlier, but expand on it a little bit. We have a custom data type called Shopping Cart. This type should only be found in searches and viewable by the person who created it. But wait: if no one else can see the order, how are we to deliver the product?Someone else needs to be able to see it, but it must be restricted. We'll set up a custom field on each user called Admin (yes/no), which grants access to see anyone's cart. On the cart, we can use the already existing and automatically populated Created by field.The User should look like this:We set up a simple yes/no field to separate admin users from regular users. Note that we have set the default value to no to make sure that new users are not an admin by default.This setup requires that we set up three Privacy Rules:1.The first gives access to search for and view fields on the cart if you are the one who created it2.The second gives access to search for and view fields on the cart if your admin field is set to yes3.The third is the automatically generated Everyone else rule: this states that everyone else should have no accessThese three simple rules is all we need in this scenario. Pay especially close attention to the bottom rule, marked in red. This is the one that determines what happens to everyone else. We've unchecked all the boxes in this example, making sure that only admins and cart owners get access.A good way to think about Privacy Rules is that the most generous rule – the one that gives the broadest access – will always override any other rules you set up.With Privacy Rules, you don't prohibit access, you grant it.Following that logic, our two top rules are granting access to the cart 1) if you are the cart's creator, or 2) if you are an admin, as specificed by the Admin yes/no field.Example 2: Sharing tasksIn this example, we'll look into how properties on the data type to which the Privacy Rules are applied can further grant access under certain circumstances.Let's imagine we have a task management app, where access to tasks follow two simple rules:1.The creator of the task has full access to their tasks2.The creator can invite other users into a specific task, granting them accessIn that case, we need some way to determine whether a user has been invited to a specific task. Keep in mind, we want to add that permission only to certain tasks, not all of them.We can solve this by adding a new custom field on the Task data type that contains a list of all Users who have been invited to it. The database structure can look like this:Whenever we want to give someone access to the Task, we add their name to the list using workflow:Since the Invited users field is set to be a list, Bubble lets us use the add function that will add that single user to the list of Invited Users (if we wanted to add a list of users we would use the add list function).Now, to set up our Privacy Rule, we will again need three rules:1.The first states that if the current user is the Creator of the task, you should have access2.The second states that if the current user is in the list of invited users, you should have access3.The third (everyone else) states that no one else should have accessIn the Privacy Rule editor it will look like this:Again we can see that the two rules grant access under special circumstances, while the bottom does not grant the permission to everyone else.Ending notesPrivacy Rules are the most important safeguard you have to protect your user's data, and we strongly encourage that you get to know them well and make a habit of setting up data to be secure from day one. Privacy Rules act on the server-side, making it impossible for data to be stolen, tampered with or accidentally leaked, since the information never leaves the serverBubble has strong security features in place, but we don't enforce them. It's up to you as the developer of the app to use them in the right way to make sure your user's private data stays private.​PreviousDisplaying dataNextThe database editorLast modified 4d agoCopy linkOn this pageWhat are Privacy Rules?Client-side dataHow Privacy Rules workPrivacy Rule settingsPrivacy Rules and workflowsExamplesExample 1: Shopping cartExample 2: Sharing tasksEnding notes









Workflow API Privacy Rules - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationThe Data APIThe Workflow APIWorkflow API Privacy RulesWorkflow API endpointsAPI WorkflowsThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookWorkflow API Privacy RulesThis section covers how API Workflows are affected by Privacy Rules.Help us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​Whenever you run any kind of workflow in your app, they will respect the privacy rules of any data type referenced in that workflow. The same applies to API workflows - the authentication of the client sending the request determines what kind of data they have access to.Privacy Rules serve as a secure filter to stop unauthorized access to your app's database.It’s important to note that privacy rules apply to what data they can see, but it doesn’t affect the actions in your workflow. For example, a workflow may be affected by the Find this in searches privacy setting: in this scenario, an authenticated client would only be able to search for things that a privacy rule grants them access to.Privacy Rules affect your database. They can stop an API Workflow from accessing specific data based on who the client is, but it will not stop the API Workflow from running altogether.Let’s say that you have a Make changes to a thing action inside of that workflow. The action would complete regardless of Privacy Rules, but if you are searching for a thing to make changes to, Privacy Rules may stop you from finding the thing you want to change.In other words, the action would technically complete, but if you don’t find the record you want to make changes to it won’t make any difference.The new Privacy Rule settings that are introduced when you activate the Data API in your app’s settings (Create via API, Modify via API and Delete via API) do not affect your API workflows.In essence, by running an API workflow you have the freedom to change anything you want in the database, but the access to database records is still protected by privacy rules.Overriding Privacy RulesIn any API workflow you can override Privacy Rules by checking the Ignore privacy rules when running the workflow box. This is useful in cases where you need to execute a workflow that needs to have access to data that the Current User does not have have access to because of Privacy Rules.Checking Ignore Privacy Rules lets you override the rules that affect the User that initiated the workflow in all the actions associated with this workflow.
PreviousThe Workflow APINextWorkflow API endpointsLast modified 1mo agoCopy link









Scheduling API Workflows - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsIntroduction to APIsThe Bubble APIBubble API terminologyAuthenticationThe Data APIThe Workflow APIWorkflow API Privacy RulesWorkflow API endpointsAPI WorkflowsCreating API WorkflowsScheduling API WorkflowsRecursive API WorkflowsCase: Stripe notificationsThe API ConnectorPlugins that connect to APIsAPI GlossaryTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookScheduling API WorkflowsAPI Workflows can be triggered or scheduled internally in your appHelp us improve this articleThis article is part of a significant update to the Bubble manual and your feedback is critical to our efforts to continuously enhance our written documentation.

We would greatly appreciate if you could take a moment to let us know your thoughts on the quality of it. Thank you for your support!

Give feedback on this article​While the Workflow API is useful for building workflows that can be exposed and triggered by external applications and systems, API Workflows can also be used to schedule workflows in your application. Scheduled API workflow use casesThere are many use cases where scheduling an API Workflow is a better alternative than running a workflow on the page.When you need to schedule an action in the future, such as:Sending an email X number of hours after a User signs upSend a reminder X number of days before an eventTerminate a trial one month after it has startedSchedule recurring Events, such asSending a weekly newsletterCalculate and save statistics or aggregationsDelete redundant data to clean up the databasePerforming complex Workflows, such as:Actions that involve complex searches and filteringWorkflows that contain a long list of actions that can take some time to completeLooping Workflows, to:Make changes to a list of Things one-by-oneRun actions that depend on a previous cycle to completeSet up cascading Workflows, such as:Deleting Things in your database that are connected to other Things that also need to be deleted or updatedHow to schedule an API WorkflowAfter you have built the API Workflow you want to trigger, you schedule it to run at the current date-time or in the future by using the action Schedule API Workflow.Scheduling an API Workflow will prompt you to set a date and time for when to run, as well as specify any parameters you set up when the API Workflow was created.You pick the API workflow you want to schedule and define the time of the scheduling. You'll be prompted to fill the different parameters that have been defined at the API workflow level.Schedule an API Workflow on a list of ThingsYou can also schedule an API workflow on a list of Things. This way you are scheduling one workflow per entry in the list.For example, if you want to run a workflow on 20 users, you can use the Schedule API Workflow on a list of things action to schedule 20 separate API Workflows. You can then set up that workflow to perform actions on one user at a time.While this can be used to run a given workflow separately on each item in a list, it's not technically looping – scheduling an API Workflow on a list will schedule one workflow per item, but it will not wait for one to finish before it moves on to the next.If you are looking to create an API Workflow that loops over entries in a list sequentially, you can use Recursive Workflows instead of Schedule API Workflow on a list.For performance reasons, Bubble may space in time the different executions of the workflows.The scheduling of a list of API Workflows can time out if the list is too long. For lists that are longer than a 100 items we recommend using Recursive API Workflows instead. Since they are scheduled sequentially instead of all at once, you can avoid timing out.Article: Recursive API Workflows​To schedule an API Workflow on a list, make sure to define your endpoint with a parameter for a particular Data Type. You can define what kind of Data Type you want to schedule the list of Workflows on. In the example above we've set up a parameter with the User data type.Then, when you schedule the API workflow on a list, you'll choose the type of thing, the list to run on, and for the parameter you'll be able to choose "this thing".By setting the Type of things to the Data Type we created a parameter for, we can run the workflow once for every User we find in the Search for user list result.The API workflow well then run in the context of this thing for each thing in the list.Canceling a scheduled workflowWhenever you schedule an API Workflow Bubble generates a unique ID for that specific instance. The Schedule API Workflow returns that ID so that you can reference that in a later step in the same workflow:Scheduling an API Workflow returns a unique ID that you can use in the next step. In this example we're saving the ID on the Current User-You can use this ID to cancel the API Workflow at any time before it is scheduled to run by using the Cancel a scheduled API Workflow action.To cancel a list of scheduled Workflows you can use the Cancel a list of scheduled API Workflows action.PreviousCreating API WorkflowsNextRecursive API WorkflowsLast modified 13d agoCopy linkOn this pageScheduled API workflow use casesHow to schedule an API WorkflowSchedule an API Workflow on a list of ThingsCanceling a scheduled workflow









Project Management Apps - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookProject Management AppsBy Airdev, creators of the Canvas building frameworkVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!Project management applications help teams coordinate their efforts to get more done together. The classic setup involves breaking projects into individual tasks, each of which has an owner and deadline. Team members can update and track task statuses as they work toward completing everything on time. More complex setups can involve goals, milestones, subtasks, and other more sophisticated structures. The category has proven to be a natural fit for a web application, since multiple team members need to access and update the same information. Popular examples include Asana, Monday, JIRA, Trello, Wrike, and ClickUp.Though the content below focuses on the data structure that supports the application under the hood, the user experience for a project management app is generally meant to be less linear (e.g., like an ecommerce website) and more free-flowing as users toggle between projects and tasks to collaborate and get things done. The app may include some of the following pages:A homepage and supporting marketing pages to entice and inform potential usersA login page where users can enter credentials to access their portalA personal dashboard, where users can manage their profile, teams, and get an overview of the tasks they are assigned (i.e., their to-do list)A team workspace, where users can manage a team’s settings, members, and projectsA project board, where users can manage the tasks under a project (usually as a list, board, or table)An account settings page, where users can update their credentials and technical settingsAn admin dashboard, where app owners can access key metrics, users, and other key data objects to manage their platformData types recommendedThe primary data object in a project management tool is the Task, which is something that needs to be done by someone (i.e., a User) by a deadline. In order to help Users find, organize, and complete tasks on time, project management tools typically organize them into distinct Projects, each of which has a set of Tasks. Projects can also exist within Teams, each of which has a set of member Users and Projects. Thus each User can see their own Teams, the Projects within them, and the Tasks within those.UserAn individual team member who can login to access their projects and tasks.Suggested fields on this typeEmail (text): the email address the user signs up withName (text): alternatively, you can separate first and last into two fields, and have a third representing full nameProfile picture (image): a nice mugshot to be displayed with their profileRole (Role, an option set): role within the application (member, admin)Teams (list of Teams): a list of teams the user is a part of (i.e., who’s projects they can access)Suggested privacy rules on this typeUsers on the same team can access one another’s infoAdmins can access any user’s infoEveryone else can’t find or access any user info (since each team is a closed system)TeamA group of individual users who work together on a set of projects and tasks.Suggested fields on this typeName (text): each team can have a name (e.g., Dunder Mifflin)Owner (User): the team member who can edit the team, add/remove team members (this might start with the team’s creator, but the distinction could be transferred to someone else)[Members (list of Users)]: this is optional since each User has a list of teams they are a part of – sometimes it’s helpful to link both ways to simplify search expressions in the app, as long as you keep both directions in sync (try a database trigger for that)[Projects (list of Projects)]: another optional linkage, since each project has a teamSuggested privacy rules on this typeUsers can access teams they belong toAdmins can access any team’s infoEveryone else can’t find or access any team info (since each team is a closed system)ProjectA single initiative (represented by a collection of tasks) to be completed by a team.Suggested fields on this typeName (text): each project can have a name (e.g., Public Launch)Team (Team): the team that is working on the projectOwner (User): this might be helpful for tracking (i.e., where do Michael Scott’s projects stand?)[Tasks (list of Tasks)]: this is an optional linkage, since each task has a project[Completed tasks (number)]: sometimes it’s helpful to pre-calculate a count of tasks for the project to make it easier to download project data and display metrics without lots of search expressions[Total tasks (number)]: see explanation above – completed / total allow you to calculate percent completedSuggested privacy rules on this typeUsers can access projects within teams they are a part ofAdmins can access any project’s infoEveryone else can’t find or access any project info (since each team is a closed system)TaskA single action item within a project, assigned to someone from the team, with a deadline and status that can be tracked to completion.Suggested fields on this typeTitle (text): the high-level name of the task (e.g., “Purchase party hats”)Description (text): a long-form description of the work to be doneAttachments (list of files): any images or files relevant to the taskAssignee (User): the team member responsible for the taskDeadline (date): when the task is dueStatus (Status, an option set): the current stage in the process the task is inProject (Project): the initiative the task is a part of[Team (Team)]: this is an optional linkage because the task’s project will be associated with a team, but sometimes it’s easier to create the direct link to make privacy rules easierWatchers (list of Users): any team members who want to be notified of changes to the task (e.g., the assignee’s manager)Tags (list of Tags, an option set): any labels the task fits into (makes filtering tasks easier)Suggested privacy rules on this typeUsers can access tasks within teams they are a part ofAdmins can access any task’s infoEveryone else can’t find or access any task info (since each team is a closed system)Option sets recommendedRole (users)MemberAdminHaving an option set for high-level application roles is useful for any application. In this case, it helps to separate standard users from administrators. This will affect what data the user has access to, and whether they work within their team workspace or an admin dashboard. Note: this is different than team-based roles or project-based roles. In this MVP setup, we’ve assumed each has a single owner, but you could use a separate option set to define roles at those levels.Status (tasks)NewTo doDoingDoneAssuming you want to use the same set of task statuses across the application, it will be easiest to use an option set. This makes it easier to adjust the list later without disrupting existing data. Note: if you want to allow for custom statuses by team or project, you would move these to a data object so they can be edited on the fly from within the app.Tag (tasks)UrgentBugFeatureetc.Assuming you want to set the tags that tasks can be labeled with across the application, it will be easiest to use an option set. Note: if you want to allow for custom tags by team or project, you would move these to a data object, for the same reason as for statuses above.Example uses in your appOn the personal dashboard, searches may include:My tasks: Search for Tasks where Assignee = Current User and Status <> Done, Sorted by Due Date (ascending). This will start with overdue tasks (i.e., with due dates in the past) and proceed to nearest upcoming tasks.My teams: With the data structure above, this can be done directly as Current User’s Teams (using the list field). Alternatively, it can be done as Search for Teams where Members includes Current User (this condition isn’t strictly needed since privacy rules will only allow a user to see their own teams, but it can be helpful anyway).On the team dashboard, searches may include:Projects: This can be done directly as This Page’s Team’s Projects (using the list field). Alternatively, it can be done as Search for Projects where Team = This Page’s Team.Members: This can be done directly as This Page’s Team’s Members (using the list field). Alternatively, it can be done as Search for Users where Teams includes This Page’s Team.A selected Project’s tasks: This can be done directly as Parent group’s Project’s Tasks (using the list field). Note: “Parent group” assumes you’re showing the list within a group that has a data type = Project, which you change the value of when a user selects a project. If you are using a board/Kanban view, you may have a repeating group of lanes/statuses, where the data type is the Status option set and each cell has a search for tasks with that status.Additional notesProject management software can get very feature-rich in order to satisfy the needs of the broadest range of teams and projects. In addition to the basic structure above, below are a few common features you may want to include in your database structure:The ability for users to post comments within a task to collaborateCustom fields on a task, either at the team or project levelA history of updates for a task (e.g., status changes, edits to name/description, reassignment, deadline shifts)Custom statuses / tags for each team or project (as described above)Subtasks (i.e., the ability for tasks to be nested under one another)Project management tools are sometimes white-labeled, so each team can have their own copy on their domain. Bubble supports this through their “sub-app” feature. If you take this approach, you can create the app assuming just one team, and create a copy for each team.About the author: AirdevAirdev (airdev.co) is the original and largest Bubble development agency, and creators of Canvas (build.airdev.co/canvas), the #1 Bubble template and building framework.Headquartered in San Francisco, we have spent the past 7 years developing a unique process for bringing ideas to life using Bubble. This includes:A globally distributed network of the best Bubblers in the worldA building framework (Canvas) that provides best-in-class design and functionality to every app at 10x the speedA custom process facilitated by our Bubble-built project management toolWe have served hundreds of clients ranging from sole non-technical entrepreneurs to funded fast-growing startups to Fortune 50 enterprises. Our mission is to eliminate the technical barriers to bringing great ideas to life, and to provide great no-code careers to a new breed of product builders (see our Partners program).PreviousSaaS AppsNextCRM AppsLast modified 11mo agoCopy linkOn this pageData types recommendedUserTeamProjectTaskOption sets recommendedRole (users)Status (tasks)Tag (tasks)Example uses in your appAdditional notesAbout the author: Airdev









Dashboards - Bubble Docs









Bubble DocsSearch…⌃KBubble DocsSearch…⌃KIntroductionNew? Start HereChangelogUser manualDesignDataThe databaseData types and fieldsCreating, saving and deleting dataFinding dataDisplaying dataProtecting data with Privacy RulesThe database editorWorking with Location DataUsing AlgoliaDatabase structure by app typeMarketplace AppsDirectory & Listings AppsSocial Network AppsSaaS AppsProject Management AppsCRM AppsProfessional Services AppsOn-demand AppsDocumentation/ CMS AppsApplicant Tracking System (ATS) AppsPortfolio AppsGallery AppsOnline Store / Ecommerce AppsBlog AppsMessaging AppDashboardsBuilding Block AppsBubble as a backendFilesStatic dataTemporary dataUser accountsStructuring an ApplicationBuilding WorkflowsUsing PluginsAPIs: Connect to other appsTesting an ApplicationOptimizing an ApplicationCustomizing an ApplicationMore about Bubble appsMaintaining an ApplicationCore ReferenceBubble's InterfaceElementsWorkflowsEventsActionsDataStylesAPIBubble-made PluginsApplication SettingsAccount & MarketplaceAccount & BillingDedicated PlansBuilding PluginsBuilding TemplatesMiscellaneousThe ShowcaseMore features for your to-do appThe GlossaryPowered By GitBookDashboardsBy Robert Brooks, Founder & CEO, MVP.devVarious members of the Bubble ecosystem contributed these use case-oriented database guides. There's always more than one way to do something in Bubble, but the advice here can help you get started if you're new to Bubble!In this guide, we will be creating a dashboard for a sales team inside a learning management platform. The dashboard will be in the Customer Relationship Management (CRM) platform that was built in Bubble.io. This is a central place where sales reps can see their performance and manage their sales activities. The dashboard has different charts and graphs that give insights into the sales process and help reps stay on track with their goals for the day.Bubble is a great platform for quick dashboard generation.  With a good selection of charting plugins, you can easily have your own dashboard stood up for your platform in no time at all.Data types recommendedThe CRM stores common sales data, such as Users, Contacts, Deals, Sales Made, and Chart DataUsersThe users data type stores information about the users of the system – in this case, sales reps, but could include others such as sales managers, SDRS, etc.Suggested fields on this typeEmail - textFirst Name - textLast Name – textRole – Roles: Option set that defines the access level the user has to the CRM; privacy rules on many data types will be influenced by thisManager – User: This sales reps managerAnd any other fields that might be relevant for platform usersPrivacy rules for this data typeEach user can view all fields for their own data relevant to their own profile, as well as find in searches, and view attached filesUsers with the Manager role can:View all fields except the following:SlugCreated DateModified DateFind this in searchesView attached filesUsers with the Admin role can view all fields for all users, as well as find in searches, and view attached filesContactsA CRM contact is a customer or potential customer who is associated with a CRM account. CRM contacts typically have detailed information such as name, contact information, and account history.Suggested fields on this typeContact Type – Contact Types: Option set that defines the type of contact this record representsFirst Name - textLast Name – textCompany - textPhone Number – numberEmail - textTitle – textAddress - geographic addressOwner - Users: Determines which sales rep owns the recordNotes - textPrivacy rules for this data typeUsers with the Sales Rep and Sales Manager roles can:View all fields for their own data or direct reports data except the following:Created DateModified DateFind this in searchesView attached filesDealsA CRM deal is a type of customer relationship management software that helps businesses manage their customer data. It can be used to track customer interactions, sales, and marketing campaigns. CRM deals can be found online or through software providers.Suggested fields on this typeContact – Contacts: contact record for this dealName - textDescription – textAmount – numberStage – StagesDate - datePrivacy rules for this data typeUsers with the Sales Rep and Sales Manager roles can:View all fields for their own data or direct reports data except the following:Created DateModified DateFind this in searchesView attached filesSales MadeA completed transaction in the CRM platform that resulted from a dealSuggested fields on this typeDeal – Deals: Deal that generated the saleAmount – numberDate - datePrivacy rules for this data typeUsers with the Sales Rep and Sales Manager roles can:View all fields for their own data or direct reports data except the following:Created DateModified DateFind this in searchesView attached filesChart DataData to be displayed in the charts on the dashboard.  This is usually aggregated data of some sort; sales per month, lost deals this quarter, etc. We store this aggregated data in its own data type so that it’s easier to retrieve this for a chart, instead of having to do the aggregations and calculations when setting up the individual charts.Suggested fields on this typeChart Information – Chart Information: An option set showing the type of data represented by this recordNumber – numberDate – dateUser – Users: the user this data represents.Privacy rules for this data typeUsers with the Sales Rep and Sales Manager roles can:View all fields except the following:Created DateModified DateFind this in searchesView attached filesOption sets recommendedRolesSales RepSales ManagerAdministratorSets the access level the user has to the platformContact TypesLeadClientPartnerOtherDetermines the type of contact the records applies to.StagesNewProposalWonLostDetermines the stage the deal is currently in.Chart InformationSalesLeadsProposalsWonLostDetermines the stage the deal is currently in.About MVP.devAt MVP.dev, we help business owners harness the power of no-code technology to bring their vision to life in weeks through a high-touch proven process.Rather than holding your tech hostage through a drawn-out and mysterious process, we’re passionate about partnering and collaborating with you every step of the way — from idea to design to development to delivery.We lean on your vision and our experience to create a truly unforgettable experience and product.PreviousMessaging AppNextBuilding Block AppsLast modified 11mo agoCopy linkOn this pageData types recommendedUsersContactsDealsSales MadeChart DataOption sets recommendedRolesContact TypesStagesChart InformationAbout MVP.dev



